{"ast":null,"code":"const npmFetch = require('npm-registry-fetch');\nconst needsAuthError = msg => Object.assign(new Error(msg), {\n  code: 'ENEEDAUTH'\n});\nmodule.exports = async (npm, opts = {}) => {\n  const {\n    registry\n  } = opts;\n  if (!registry) throw Object.assign(new Error('No registry specified.'), {\n    code: 'ENOREGISTRY'\n  });\n\n  // First, check if we have a user/pass-based auth\n  const creds = npm.config.getCredentialsByURI(registry);\n  const {\n    username: usernameFromURI,\n    token\n  } = creds;\n  if (usernameFromURI) {\n    // Found username; return it\n    return usernameFromURI;\n  } else if (token) {\n    // No username, but we have a token; fetch the username from registry\n    const registryData = await npmFetch.json('/-/whoami', {\n      ...opts\n    });\n    const {\n      username: usernameFromRegistry\n    } = registryData;\n    // Retrieved username from registry; return it\n    if (usernameFromRegistry) return usernameFromRegistry;else {\n      // Didn't get username from registry; bad token\n      throw needsAuthError('Your auth token is no longer valid. Please login again.');\n    }\n  } else {\n    // At this point, if they have a credentials object, it doesn't have a\n    // token or auth in it. Probably just the default registry.\n    throw needsAuthError('This command requires you to be logged in.');\n  }\n};","map":{"version":3,"names":["npmFetch","require","needsAuthError","msg","Object","assign","Error","code","module","exports","npm","opts","registry","creds","config","getCredentialsByURI","username","usernameFromURI","token","registryData","json","usernameFromRegistry"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/get-identity.js"],"sourcesContent":["const npmFetch = require('npm-registry-fetch')\n\nconst needsAuthError = (msg) =>\n  Object.assign(new Error(msg), { code: 'ENEEDAUTH' })\n\nmodule.exports = async (npm, opts = {}) => {\n  const { registry } = opts\n  if (!registry)\n    throw Object.assign(new Error('No registry specified.'), { code: 'ENOREGISTRY' })\n\n  // First, check if we have a user/pass-based auth\n  const creds = npm.config.getCredentialsByURI(registry)\n  const { username: usernameFromURI, token } = creds\n\n  if (usernameFromURI) {\n    // Found username; return it\n    return usernameFromURI\n  } else if (token) {\n    // No username, but we have a token; fetch the username from registry\n    const registryData = await npmFetch.json('/-/whoami', {\n      ...opts,\n    })\n    const { username: usernameFromRegistry } = registryData\n    // Retrieved username from registry; return it\n    if (usernameFromRegistry)\n      return usernameFromRegistry\n    else {\n      // Didn't get username from registry; bad token\n      throw needsAuthError(\n        'Your auth token is no longer valid. Please login again.'\n      )\n    }\n  } else {\n    // At this point, if they have a credentials object, it doesn't have a\n    // token or auth in it. Probably just the default registry.\n    throw needsAuthError('This command requires you to be logged in.')\n  }\n}\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAE9C,MAAMC,cAAc,GAAIC,GAAG,IACzBC,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACH,GAAG,CAAC,EAAE;EAAEI,IAAI,EAAE;AAAY,CAAC,CAAC;AAEtDC,MAAM,CAACC,OAAO,GAAG,OAAOC,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,KAAK;EACzC,MAAM;IAAEC;EAAS,CAAC,GAAGD,IAAI;EACzB,IAAI,CAACC,QAAQ,EACX,MAAMR,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,wBAAwB,CAAC,EAAE;IAAEC,IAAI,EAAE;EAAc,CAAC,CAAC;;EAEnF;EACA,MAAMM,KAAK,GAAGH,GAAG,CAACI,MAAM,CAACC,mBAAmB,CAACH,QAAQ,CAAC;EACtD,MAAM;IAAEI,QAAQ,EAAEC,eAAe;IAAEC;EAAM,CAAC,GAAGL,KAAK;EAElD,IAAII,eAAe,EAAE;IACnB;IACA,OAAOA,eAAe;EACxB,CAAC,MAAM,IAAIC,KAAK,EAAE;IAChB;IACA,MAAMC,YAAY,GAAG,MAAMnB,QAAQ,CAACoB,IAAI,CAAC,WAAW,EAAE;MACpD,GAAGT;IACL,CAAC,CAAC;IACF,MAAM;MAAEK,QAAQ,EAAEK;IAAqB,CAAC,GAAGF,YAAY;IACvD;IACA,IAAIE,oBAAoB,EACtB,OAAOA,oBAAoB,MACxB;MACH;MACA,MAAMnB,cAAc,CAClB,yDACF,CAAC;IACH;EACF,CAAC,MAAM;IACL;IACA;IACA,MAAMA,cAAc,CAAC,4CAA4C,CAAC;EACpE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const libnpmversion = require('libnpmversion');\nconst {\n  resolve\n} = require('path');\nconst {\n  promisify\n} = require('util');\nconst readFile = promisify(require('fs').readFile);\nconst BaseCommand = require('./base-command.js');\nclass Version extends BaseCommand {\n  static get description() {\n    return 'Bump a package version';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'version';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['allow-same-version', 'commit-hooks', 'git-tag-version', 'json', 'preid', 'sign-git-tag', 'workspace', 'workspaces'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]'];\n  }\n  async completion(opts) {\n    const {\n      conf: {\n        argv: {\n          remain\n        }\n      }\n    } = opts;\n    if (remain.length > 2) return [];\n    return ['major', 'minor', 'patch', 'premajor', 'preminor', 'prepatch', 'prerelease', 'from-git'];\n  }\n  exec(args, cb) {\n    return this.version(args).then(() => cb()).catch(cb);\n  }\n  execWorkspaces(args, filters, cb) {\n    this.versionWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n  async version(args) {\n    switch (args.length) {\n      case 0:\n        return this.list();\n      case 1:\n        return this.change(args);\n      default:\n        throw this.usage;\n    }\n  }\n  async versionWorkspaces(args, filters) {\n    switch (args.length) {\n      case 0:\n        return this.listWorkspaces(filters);\n      case 1:\n        return this.changeWorkspaces(args, filters);\n      default:\n        throw this.usage;\n    }\n  }\n  async change(args) {\n    const prefix = this.npm.config.get('tag-version-prefix');\n    const version = await libnpmversion(args[0], {\n      ...this.npm.flatOptions,\n      path: this.npm.prefix\n    });\n    return this.npm.output(`${prefix}${version}`);\n  }\n  async changeWorkspaces(args, filters) {\n    const prefix = this.npm.config.get('tag-version-prefix');\n    await this.setWorkspaces(filters);\n    for (const [name, path] of this.workspaces) {\n      this.npm.output(name);\n      const version = await libnpmversion(args[0], {\n        ...this.npm.flatOptions,\n        'git-tag-version': false,\n        path\n      });\n      this.npm.output(`${prefix}${version}`);\n    }\n  }\n  async list(results = {}) {\n    const pj = resolve(this.npm.prefix, 'package.json');\n    const pkg = await readFile(pj, 'utf8').then(data => JSON.parse(data)).catch(() => ({}));\n    if (pkg.name && pkg.version) results[pkg.name] = pkg.version;\n    results.npm = this.npm.version;\n    for (const [key, version] of Object.entries(process.versions)) results[key] = version;\n    if (this.npm.config.get('json')) this.npm.output(JSON.stringify(results, null, 2));else this.npm.output(results);\n  }\n  async listWorkspaces(filters) {\n    const results = {};\n    await this.setWorkspaces(filters);\n    for (const path of this.workspacePaths) {\n      const pj = resolve(path, 'package.json');\n      // setWorkspaces has already parsed package.json so we know it won't error\n      const pkg = await readFile(pj, 'utf8').then(data => JSON.parse(data));\n      if (pkg.name && pkg.version) results[pkg.name] = pkg.version;\n    }\n    return this.list(results);\n  }\n}\nmodule.exports = Version;","map":{"version":3,"names":["libnpmversion","require","resolve","promisify","readFile","BaseCommand","Version","description","name","params","usage","completion","opts","conf","argv","remain","length","exec","args","cb","version","then","catch","execWorkspaces","filters","versionWorkspaces","list","change","listWorkspaces","changeWorkspaces","prefix","npm","config","get","flatOptions","path","output","setWorkspaces","workspaces","results","pj","pkg","data","JSON","parse","key","Object","entries","process","versions","stringify","workspacePaths","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/version.js"],"sourcesContent":["const libnpmversion = require('libnpmversion')\nconst { resolve } = require('path')\nconst { promisify } = require('util')\nconst readFile = promisify(require('fs').readFile)\n\nconst BaseCommand = require('./base-command.js')\n\nclass Version extends BaseCommand {\n  static get description () {\n    return 'Bump a package version'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'version'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'allow-same-version',\n      'commit-hooks',\n      'git-tag-version',\n      'json',\n      'preid',\n      'sign-git-tag',\n      'workspace',\n      'workspaces',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]']\n  }\n\n  async completion (opts) {\n    const { conf: { argv: { remain } } } = opts\n    if (remain.length > 2)\n      return []\n\n    return [\n      'major',\n      'minor',\n      'patch',\n      'premajor',\n      'preminor',\n      'prepatch',\n      'prerelease',\n      'from-git',\n    ]\n  }\n\n  exec (args, cb) {\n    return this.version(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.versionWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async version (args) {\n    switch (args.length) {\n      case 0:\n        return this.list()\n      case 1:\n        return this.change(args)\n      default:\n        throw this.usage\n    }\n  }\n\n  async versionWorkspaces (args, filters) {\n    switch (args.length) {\n      case 0:\n        return this.listWorkspaces(filters)\n      case 1:\n        return this.changeWorkspaces(args, filters)\n      default:\n        throw this.usage\n    }\n  }\n\n  async change (args) {\n    const prefix = this.npm.config.get('tag-version-prefix')\n    const version = await libnpmversion(args[0], {\n      ...this.npm.flatOptions,\n      path: this.npm.prefix,\n    })\n    return this.npm.output(`${prefix}${version}`)\n  }\n\n  async changeWorkspaces (args, filters) {\n    const prefix = this.npm.config.get('tag-version-prefix')\n    await this.setWorkspaces(filters)\n    for (const [name, path] of this.workspaces) {\n      this.npm.output(name)\n      const version = await libnpmversion(args[0], {\n        ...this.npm.flatOptions,\n        'git-tag-version': false,\n        path,\n      })\n      this.npm.output(`${prefix}${version}`)\n    }\n  }\n\n  async list (results = {}) {\n    const pj = resolve(this.npm.prefix, 'package.json')\n\n    const pkg = await readFile(pj, 'utf8')\n      .then(data => JSON.parse(data))\n      .catch(() => ({}))\n\n    if (pkg.name && pkg.version)\n      results[pkg.name] = pkg.version\n\n    results.npm = this.npm.version\n    for (const [key, version] of Object.entries(process.versions))\n      results[key] = version\n\n    if (this.npm.config.get('json'))\n      this.npm.output(JSON.stringify(results, null, 2))\n    else\n      this.npm.output(results)\n  }\n\n  async listWorkspaces (filters) {\n    const results = {}\n    await this.setWorkspaces(filters)\n    for (const path of this.workspacePaths) {\n      const pj = resolve(path, 'package.json')\n      // setWorkspaces has already parsed package.json so we know it won't error\n      const pkg = await readFile(pj, 'utf8')\n        .then(data => JSON.parse(data))\n\n      if (pkg.name && pkg.version)\n        results[pkg.name] = pkg.version\n    }\n    return this.list(results)\n  }\n}\n\nmodule.exports = Version\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
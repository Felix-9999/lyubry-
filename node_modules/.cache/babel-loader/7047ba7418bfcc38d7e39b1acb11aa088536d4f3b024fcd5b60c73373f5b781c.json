{"ast":null,"code":"const Arborist = require('@npmcli/arborist');\nconst auditReport = require('npm-audit-report');\nconst reifyFinish = require('./utils/reify-finish.js');\nconst auditError = require('./utils/audit-error.js');\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\nclass Audit extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Run a security audit';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'audit';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['audit-level', 'dry-run', 'force', 'json', 'package-lock-only', 'omit', ...super.params];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[fix]'];\n  }\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n    if (argv.length === 2) return ['fix'];\n    switch (argv[2]) {\n      case 'fix':\n        return [];\n      default:\n        throw new Error(argv[2] + ' not recognized');\n    }\n  }\n  exec(args, cb) {\n    this.audit(args).then(() => cb()).catch(cb);\n  }\n  async audit(args) {\n    const reporter = this.npm.config.get('json') ? 'json' : 'detail';\n    const opts = {\n      ...this.npm.flatOptions,\n      audit: true,\n      path: this.npm.prefix,\n      reporter,\n      workspaces: this.workspaceNames\n    };\n    const arb = new Arborist(opts);\n    const fix = args[0] === 'fix';\n    await arb.audit({\n      fix\n    });\n    if (fix) await reifyFinish(this.npm, arb);else {\n      // will throw if there's an error, because this is an audit command\n      auditError(this.npm, arb.auditReport);\n      const result = auditReport(arb.auditReport, opts);\n      process.exitCode = process.exitCode || result.exitCode;\n      this.npm.output(result.report);\n    }\n  }\n}\nmodule.exports = Audit;","map":{"version":3,"names":["Arborist","require","auditReport","reifyFinish","auditError","ArboristWorkspaceCmd","Audit","description","name","params","usage","completion","opts","argv","conf","remain","length","Error","exec","args","cb","audit","then","catch","reporter","npm","config","get","flatOptions","path","prefix","workspaces","workspaceNames","arb","fix","result","process","exitCode","output","report","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/audit.js"],"sourcesContent":["const Arborist = require('@npmcli/arborist')\nconst auditReport = require('npm-audit-report')\nconst reifyFinish = require('./utils/reify-finish.js')\nconst auditError = require('./utils/audit-error.js')\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\n\nclass Audit extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Run a security audit'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'audit'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'audit-level',\n      'dry-run',\n      'force',\n      'json',\n      'package-lock-only',\n      'omit',\n      ...super.params,\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[fix]']\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n\n    if (argv.length === 2)\n      return ['fix']\n\n    switch (argv[2]) {\n      case 'fix':\n        return []\n      default:\n        throw new Error(argv[2] + ' not recognized')\n    }\n  }\n\n  exec (args, cb) {\n    this.audit(args).then(() => cb()).catch(cb)\n  }\n\n  async audit (args) {\n    const reporter = this.npm.config.get('json') ? 'json' : 'detail'\n    const opts = {\n      ...this.npm.flatOptions,\n      audit: true,\n      path: this.npm.prefix,\n      reporter,\n      workspaces: this.workspaceNames,\n    }\n\n    const arb = new Arborist(opts)\n    const fix = args[0] === 'fix'\n    await arb.audit({ fix })\n    if (fix)\n      await reifyFinish(this.npm, arb)\n    else {\n      // will throw if there's an error, because this is an audit command\n      auditError(this.npm, arb.auditReport)\n      const result = auditReport(arb.auditReport, opts)\n      process.exitCode = process.exitCode || result.exitCode\n      this.npm.output(result.report)\n    }\n  }\n}\n\nmodule.exports = Audit\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAMC,WAAW,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC/C,MAAME,WAAW,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACtD,MAAMG,UAAU,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AACpD,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,8BAA8B,CAAC;AAEpE,MAAMK,KAAK,SAASD,oBAAoB,CAAC;EACvC;EACA,WAAWE,WAAWA,CAAA,EAAI;IACxB,OAAO,sBAAsB;EAC/B;;EAEA;EACA,WAAWC,IAAIA,CAAA,EAAI;IACjB,OAAO,OAAO;EAChB;;EAEA;EACA,WAAWC,MAAMA,CAAA,EAAI;IACnB,OAAO,CACL,aAAa,EACb,SAAS,EACT,OAAO,EACP,MAAM,EACN,mBAAmB,EACnB,MAAM,EACN,GAAG,KAAK,CAACA,MAAM,CAChB;EACH;;EAEA;EACA,WAAWC,KAAKA,CAAA,EAAI;IAClB,OAAO,CAAC,OAAO,CAAC;EAClB;EAEA,MAAMC,UAAUA,CAAEC,IAAI,EAAE;IACtB,MAAMC,IAAI,GAAGD,IAAI,CAACE,IAAI,CAACD,IAAI,CAACE,MAAM;IAElC,IAAIF,IAAI,CAACG,MAAM,KAAK,CAAC,EACnB,OAAO,CAAC,KAAK,CAAC;IAEhB,QAAQH,IAAI,CAAC,CAAC,CAAC;MACb,KAAK,KAAK;QACR,OAAO,EAAE;MACX;QACE,MAAM,IAAII,KAAK,CAACJ,IAAI,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC;IAChD;EACF;EAEAK,IAAIA,CAAEC,IAAI,EAAEC,EAAE,EAAE;IACd,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,MAAMF,EAAE,CAAC,CAAC,CAAC,CAACG,KAAK,CAACH,EAAE,CAAC;EAC7C;EAEA,MAAMC,KAAKA,CAAEF,IAAI,EAAE;IACjB,MAAMK,QAAQ,GAAG,IAAI,CAACC,GAAG,CAACC,MAAM,CAACC,GAAG,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,QAAQ;IAChE,MAAMf,IAAI,GAAG;MACX,GAAG,IAAI,CAACa,GAAG,CAACG,WAAW;MACvBP,KAAK,EAAE,IAAI;MACXQ,IAAI,EAAE,IAAI,CAACJ,GAAG,CAACK,MAAM;MACrBN,QAAQ;MACRO,UAAU,EAAE,IAAI,CAACC;IACnB,CAAC;IAED,MAAMC,GAAG,GAAG,IAAIjC,QAAQ,CAACY,IAAI,CAAC;IAC9B,MAAMsB,GAAG,GAAGf,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK;IAC7B,MAAMc,GAAG,CAACZ,KAAK,CAAC;MAAEa;IAAI,CAAC,CAAC;IACxB,IAAIA,GAAG,EACL,MAAM/B,WAAW,CAAC,IAAI,CAACsB,GAAG,EAAEQ,GAAG,CAAC,MAC7B;MACH;MACA7B,UAAU,CAAC,IAAI,CAACqB,GAAG,EAAEQ,GAAG,CAAC/B,WAAW,CAAC;MACrC,MAAMiC,MAAM,GAAGjC,WAAW,CAAC+B,GAAG,CAAC/B,WAAW,EAAEU,IAAI,CAAC;MACjDwB,OAAO,CAACC,QAAQ,GAAGD,OAAO,CAACC,QAAQ,IAAIF,MAAM,CAACE,QAAQ;MACtD,IAAI,CAACZ,GAAG,CAACa,MAAM,CAACH,MAAM,CAACI,MAAM,CAAC;IAChC;EACF;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGnC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
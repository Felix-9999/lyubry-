{"ast":null,"code":"const log = require('npmlog');\nconst pacote = require('pacote');\nconst openUrl = require('./utils/open-url.js');\nconst hostedFromMani = require('./utils/hosted-git-info-from-manifest.js');\nconst BaseCommand = require('./base-command.js');\nclass Bugs extends BaseCommand {\n  static get description() {\n    return 'Report bugs for a package in a web browser';\n  }\n  static get name() {\n    return 'bugs';\n  }\n  static get usage() {\n    return ['[<pkgname>]'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['browser', 'registry'];\n  }\n  exec(args, cb) {\n    this.bugs(args).then(() => cb()).catch(cb);\n  }\n  async bugs(args) {\n    if (!args || !args.length) args = ['.'];\n    await Promise.all(args.map(pkg => this.getBugs(pkg)));\n  }\n  async getBugs(pkg) {\n    const opts = {\n      ...this.npm.flatOptions,\n      fullMetadata: true\n    };\n    const mani = await pacote.manifest(pkg, opts);\n    const url = this.getBugsUrl(mani);\n    log.silly('bugs', 'url', url);\n    await openUrl(this.npm, url, `${mani.name} bug list available at the following URL`);\n  }\n  getBugsUrl(mani) {\n    if (mani.bugs) {\n      if (typeof mani.bugs === 'string') return mani.bugs;\n      if (typeof mani.bugs === 'object' && mani.bugs.url) return mani.bugs.url;\n      if (typeof mani.bugs === 'object' && mani.bugs.email) return `mailto:${mani.bugs.email}`;\n    }\n\n    // try to get it from the repo, if possible\n    const info = hostedFromMani(mani);\n    if (info) return info.bugs();\n\n    // just send them to the website, hopefully that has some info!\n    return `https://www.npmjs.com/package/${mani.name}`;\n  }\n}\nmodule.exports = Bugs;","map":{"version":3,"names":["log","require","pacote","openUrl","hostedFromMani","BaseCommand","Bugs","description","name","usage","params","exec","args","cb","bugs","then","catch","length","Promise","all","map","pkg","getBugs","opts","npm","flatOptions","fullMetadata","mani","manifest","url","getBugsUrl","silly","email","info","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/bugs.js"],"sourcesContent":["const log = require('npmlog')\nconst pacote = require('pacote')\nconst openUrl = require('./utils/open-url.js')\nconst hostedFromMani = require('./utils/hosted-git-info-from-manifest.js')\nconst BaseCommand = require('./base-command.js')\n\nclass Bugs extends BaseCommand {\n  static get description () {\n    return 'Report bugs for a package in a web browser'\n  }\n\n  static get name () {\n    return 'bugs'\n  }\n\n  static get usage () {\n    return ['[<pkgname>]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['browser', 'registry']\n  }\n\n  exec (args, cb) {\n    this.bugs(args).then(() => cb()).catch(cb)\n  }\n\n  async bugs (args) {\n    if (!args || !args.length)\n      args = ['.']\n\n    await Promise.all(args.map(pkg => this.getBugs(pkg)))\n  }\n\n  async getBugs (pkg) {\n    const opts = { ...this.npm.flatOptions, fullMetadata: true }\n    const mani = await pacote.manifest(pkg, opts)\n    const url = this.getBugsUrl(mani)\n    log.silly('bugs', 'url', url)\n    await openUrl(this.npm, url, `${mani.name} bug list available at the following URL`)\n  }\n\n  getBugsUrl (mani) {\n    if (mani.bugs) {\n      if (typeof mani.bugs === 'string')\n        return mani.bugs\n\n      if (typeof mani.bugs === 'object' && mani.bugs.url)\n        return mani.bugs.url\n\n      if (typeof mani.bugs === 'object' && mani.bugs.email)\n        return `mailto:${mani.bugs.email}`\n    }\n\n    // try to get it from the repo, if possible\n    const info = hostedFromMani(mani)\n    if (info)\n      return info.bugs()\n\n    // just send them to the website, hopefully that has some info!\n    return `https://www.npmjs.com/package/${mani.name}`\n  }\n}\n\nmodule.exports = Bugs\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC7B,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,OAAO,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAC9C,MAAMG,cAAc,GAAGH,OAAO,CAAC,0CAA0C,CAAC;AAC1E,MAAMI,WAAW,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AAEhD,MAAMK,IAAI,SAASD,WAAW,CAAC;EAC7B,WAAWE,WAAWA,CAAA,EAAI;IACxB,OAAO,4CAA4C;EACrD;EAEA,WAAWC,IAAIA,CAAA,EAAI;IACjB,OAAO,MAAM;EACf;EAEA,WAAWC,KAAKA,CAAA,EAAI;IAClB,OAAO,CAAC,aAAa,CAAC;EACxB;;EAEA;EACA,WAAWC,MAAMA,CAAA,EAAI;IACnB,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC;EAChC;EAEAC,IAAIA,CAAEC,IAAI,EAAEC,EAAE,EAAE;IACd,IAAI,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,MAAMF,EAAE,CAAC,CAAC,CAAC,CAACG,KAAK,CAACH,EAAE,CAAC;EAC5C;EAEA,MAAMC,IAAIA,CAAEF,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACK,MAAM,EACvBL,IAAI,GAAG,CAAC,GAAG,CAAC;IAEd,MAAMM,OAAO,CAACC,GAAG,CAACP,IAAI,CAACQ,GAAG,CAACC,GAAG,IAAI,IAAI,CAACC,OAAO,CAACD,GAAG,CAAC,CAAC,CAAC;EACvD;EAEA,MAAMC,OAAOA,CAAED,GAAG,EAAE;IAClB,MAAME,IAAI,GAAG;MAAE,GAAG,IAAI,CAACC,GAAG,CAACC,WAAW;MAAEC,YAAY,EAAE;IAAK,CAAC;IAC5D,MAAMC,IAAI,GAAG,MAAMzB,MAAM,CAAC0B,QAAQ,CAACP,GAAG,EAAEE,IAAI,CAAC;IAC7C,MAAMM,GAAG,GAAG,IAAI,CAACC,UAAU,CAACH,IAAI,CAAC;IACjC3B,GAAG,CAAC+B,KAAK,CAAC,MAAM,EAAE,KAAK,EAAEF,GAAG,CAAC;IAC7B,MAAM1B,OAAO,CAAC,IAAI,CAACqB,GAAG,EAAEK,GAAG,EAAE,GAAGF,IAAI,CAACnB,IAAI,0CAA0C,CAAC;EACtF;EAEAsB,UAAUA,CAAEH,IAAI,EAAE;IAChB,IAAIA,IAAI,CAACb,IAAI,EAAE;MACb,IAAI,OAAOa,IAAI,CAACb,IAAI,KAAK,QAAQ,EAC/B,OAAOa,IAAI,CAACb,IAAI;MAElB,IAAI,OAAOa,IAAI,CAACb,IAAI,KAAK,QAAQ,IAAIa,IAAI,CAACb,IAAI,CAACe,GAAG,EAChD,OAAOF,IAAI,CAACb,IAAI,CAACe,GAAG;MAEtB,IAAI,OAAOF,IAAI,CAACb,IAAI,KAAK,QAAQ,IAAIa,IAAI,CAACb,IAAI,CAACkB,KAAK,EAClD,OAAO,UAAUL,IAAI,CAACb,IAAI,CAACkB,KAAK,EAAE;IACtC;;IAEA;IACA,MAAMC,IAAI,GAAG7B,cAAc,CAACuB,IAAI,CAAC;IACjC,IAAIM,IAAI,EACN,OAAOA,IAAI,CAACnB,IAAI,CAAC,CAAC;;IAEpB;IACA,OAAO,iCAAiCa,IAAI,CAACnB,IAAI,EAAE;EACrD;AACF;AAEA0B,MAAM,CAACC,OAAO,GAAG7B,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
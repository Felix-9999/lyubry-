{"ast":null,"code":"const util = require('util');\nconst log = require('npmlog');\nconst pacote = require('pacote');\nconst libpack = require('libnpmpack');\nconst npa = require('npm-package-arg');\nconst path = require('path');\nconst {\n  getContents,\n  logTar\n} = require('./utils/tar.js');\nconst writeFile = util.promisify(require('fs').writeFile);\nconst BaseCommand = require('./base-command.js');\nclass Pack extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Create a tarball from a package';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'pack';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['dry-run', 'json', 'pack-destination', 'workspace', 'workspaces'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[[<@scope>/]<pkg>...]'];\n  }\n  exec(args, cb) {\n    this.pack(args).then(() => cb()).catch(cb);\n  }\n  execWorkspaces(args, filters, cb) {\n    this.packWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n  async pack(args) {\n    if (args.length === 0) args = ['.'];\n    const unicode = this.npm.config.get('unicode');\n    const dryRun = this.npm.config.get('dry-run');\n    const json = this.npm.config.get('json');\n\n    // Get the manifests and filenames first so we can bail early on manifest\n    // errors before making any tarballs\n    const manifests = [];\n    for (const arg of args) {\n      const spec = npa(arg);\n      const manifest = await pacote.manifest(spec, this.npm.flatOptions);\n      if (!manifest._id) throw new Error('Invalid package, must have name and version');\n      const filename = `${manifest.name}-${manifest.version}.tgz`.replace(/^@/, '').replace(/\\//, '-');\n      manifests.push({\n        arg,\n        filename,\n        manifest\n      });\n    }\n\n    // Load tarball names up for printing afterward to isolate from the\n    // noise generated during packing\n    const tarballs = [];\n    for (const {\n      arg,\n      filename,\n      manifest\n    } of manifests) {\n      const tarballData = await libpack(arg, this.npm.flatOptions);\n      const pkgContents = await getContents(manifest, tarballData);\n      const tarballFilename = path.resolve(this.npm.config.get('pack-destination'), filename);\n      if (!dryRun) await writeFile(tarballFilename, tarballData);\n      tarballs.push(pkgContents);\n    }\n    if (json) {\n      this.npm.output(JSON.stringify(tarballs, null, 2));\n      return;\n    }\n    for (const tar of tarballs) {\n      logTar(tar, {\n        log,\n        unicode\n      });\n      this.npm.output(tar.filename.replace(/^@/, '').replace(/\\//, '-'));\n    }\n  }\n  async packWorkspaces(args, filters) {\n    // If they either ask for nothing, or explicitly include '.' in the args,\n    // we effectively translate that into each workspace requested\n\n    const useWorkspaces = args.length === 0 || args.includes('.');\n    if (!useWorkspaces) {\n      this.npm.log.warn('Ignoring workspaces for specified package(s)');\n      return this.pack(args);\n    }\n    await this.setWorkspaces(filters);\n    return this.pack([...this.workspacePaths, ...args.filter(a => a !== '.')]);\n  }\n}\nmodule.exports = Pack;","map":{"version":3,"names":["util","require","log","pacote","libpack","npa","path","getContents","logTar","writeFile","promisify","BaseCommand","Pack","description","name","params","usage","exec","args","cb","pack","then","catch","execWorkspaces","filters","packWorkspaces","length","unicode","npm","config","get","dryRun","json","manifests","arg","spec","manifest","flatOptions","_id","Error","filename","version","replace","push","tarballs","tarballData","pkgContents","tarballFilename","resolve","output","JSON","stringify","tar","useWorkspaces","includes","warn","setWorkspaces","workspacePaths","filter","a","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/pack.js"],"sourcesContent":["const util = require('util')\nconst log = require('npmlog')\nconst pacote = require('pacote')\nconst libpack = require('libnpmpack')\nconst npa = require('npm-package-arg')\nconst path = require('path')\n\nconst { getContents, logTar } = require('./utils/tar.js')\n\nconst writeFile = util.promisify(require('fs').writeFile)\n\nconst BaseCommand = require('./base-command.js')\n\nclass Pack extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Create a tarball from a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'pack'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'dry-run',\n      'json',\n      'pack-destination',\n      'workspace',\n      'workspaces',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[[<@scope>/]<pkg>...]']\n  }\n\n  exec (args, cb) {\n    this.pack(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.packWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async pack (args) {\n    if (args.length === 0)\n      args = ['.']\n\n    const unicode = this.npm.config.get('unicode')\n    const dryRun = this.npm.config.get('dry-run')\n    const json = this.npm.config.get('json')\n\n    // Get the manifests and filenames first so we can bail early on manifest\n    // errors before making any tarballs\n    const manifests = []\n    for (const arg of args) {\n      const spec = npa(arg)\n      const manifest = await pacote.manifest(spec, this.npm.flatOptions)\n      if (!manifest._id)\n        throw new Error('Invalid package, must have name and version')\n\n      const filename = `${manifest.name}-${manifest.version}.tgz`\n        .replace(/^@/, '').replace(/\\//, '-')\n      manifests.push({ arg, filename, manifest })\n    }\n\n    // Load tarball names up for printing afterward to isolate from the\n    // noise generated during packing\n    const tarballs = []\n    for (const { arg, filename, manifest } of manifests) {\n      const tarballData = await libpack(arg, this.npm.flatOptions)\n      const pkgContents = await getContents(manifest, tarballData)\n      const tarballFilename = path.resolve(this.npm.config.get('pack-destination'), filename)\n\n      if (!dryRun)\n        await writeFile(tarballFilename, tarballData)\n\n      tarballs.push(pkgContents)\n    }\n\n    if (json) {\n      this.npm.output(JSON.stringify(tarballs, null, 2))\n      return\n    }\n\n    for (const tar of tarballs) {\n      logTar(tar, { log, unicode })\n      this.npm.output(tar.filename.replace(/^@/, '').replace(/\\//, '-'))\n    }\n  }\n\n  async packWorkspaces (args, filters) {\n    // If they either ask for nothing, or explicitly include '.' in the args,\n    // we effectively translate that into each workspace requested\n\n    const useWorkspaces = args.length === 0 || args.includes('.')\n\n    if (!useWorkspaces) {\n      this.npm.log.warn('Ignoring workspaces for specified package(s)')\n      return this.pack(args)\n    }\n\n    await this.setWorkspaces(filters)\n    return this.pack([...this.workspacePaths, ...args.filter(a => a !== '.')])\n  }\n}\nmodule.exports = Pack\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const PackageJson = require('@npmcli/package-json');\nconst BaseCommand = require('./base-command.js');\nconst Queryable = require('./utils/queryable.js');\nclass Pkg extends BaseCommand {\n  static get description() {\n    return 'Manages your package.json';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'pkg';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['set <key>=<value> [<key>=<value> ...]', 'get [<key> [<key> ...]]', 'delete <key> [<key> ...]'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['force', 'json', 'workspace', 'workspaces'];\n  }\n  exec(args, cb) {\n    this.prefix = this.npm.localPrefix;\n    this.pkg(args).then(() => cb()).catch(cb);\n  }\n  execWorkspaces(args, filters, cb) {\n    this.pkgWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n  async pkg(args) {\n    if (this.npm.config.get('global')) {\n      throw Object.assign(new Error(`There's no package.json file to manage on global mode`), {\n        code: 'EPKGGLOBAL'\n      });\n    }\n    const [cmd, ..._args] = args;\n    switch (cmd) {\n      case 'get':\n        return this.get(_args);\n      case 'set':\n        return this.set(_args);\n      case 'delete':\n        return this.delete(_args);\n      default:\n        throw this.usageError();\n    }\n  }\n  async pkgWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n    const result = {};\n    for (const [workspaceName, workspacePath] of this.workspaces.entries()) {\n      this.prefix = workspacePath;\n      result[workspaceName] = await this.pkg(args);\n    }\n    // when running in workspaces names, make sure to key by workspace\n    // name the results of each value retrieved in each ws\n    this.npm.output(JSON.stringify(result, null, 2));\n  }\n  async get(args) {\n    const pkgJson = await PackageJson.load(this.prefix);\n    const {\n      content\n    } = pkgJson;\n    let result = !args.length && content;\n    if (!result) {\n      const q = new Queryable(content);\n      result = q.query(args);\n\n      // in case there's only a single result from the query\n      // just prints that one element to stdout\n      if (Object.keys(result).length === 1) result = result[args];\n    }\n\n    // only outputs if not running with workspaces config,\n    // in case you're retrieving info for workspaces the pkgWorkspaces\n    // will handle the output to make sure it get keyed by ws name\n    if (!this.workspaces) this.npm.output(JSON.stringify(result, null, 2));\n    return result;\n  }\n  async set(args) {\n    const setError = () => Object.assign(new TypeError('npm pkg set expects a key=value pair of args.'), {\n      code: 'EPKGSET'\n    });\n    if (!args.length) throw setError();\n    const force = this.npm.config.get('force');\n    const json = this.npm.config.get('json');\n    const pkgJson = await PackageJson.load(this.prefix);\n    const q = new Queryable(pkgJson.content);\n    for (const arg of args) {\n      const [key, ...rest] = arg.split('=');\n      const value = rest.join('=');\n      if (!key || !value) throw setError();\n      q.set(key, json ? JSON.parse(value) : value, {\n        force\n      });\n    }\n    pkgJson.update(q.toJSON());\n    await pkgJson.save();\n  }\n  async delete(args) {\n    const setError = () => Object.assign(new TypeError('npm pkg delete expects key args.'), {\n      code: 'EPKGDELETE'\n    });\n    if (!args.length) throw setError();\n    const pkgJson = await PackageJson.load(this.prefix);\n    const q = new Queryable(pkgJson.content);\n    for (const key of args) {\n      if (!key) throw setError();\n      q.delete(key);\n    }\n    pkgJson.update(q.toJSON());\n    await pkgJson.save();\n  }\n}\nmodule.exports = Pkg;","map":{"version":3,"names":["PackageJson","require","BaseCommand","Queryable","Pkg","description","name","usage","params","exec","args","cb","prefix","npm","localPrefix","pkg","then","catch","execWorkspaces","filters","pkgWorkspaces","config","get","Object","assign","Error","code","cmd","_args","set","delete","usageError","setWorkspaces","result","workspaceName","workspacePath","workspaces","entries","output","JSON","stringify","pkgJson","load","content","length","q","query","keys","setError","TypeError","force","json","arg","key","rest","split","value","join","parse","update","toJSON","save","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/pkg.js"],"sourcesContent":["const PackageJson = require('@npmcli/package-json')\nconst BaseCommand = require('./base-command.js')\nconst Queryable = require('./utils/queryable.js')\n\nclass Pkg extends BaseCommand {\n  static get description () {\n    return 'Manages your package.json'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'pkg'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      'set <key>=<value> [<key>=<value> ...]',\n      'get [<key> [<key> ...]]',\n      'delete <key> [<key> ...]',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'force',\n      'json',\n      'workspace',\n      'workspaces',\n    ]\n  }\n\n  exec (args, cb) {\n    this.prefix = this.npm.localPrefix\n    this.pkg(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.pkgWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async pkg (args) {\n    if (this.npm.config.get('global')) {\n      throw Object.assign(\n        new Error(`There's no package.json file to manage on global mode`),\n        { code: 'EPKGGLOBAL' }\n      )\n    }\n\n    const [cmd, ..._args] = args\n    switch (cmd) {\n      case 'get':\n        return this.get(_args)\n      case 'set':\n        return this.set(_args)\n      case 'delete':\n        return this.delete(_args)\n      default:\n        throw this.usageError()\n    }\n  }\n\n  async pkgWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n    const result = {}\n    for (const [workspaceName, workspacePath] of this.workspaces.entries()) {\n      this.prefix = workspacePath\n      result[workspaceName] = await this.pkg(args)\n    }\n    // when running in workspaces names, make sure to key by workspace\n    // name the results of each value retrieved in each ws\n    this.npm.output(JSON.stringify(result, null, 2))\n  }\n\n  async get (args) {\n    const pkgJson = await PackageJson.load(this.prefix)\n\n    const { content } = pkgJson\n    let result = !args.length && content\n\n    if (!result) {\n      const q = new Queryable(content)\n      result = q.query(args)\n\n      // in case there's only a single result from the query\n      // just prints that one element to stdout\n      if (Object.keys(result).length === 1)\n        result = result[args]\n    }\n\n    // only outputs if not running with workspaces config,\n    // in case you're retrieving info for workspaces the pkgWorkspaces\n    // will handle the output to make sure it get keyed by ws name\n    if (!this.workspaces)\n      this.npm.output(JSON.stringify(result, null, 2))\n\n    return result\n  }\n\n  async set (args) {\n    const setError = () =>\n      Object.assign(\n        new TypeError('npm pkg set expects a key=value pair of args.'),\n        { code: 'EPKGSET' }\n      )\n\n    if (!args.length)\n      throw setError()\n\n    const force = this.npm.config.get('force')\n    const json = this.npm.config.get('json')\n    const pkgJson = await PackageJson.load(this.prefix)\n    const q = new Queryable(pkgJson.content)\n    for (const arg of args) {\n      const [key, ...rest] = arg.split('=')\n      const value = rest.join('=')\n      if (!key || !value)\n        throw setError()\n\n      q.set(key, json ? JSON.parse(value) : value, { force })\n    }\n\n    pkgJson.update(q.toJSON())\n    await pkgJson.save()\n  }\n\n  async delete (args) {\n    const setError = () =>\n      Object.assign(\n        new TypeError('npm pkg delete expects key args.'),\n        { code: 'EPKGDELETE' }\n      )\n\n    if (!args.length)\n      throw setError()\n\n    const pkgJson = await PackageJson.load(this.prefix)\n    const q = new Queryable(pkgJson.content)\n    for (const key of args) {\n      if (!key)\n        throw setError()\n\n      q.delete(key)\n    }\n\n    pkgJson.update(q.toJSON())\n    await pkgJson.save()\n  }\n}\n\nmodule.exports = Pkg\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
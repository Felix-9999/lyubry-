{"ast":null,"code":"const fs = require('fs');\nconst util = require('util');\nconst readdir = util.promisify(fs.readdir);\nconst {\n  resolve\n} = require('path');\nconst Arborist = require('@npmcli/arborist');\nconst npa = require('npm-package-arg');\nconst rpj = require('read-package-json-fast');\nconst semver = require('semver');\nconst reifyFinish = require('./utils/reify-finish.js');\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\nclass Link extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Symlink a package folder';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'link';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['(in package dir)', '[<@scope>/]<pkg>[@<version>]'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['save', 'save-exact', 'global', 'global-style', 'legacy-bundling', 'strict-peer-deps', 'package-lock', 'omit', 'ignore-scripts', 'audit', 'bin-links', 'fund', 'dry-run', ...super.params];\n  }\n  async completion(opts) {\n    const dir = this.npm.globalDir;\n    const files = await readdir(dir);\n    return files.filter(f => !/^[._-]/.test(f));\n  }\n  exec(args, cb) {\n    this.link(args).then(() => cb()).catch(cb);\n  }\n  async link(args) {\n    if (this.npm.config.get('global')) {\n      throw Object.assign(new Error('link should never be --global.\\n' + 'Please re-run this command with --local'), {\n        code: 'ELINKGLOBAL'\n      });\n    }\n\n    // link with no args: symlink the folder to the global location\n    // link with package arg: symlink the global to the local\n    args = args.filter(a => resolve(a) !== this.npm.prefix);\n    return args.length ? this.linkInstall(args) : this.linkPkg();\n  }\n  async linkInstall(args) {\n    // load current packages from the global space,\n    // and then add symlinks installs locally\n    const globalTop = resolve(this.npm.globalDir, '..');\n    const globalOpts = {\n      ...this.npm.flatOptions,\n      path: globalTop,\n      log: this.npm.log,\n      global: true,\n      prune: false\n    };\n    const globalArb = new Arborist(globalOpts);\n\n    // get only current top-level packages from the global space\n    const globals = await globalArb.loadActual({\n      filter: (node, kid) => !node.isRoot || args.some(a => npa(a).name === kid)\n    });\n\n    // any extra arg that is missing from the current\n    // global space should be reified there first\n    const missing = this.missingArgsFromTree(globals, args);\n    if (missing.length) {\n      await globalArb.reify({\n        ...globalOpts,\n        add: missing\n      });\n    }\n\n    // get a list of module names that should be linked in the local prefix\n    const names = [];\n    for (const a of args) {\n      const arg = npa(a);\n      names.push(arg.type === 'directory' ? (await rpj(resolve(arg.fetchSpec, 'package.json'))).name : arg.name);\n    }\n\n    // npm link should not save=true by default unless you're\n    // using any of --save-dev or other types\n    const save = Boolean(this.npm.config.find('save') !== 'default' || this.npm.config.get('save-optional') || this.npm.config.get('save-peer') || this.npm.config.get('save-dev') || this.npm.config.get('save-prod'));\n\n    // create a new arborist instance for the local prefix and\n    // reify all the pending names as symlinks there\n    const localArb = new Arborist({\n      ...this.npm.flatOptions,\n      prune: false,\n      log: this.npm.log,\n      path: this.npm.prefix,\n      save\n    });\n    await localArb.reify({\n      ...this.npm.flatOptions,\n      prune: false,\n      path: this.npm.prefix,\n      log: this.npm.log,\n      add: names.map(l => `file:${resolve(globalTop, 'node_modules', l)}`),\n      save,\n      workspaces: this.workspaceNames\n    });\n    await reifyFinish(this.npm, localArb);\n  }\n  async linkPkg() {\n    const wsp = this.workspacePaths;\n    const paths = wsp && wsp.length ? wsp : [this.npm.prefix];\n    const add = paths.map(path => `file:${path}`);\n    const globalTop = resolve(this.npm.globalDir, '..');\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: globalTop,\n      log: this.npm.log,\n      global: true\n    });\n    await arb.reify({\n      add,\n      log: this.npm.log\n    });\n    await reifyFinish(this.npm, arb);\n  }\n\n  // Returns a list of items that can't be fulfilled by\n  // things found in the current arborist inventory\n  missingArgsFromTree(tree, args) {\n    if (tree.isLink) return this.missingArgsFromTree(tree.target, args);\n    const foundNodes = [];\n    const missing = args.filter(a => {\n      const arg = npa(a);\n      const nodes = tree.children.values();\n      const argFound = [...nodes].every(node => {\n        // TODO: write tests for unmatching version specs, this is hard to test\n        // atm but should be simple once we have a mocked registry again\n        if (arg.name !== node.name /* istanbul ignore next */ || arg.version && !semver.satisfies(node.version, arg.version)) {\n          foundNodes.push(node);\n          return true;\n        }\n      });\n      return argFound;\n    });\n\n    // remote nodes from the loaded tree in order\n    // to avoid dropping them later when reifying\n    for (const node of foundNodes) node.parent = null;\n    return missing;\n  }\n}\nmodule.exports = Link;","map":{"version":3,"names":["fs","require","util","readdir","promisify","resolve","Arborist","npa","rpj","semver","reifyFinish","ArboristWorkspaceCmd","Link","description","name","usage","params","completion","opts","dir","npm","globalDir","files","filter","f","test","exec","args","cb","link","then","catch","config","get","Object","assign","Error","code","a","prefix","length","linkInstall","linkPkg","globalTop","globalOpts","flatOptions","path","log","global","prune","globalArb","globals","loadActual","node","kid","isRoot","some","missing","missingArgsFromTree","reify","add","names","arg","push","type","fetchSpec","save","Boolean","find","localArb","map","l","workspaces","workspaceNames","wsp","workspacePaths","paths","arb","tree","isLink","target","foundNodes","nodes","children","values","argFound","every","version","satisfies","parent","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/link.js"],"sourcesContent":["const fs = require('fs')\nconst util = require('util')\nconst readdir = util.promisify(fs.readdir)\nconst { resolve } = require('path')\n\nconst Arborist = require('@npmcli/arborist')\nconst npa = require('npm-package-arg')\nconst rpj = require('read-package-json-fast')\nconst semver = require('semver')\n\nconst reifyFinish = require('./utils/reify-finish.js')\n\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\nclass Link extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Symlink a package folder'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'link'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      '(in package dir)',\n      '[<@scope>/]<pkg>[@<version>]',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'save',\n      'save-exact',\n      'global',\n      'global-style',\n      'legacy-bundling',\n      'strict-peer-deps',\n      'package-lock',\n      'omit',\n      'ignore-scripts',\n      'audit',\n      'bin-links',\n      'fund',\n      'dry-run',\n      ...super.params,\n    ]\n  }\n\n  async completion (opts) {\n    const dir = this.npm.globalDir\n    const files = await readdir(dir)\n    return files.filter(f => !/^[._-]/.test(f))\n  }\n\n  exec (args, cb) {\n    this.link(args).then(() => cb()).catch(cb)\n  }\n\n  async link (args) {\n    if (this.npm.config.get('global')) {\n      throw Object.assign(\n        new Error(\n          'link should never be --global.\\n' +\n          'Please re-run this command with --local'\n        ),\n        { code: 'ELINKGLOBAL' }\n      )\n    }\n\n    // link with no args: symlink the folder to the global location\n    // link with package arg: symlink the global to the local\n    args = args.filter(a => resolve(a) !== this.npm.prefix)\n    return args.length\n      ? this.linkInstall(args)\n      : this.linkPkg()\n  }\n\n  async linkInstall (args) {\n    // load current packages from the global space,\n    // and then add symlinks installs locally\n    const globalTop = resolve(this.npm.globalDir, '..')\n    const globalOpts = {\n      ...this.npm.flatOptions,\n      path: globalTop,\n      log: this.npm.log,\n      global: true,\n      prune: false,\n    }\n    const globalArb = new Arborist(globalOpts)\n\n    // get only current top-level packages from the global space\n    const globals = await globalArb.loadActual({\n      filter: (node, kid) =>\n        !node.isRoot || args.some(a => npa(a).name === kid),\n    })\n\n    // any extra arg that is missing from the current\n    // global space should be reified there first\n    const missing = this.missingArgsFromTree(globals, args)\n    if (missing.length) {\n      await globalArb.reify({\n        ...globalOpts,\n        add: missing,\n      })\n    }\n\n    // get a list of module names that should be linked in the local prefix\n    const names = []\n    for (const a of args) {\n      const arg = npa(a)\n      names.push(\n        arg.type === 'directory'\n          ? (await rpj(resolve(arg.fetchSpec, 'package.json'))).name\n          : arg.name\n      )\n    }\n\n    // npm link should not save=true by default unless you're\n    // using any of --save-dev or other types\n    const save =\n      Boolean(\n        this.npm.config.find('save') !== 'default' ||\n        this.npm.config.get('save-optional') ||\n        this.npm.config.get('save-peer') ||\n        this.npm.config.get('save-dev') ||\n        this.npm.config.get('save-prod')\n      )\n\n    // create a new arborist instance for the local prefix and\n    // reify all the pending names as symlinks there\n    const localArb = new Arborist({\n      ...this.npm.flatOptions,\n      prune: false,\n      log: this.npm.log,\n      path: this.npm.prefix,\n      save,\n    })\n    await localArb.reify({\n      ...this.npm.flatOptions,\n      prune: false,\n      path: this.npm.prefix,\n      log: this.npm.log,\n      add: names.map(l => `file:${resolve(globalTop, 'node_modules', l)}`),\n      save,\n      workspaces: this.workspaceNames,\n    })\n\n    await reifyFinish(this.npm, localArb)\n  }\n\n  async linkPkg () {\n    const wsp = this.workspacePaths\n    const paths = wsp && wsp.length ? wsp : [this.npm.prefix]\n    const add = paths.map(path => `file:${path}`)\n    const globalTop = resolve(this.npm.globalDir, '..')\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: globalTop,\n      log: this.npm.log,\n      global: true,\n    })\n    await arb.reify({\n      add,\n      log: this.npm.log,\n    })\n    await reifyFinish(this.npm, arb)\n  }\n\n  // Returns a list of items that can't be fulfilled by\n  // things found in the current arborist inventory\n  missingArgsFromTree (tree, args) {\n    if (tree.isLink)\n      return this.missingArgsFromTree(tree.target, args)\n\n    const foundNodes = []\n    const missing = args.filter(a => {\n      const arg = npa(a)\n      const nodes = tree.children.values()\n      const argFound = [...nodes].every(node => {\n        // TODO: write tests for unmatching version specs, this is hard to test\n        // atm but should be simple once we have a mocked registry again\n        if (arg.name !== node.name /* istanbul ignore next */ || (\n          arg.version &&\n          !semver.satisfies(node.version, arg.version)\n        )) {\n          foundNodes.push(node)\n          return true\n        }\n      })\n      return argFound\n    })\n\n    // remote nodes from the loaded tree in order\n    // to avoid dropping them later when reifying\n    for (const node of foundNodes)\n      node.parent = null\n\n    return missing\n  }\n}\nmodule.exports = Link\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const log = require('npmlog');\nconst pingUtil = require('./utils/ping.js');\nconst BaseCommand = require('./base-command.js');\nclass Ping extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Ping npm registry';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['registry'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'ping';\n  }\n  exec(args, cb) {\n    this.ping(args).then(() => cb()).catch(cb);\n  }\n  async ping(args) {\n    log.notice('PING', this.npm.config.get('registry'));\n    const start = Date.now();\n    const details = await pingUtil(this.npm.flatOptions);\n    const time = Date.now() - start;\n    log.notice('PONG', `${time}ms`);\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify({\n        registry: this.npm.config.get('registry'),\n        time,\n        details\n      }, null, 2));\n    } else if (Object.keys(details).length) log.notice('PONG', `${JSON.stringify(details, null, 2)}`);\n  }\n}\nmodule.exports = Ping;","map":{"version":3,"names":["log","require","pingUtil","BaseCommand","Ping","description","params","name","exec","args","cb","ping","then","catch","notice","npm","config","get","start","Date","now","details","flatOptions","time","output","JSON","stringify","registry","Object","keys","length","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/ping.js"],"sourcesContent":["const log = require('npmlog')\nconst pingUtil = require('./utils/ping.js')\nconst BaseCommand = require('./base-command.js')\n\nclass Ping extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Ping npm registry'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['registry']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'ping'\n  }\n\n  exec (args, cb) {\n    this.ping(args).then(() => cb()).catch(cb)\n  }\n\n  async ping (args) {\n    log.notice('PING', this.npm.config.get('registry'))\n    const start = Date.now()\n    const details = await pingUtil(this.npm.flatOptions)\n    const time = Date.now() - start\n    log.notice('PONG', `${time}ms`)\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify({\n        registry: this.npm.config.get('registry'),\n        time,\n        details,\n      }, null, 2))\n    } else if (Object.keys(details).length)\n      log.notice('PONG', `${JSON.stringify(details, null, 2)}`)\n  }\n}\nmodule.exports = Ping\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC7B,MAAMC,QAAQ,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAME,WAAW,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAEhD,MAAMG,IAAI,SAASD,WAAW,CAAC;EAC7B;EACA,WAAWE,WAAWA,CAAA,EAAI;IACxB,OAAO,mBAAmB;EAC5B;;EAEA;EACA,WAAWC,MAAMA,CAAA,EAAI;IACnB,OAAO,CAAC,UAAU,CAAC;EACrB;;EAEA;EACA,WAAWC,IAAIA,CAAA,EAAI;IACjB,OAAO,MAAM;EACf;EAEAC,IAAIA,CAAEC,IAAI,EAAEC,EAAE,EAAE;IACd,IAAI,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,MAAMF,EAAE,CAAC,CAAC,CAAC,CAACG,KAAK,CAACH,EAAE,CAAC;EAC5C;EAEA,MAAMC,IAAIA,CAAEF,IAAI,EAAE;IAChBT,GAAG,CAACc,MAAM,CAAC,MAAM,EAAE,IAAI,CAACC,GAAG,CAACC,MAAM,CAACC,GAAG,CAAC,UAAU,CAAC,CAAC;IACnD,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACxB,MAAMC,OAAO,GAAG,MAAMnB,QAAQ,CAAC,IAAI,CAACa,GAAG,CAACO,WAAW,CAAC;IACpD,MAAMC,IAAI,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK;IAC/BlB,GAAG,CAACc,MAAM,CAAC,MAAM,EAAE,GAAGS,IAAI,IAAI,CAAC;IAC/B,IAAI,IAAI,CAACR,GAAG,CAACC,MAAM,CAACC,GAAG,CAAC,MAAM,CAAC,EAAE;MAC/B,IAAI,CAACF,GAAG,CAACS,MAAM,CAACC,IAAI,CAACC,SAAS,CAAC;QAC7BC,QAAQ,EAAE,IAAI,CAACZ,GAAG,CAACC,MAAM,CAACC,GAAG,CAAC,UAAU,CAAC;QACzCM,IAAI;QACJF;MACF,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACd,CAAC,MAAM,IAAIO,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,CAACS,MAAM,EACpC9B,GAAG,CAACc,MAAM,CAAC,MAAM,EAAE,GAAGW,IAAI,CAACC,SAAS,CAACL,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;EAC7D;AACF;AACAU,MAAM,CAACC,OAAO,GAAG5B,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
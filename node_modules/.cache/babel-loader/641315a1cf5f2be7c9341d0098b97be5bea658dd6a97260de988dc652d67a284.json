{"ast":null,"code":"const log = require('npmlog');\nconst profile = require('npm-profile');\nconst openUrl = require('../utils/open-url.js');\nconst read = require('../utils/read-user-info.js');\nconst loginPrompter = async creds => {\n  const opts = {\n    log: log\n  };\n  creds.username = await read.username('Username:', creds.username, opts);\n  creds.password = await read.password('Password:', creds.password);\n  creds.email = await read.email('Email: (this IS public) ', creds.email, opts);\n  return creds;\n};\nconst login = async (npm, opts) => {\n  let res;\n  const requestOTP = async () => {\n    const otp = await read.otp('Enter one-time password from your authenticator app: ');\n    return profile.loginCouch(opts.creds.username, opts.creds.password, {\n      ...opts,\n      otp\n    });\n  };\n  const addNewUser = async () => {\n    let newUser;\n    try {\n      newUser = await profile.adduserCouch(opts.creds.username, opts.creds.email, opts.creds.password, opts);\n    } catch (err) {\n      if (err.code === 'EOTP') newUser = await requestOTP();else throw err;\n    }\n    return newUser;\n  };\n  const openerPromise = url => openUrl(npm, url, 'to complete your login please visit');\n  try {\n    res = await profile.login(openerPromise, loginPrompter, opts);\n  } catch (err) {\n    const needsMoreInfo = !(opts && opts.creds && opts.creds.username && opts.creds.password && opts.creds.email);\n    if (err.code === 'EOTP') res = await requestOTP();else if (needsMoreInfo) throw err;else {\n      // TODO: maybe this needs to check for err.code === 'E400' instead?\n      res = await addNewUser();\n    }\n  }\n  const newCreds = {};\n  if (res && res.token) newCreds.token = res.token;else {\n    newCreds.username = opts.creds.username;\n    newCreds.password = opts.creds.password;\n    newCreds.email = opts.creds.email;\n    newCreds.alwaysAuth = opts.creds.alwaysAuth;\n  }\n  const usermsg = opts.creds.username ? ` user ${opts.creds.username}` : '';\n  const scopeMessage = opts.scope ? ` to scope ${opts.scope}` : '';\n  const userout = opts.creds.username ? ` as ${opts.creds.username}` : '';\n  const message = `Logged in${userout}${scopeMessage} on ${opts.registry}.`;\n  log.info('login', `Authorized${usermsg}`);\n  return {\n    message,\n    newCreds\n  };\n};\nmodule.exports = login;","map":{"version":3,"names":["log","require","profile","openUrl","read","loginPrompter","creds","opts","username","password","email","login","npm","res","requestOTP","otp","loginCouch","addNewUser","newUser","adduserCouch","err","code","openerPromise","url","needsMoreInfo","newCreds","token","alwaysAuth","usermsg","scopeMessage","scope","userout","message","registry","info","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/auth/legacy.js"],"sourcesContent":["const log = require('npmlog')\nconst profile = require('npm-profile')\n\nconst openUrl = require('../utils/open-url.js')\nconst read = require('../utils/read-user-info.js')\n\nconst loginPrompter = async (creds) => {\n  const opts = { log: log }\n\n  creds.username = await read.username('Username:', creds.username, opts)\n  creds.password = await read.password('Password:', creds.password)\n  creds.email = await read.email('Email: (this IS public) ', creds.email, opts)\n\n  return creds\n}\n\nconst login = async (npm, opts) => {\n  let res\n\n  const requestOTP = async () => {\n    const otp = await read.otp(\n      'Enter one-time password from your authenticator app: '\n    )\n\n    return profile.loginCouch(\n      opts.creds.username,\n      opts.creds.password,\n      { ...opts, otp }\n    )\n  }\n\n  const addNewUser = async () => {\n    let newUser\n\n    try {\n      newUser = await profile.adduserCouch(\n        opts.creds.username,\n        opts.creds.email,\n        opts.creds.password,\n        opts\n      )\n    } catch (err) {\n      if (err.code === 'EOTP')\n        newUser = await requestOTP()\n      else\n        throw err\n    }\n\n    return newUser\n  }\n\n  const openerPromise = (url) => openUrl(npm, url, 'to complete your login please visit')\n  try {\n    res = await profile.login(openerPromise, loginPrompter, opts)\n  } catch (err) {\n    const needsMoreInfo = !(opts &&\n      opts.creds &&\n      opts.creds.username &&\n      opts.creds.password &&\n      opts.creds.email)\n    if (err.code === 'EOTP')\n      res = await requestOTP()\n    else if (needsMoreInfo)\n      throw err\n    else {\n      // TODO: maybe this needs to check for err.code === 'E400' instead?\n      res = await addNewUser()\n    }\n  }\n\n  const newCreds = {}\n  if (res && res.token)\n    newCreds.token = res.token\n  else {\n    newCreds.username = opts.creds.username\n    newCreds.password = opts.creds.password\n    newCreds.email = opts.creds.email\n    newCreds.alwaysAuth = opts.creds.alwaysAuth\n  }\n\n  const usermsg = opts.creds.username ? ` user ${opts.creds.username}` : ''\n  const scopeMessage = opts.scope ? ` to scope ${opts.scope}` : ''\n  const userout = opts.creds.username ? ` as ${opts.creds.username}` : ''\n  const message = `Logged in${userout}${scopeMessage} on ${opts.registry}.`\n\n  log.info('login', `Authorized${usermsg}`)\n\n  return {\n    message,\n    newCreds,\n  }\n}\n\nmodule.exports = login\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"// XXX: To date, npm Enterprise Legacy is the only system that ever\n// implemented support for this type of login.  A better way to do\n// SSO is to use the WebLogin type of login supported by the npm-login\n// module.  This more forward-looking login style is, ironically,\n// supported by the '--auth-type=legacy' type of login.\n// When and if npm Enterprise Legacy is no longer supported by the npm\n// CLI, we can remove this, and fold the lib/auth/legacy.js back into\n// lib/adduser.js\n\nconst log = require('npmlog');\nconst profile = require('npm-profile');\nconst npmFetch = require('npm-registry-fetch');\nconst openUrl = require('../utils/open-url.js');\nconst otplease = require('../utils/otplease.js');\nconst pollForSession = ({\n  registry,\n  token,\n  opts\n}) => {\n  log.info('adduser', 'Polling for validated SSO session');\n  return npmFetch.json('/-/whoami', {\n    ...opts,\n    registry,\n    forceAuth: {\n      token\n    }\n  }).then(({\n    username\n  }) => username, err => {\n    if (err.code === 'E401') {\n      return sleep(opts.ssoPollFrequency).then(() => {\n        return pollForSession({\n          registry,\n          token,\n          opts\n        });\n      });\n    } else throw err;\n  });\n};\nfunction sleep(time) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\nconst login = async (npm, {\n  creds,\n  registry,\n  scope\n}) => {\n  log.warn('deprecated', 'SSO --auth-type is deprecated');\n  const opts = {\n    ...npm.flatOptions,\n    creds,\n    registry,\n    scope\n  };\n  const {\n    ssoType\n  } = opts;\n  if (!ssoType) throw new Error('Missing option: sso-type');\n\n  // We're reusing the legacy login endpoint, so we need some dummy\n  // stuff here to pass validation. They're never used.\n  const auth = {\n    username: 'npm_' + ssoType + '_auth_dummy_user',\n    password: 'placeholder',\n    email: 'support@npmjs.com',\n    authType: ssoType\n  };\n  const {\n    token,\n    sso\n  } = await otplease(opts, opts => profile.loginCouch(auth.username, auth.password, opts));\n  if (!token) throw new Error('no SSO token returned');\n  if (!sso) throw new Error('no SSO URL returned by services');\n  await openUrl(npm, sso, 'to complete your login please visit');\n  const username = await pollForSession({\n    registry,\n    token,\n    opts\n  });\n  log.info('adduser', `Authorized user ${username}`);\n  const scopeMessage = scope ? ' to scope ' + scope : '';\n  const message = `Logged in as ${username}${scopeMessage} on ${registry}.`;\n  return {\n    message,\n    newCreds: {\n      token\n    }\n  };\n};\nmodule.exports = login;","map":{"version":3,"names":["log","require","profile","npmFetch","openUrl","otplease","pollForSession","registry","token","opts","info","json","forceAuth","then","username","err","code","sleep","ssoPollFrequency","time","Promise","resolve","setTimeout","login","npm","creds","scope","warn","flatOptions","ssoType","Error","auth","password","email","authType","sso","loginCouch","scopeMessage","message","newCreds","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/auth/sso.js"],"sourcesContent":["// XXX: To date, npm Enterprise Legacy is the only system that ever\n// implemented support for this type of login.  A better way to do\n// SSO is to use the WebLogin type of login supported by the npm-login\n// module.  This more forward-looking login style is, ironically,\n// supported by the '--auth-type=legacy' type of login.\n// When and if npm Enterprise Legacy is no longer supported by the npm\n// CLI, we can remove this, and fold the lib/auth/legacy.js back into\n// lib/adduser.js\n\nconst log = require('npmlog')\nconst profile = require('npm-profile')\nconst npmFetch = require('npm-registry-fetch')\n\nconst openUrl = require('../utils/open-url.js')\nconst otplease = require('../utils/otplease.js')\n\nconst pollForSession = ({ registry, token, opts }) => {\n  log.info('adduser', 'Polling for validated SSO session')\n  return npmFetch.json(\n    '/-/whoami', { ...opts, registry, forceAuth: { token } }\n  ).then(\n    ({ username }) => username,\n    err => {\n      if (err.code === 'E401') {\n        return sleep(opts.ssoPollFrequency).then(() => {\n          return pollForSession({ registry, token, opts })\n        })\n      } else\n        throw err\n    }\n  )\n}\n\nfunction sleep (time) {\n  return new Promise((resolve) => setTimeout(resolve, time))\n}\n\nconst login = async (npm, { creds, registry, scope }) => {\n  log.warn('deprecated', 'SSO --auth-type is deprecated')\n\n  const opts = { ...npm.flatOptions, creds, registry, scope }\n  const { ssoType } = opts\n\n  if (!ssoType)\n    throw new Error('Missing option: sso-type')\n\n  // We're reusing the legacy login endpoint, so we need some dummy\n  // stuff here to pass validation. They're never used.\n  const auth = {\n    username: 'npm_' + ssoType + '_auth_dummy_user',\n    password: 'placeholder',\n    email: 'support@npmjs.com',\n    authType: ssoType,\n  }\n\n  const { token, sso } = await otplease(opts,\n    opts => profile.loginCouch(auth.username, auth.password, opts)\n  )\n\n  if (!token)\n    throw new Error('no SSO token returned')\n  if (!sso)\n    throw new Error('no SSO URL returned by services')\n\n  await openUrl(npm, sso, 'to complete your login please visit')\n\n  const username = await pollForSession({ registry, token, opts })\n\n  log.info('adduser', `Authorized user ${username}`)\n\n  const scopeMessage = scope ? ' to scope ' + scope : ''\n  const message = `Logged in as ${username}${scopeMessage} on ${registry}.`\n\n  return {\n    message,\n    newCreds: { token },\n  }\n}\n\nmodule.exports = login\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
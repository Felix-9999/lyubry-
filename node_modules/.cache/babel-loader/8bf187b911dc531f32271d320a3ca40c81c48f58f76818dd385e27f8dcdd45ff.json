{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst log = require('npmlog');\nconst semver = require('semver');\nconst cp = require('child_process');\nconst extend = require('util')._extend; // eslint-disable-line\nconst win = process.platform === 'win32';\nconst logWithPrefix = require('./util').logWithPrefix;\nfunction PythonFinder(configPython, callback) {\n  this.callback = callback;\n  this.configPython = configPython;\n  this.errorLog = [];\n}\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '2.7.x || >=3.5.0',\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: [path.join(process.env.SystemDrive || 'C:', 'Python37', 'python.exe'), path.join(process.env.SystemDrive || 'C:', 'Python27', 'python.exe')],\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog(message) {\n    this.log.verbose(message);\n    this.errorLog.push(message);\n  },\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython() {\n    const SKIP = 0;\n    const FAIL = 1;\n    var toCheck = getChecks.apply(this);\n    function getChecks() {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog('checking Python explicitly set from NODE_GYP_FORCE_PYTHON');\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' + `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`);\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }];\n      }\n      var checks = [{\n        before: () => {\n          if (!this.configPython) {\n            this.addLog('Python is not set from command line or npm configuration');\n            return SKIP;\n          }\n          this.addLog('checking Python explicitly set from command line or ' + 'npm configuration');\n          this.addLog('- \"--python=\" or \"npm config get python\" is ' + `\"${this.configPython}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.configPython\n      }, {\n        before: () => {\n          if (!this.env.PYTHON) {\n            this.addLog('Python is not set from environment variable ' + 'PYTHON');\n            return SKIP;\n          }\n          this.addLog('checking Python explicitly set from environment ' + 'variable PYTHON');\n          this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.env.PYTHON\n      }, {\n        before: () => {\n          this.addLog('checking if \"python3\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python3'\n      }, {\n        before: () => {\n          this.addLog('checking if \"python\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python'\n      }, {\n        before: () => {\n          this.addLog('checking if \"python2\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python2'\n      }];\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i];\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' + `${location}`);\n            },\n            check: this.checkExecPath,\n            arg: location\n          });\n        }\n        checks.push({\n          before: () => {\n            this.addLog('checking if the py launcher can be used to find Python');\n          },\n          check: this.checkPyLauncher\n        });\n      }\n      return checks;\n    }\n    function runChecks(err) {\n      this.log.silly('runChecks: err = %j', err && err.stack || err);\n      const check = toCheck.shift();\n      if (!check) {\n        return this.fail();\n      }\n      const before = check.before.apply(this);\n      if (before === SKIP) {\n        return runChecks.apply(this);\n      }\n      if (before === FAIL) {\n        return this.fail();\n      }\n      const args = [runChecks.bind(this)];\n      if (check.arg) {\n        args.unshift(check.arg);\n      }\n      check.check.apply(this, args);\n    }\n    runChecks.apply(this);\n  },\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand(command, errorCallback) {\n    var exec = command;\n    var args = this.argsExecutable;\n    var shell = false;\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`;\n      args = args.map(a => `\"${a}\"`);\n      shell = true;\n    }\n    this.log.verbose(`- executing \"${command}\" to get executable path`);\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  checkPyLauncher: function checkPyLauncher(errorCallback) {\n    this.log.verbose(`- executing \"${this.pyLauncher}\" to get Python executable path`);\n    this.run(this.pyLauncher, this.argsExecutable, false, function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n      if (err) {\n        this.addLog(`- \"${this.pyLauncher}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath(execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`);\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`);\n        return errorCallback(err);\n      }\n      this.addLog(`- version is \"${version}\"`);\n      const range = new semver.Range(this.semverRange);\n      var valid = false;\n      try {\n        valid = range.test(version);\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack);\n        this.addLog(`- \"${execPath}\" does not have a valid version`);\n        this.addLog('- is it a Python executable?');\n        return errorCallback(err);\n      }\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`);\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED');\n        return errorCallback(new Error(`Found unsupported Python version ${version}`));\n      }\n      this.succeed(execPath, version);\n    }.bind(this));\n  },\n  // Run an executable or shell command, trimming the output.\n  run: function run(exec, args, shell, callback) {\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    const opts = {\n      env: env,\n      shell: shell\n    };\n    this.log.silly('execFile: exec = %j', exec);\n    this.log.silly('execFile: args = %j', args);\n    this.log.silly('execFile: opts = %j', opts);\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this));\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack);\n      return callback(err);\n    }\n    function execFileCallback(err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', err && err.stack || err);\n      this.log.silly('execFile result: stdout = %j', stdout);\n      this.log.silly('execFile result: stderr = %j', stderr);\n      if (err) {\n        return callback(err);\n      }\n      const execPath = stdout.trim();\n      callback(null, execPath);\n    }\n  },\n  succeed: function succeed(execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`);\n    process.nextTick(this.callback.bind(null, null, execPath));\n  },\n  fail: function fail() {\n    const errorLog = this.errorLog.join('\\n');\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe' : '/path/to/pythonexecutable';\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n    const info = ['**********************************************************', 'You need to install the latest version of Python.', 'Node-gyp should be able to find and use Python. If not,', 'you can try one of the following options:', `- Use the switch --python=\"${pathExample}\"`, '  (accepted by both node-gyp and npm)', '- Set the environment variable PYTHON', '- Set the npm configuration variable python:', `  npm config set python \"${pathExample}\"`, 'For more information consult the documentation at:', 'https://github.com/nodejs/node-gyp#installation', '**********************************************************'].join('\\n');\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`);\n    process.nextTick(this.callback.bind(null, new Error('Could not find any Python installation to use')));\n  }\n};\nfunction findPython(configPython, callback) {\n  var finder = new PythonFinder(configPython, callback);\n  finder.findPython();\n}\nmodule.exports = findPython;\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n};","map":{"version":3,"names":["path","require","log","semver","cp","extend","_extend","win","process","platform","logWithPrefix","PythonFinder","configPython","callback","errorLog","prototype","argsExecutable","argsVersion","semverRange","execFile","env","pyLauncher","winDefaultLocations","join","SystemDrive","addLog","message","verbose","push","findPython","SKIP","FAIL","toCheck","getChecks","apply","NODE_GYP_FORCE_PYTHON","before","check","checkCommand","arg","checks","PYTHON","i","length","location","checkExecPath","checkPyLauncher","runChecks","err","silly","stack","shift","fail","args","bind","unshift","command","errorCallback","exec","shell","map","a","run","execPath","version","range","Range","valid","test","Error","succeed","TERM","opts","execFileCallback","stdout","stderr","trim","info","nextTick","pathExample","error","finder","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/node-gyp/lib/find-python.js"],"sourcesContent":["'use strict'\n\nconst path = require('path')\nconst log = require('npmlog')\nconst semver = require('semver')\nconst cp = require('child_process')\nconst extend = require('util')._extend // eslint-disable-line\nconst win = process.platform === 'win32'\nconst logWithPrefix = require('./util').logWithPrefix\n\nfunction PythonFinder (configPython, callback) {\n  this.callback = callback\n  this.configPython = configPython\n  this.errorLog = []\n}\n\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '2.7.x || >=3.5.0',\n\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: [\n    path.join(process.env.SystemDrive || 'C:', 'Python37', 'python.exe'),\n    path.join(process.env.SystemDrive || 'C:', 'Python27', 'python.exe')\n  ],\n\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog (message) {\n    this.log.verbose(message)\n    this.errorLog.push(message)\n  },\n\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython () {\n    const SKIP = 0; const FAIL = 1\n    var toCheck = getChecks.apply(this)\n\n    function getChecks () {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog(\n              'checking Python explicitly set from NODE_GYP_FORCE_PYTHON')\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' +\n              `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }]\n      }\n\n      var checks = [\n        {\n          before: () => {\n            if (!this.configPython) {\n              this.addLog(\n                'Python is not set from command line or npm configuration')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from command line or ' +\n              'npm configuration')\n            this.addLog('- \"--python=\" or \"npm config get python\" is ' +\n              `\"${this.configPython}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.configPython\n        },\n        {\n          before: () => {\n            if (!this.env.PYTHON) {\n              this.addLog('Python is not set from environment variable ' +\n                'PYTHON')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from environment ' +\n              'variable PYTHON')\n            this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.PYTHON\n        },\n        {\n          before: () => { this.addLog('checking if \"python3\" can be used') },\n          check: this.checkCommand,\n          arg: 'python3'\n        },\n        {\n          before: () => { this.addLog('checking if \"python\" can be used') },\n          check: this.checkCommand,\n          arg: 'python'\n        },\n        {\n          before: () => { this.addLog('checking if \"python2\" can be used') },\n          check: this.checkCommand,\n          arg: 'python2'\n        }\n      ]\n\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i]\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' +\n                `${location}`)\n            },\n            check: this.checkExecPath,\n            arg: location\n          })\n        }\n        checks.push({\n          before: () => {\n            this.addLog(\n              'checking if the py launcher can be used to find Python')\n          },\n          check: this.checkPyLauncher\n        })\n      }\n\n      return checks\n    }\n\n    function runChecks (err) {\n      this.log.silly('runChecks: err = %j', (err && err.stack) || err)\n\n      const check = toCheck.shift()\n      if (!check) {\n        return this.fail()\n      }\n\n      const before = check.before.apply(this)\n      if (before === SKIP) {\n        return runChecks.apply(this)\n      }\n      if (before === FAIL) {\n        return this.fail()\n      }\n\n      const args = [runChecks.bind(this)]\n      if (check.arg) {\n        args.unshift(check.arg)\n      }\n      check.check.apply(this, args)\n    }\n\n    runChecks.apply(this)\n  },\n\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand (command, errorCallback) {\n    var exec = command\n    var args = this.argsExecutable\n    var shell = false\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`\n      args = args.map(a => `\"${a}\"`)\n      shell = true\n    }\n\n    this.log.verbose(`- executing \"${command}\" to get executable path`)\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`)\n        return errorCallback(err)\n      }\n      this.addLog(`- executable path is \"${execPath}\"`)\n      this.checkExecPath(execPath, errorCallback)\n    }.bind(this))\n  },\n\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  checkPyLauncher: function checkPyLauncher (errorCallback) {\n    this.log.verbose(\n      `- executing \"${this.pyLauncher}\" to get Python executable path`)\n    this.run(this.pyLauncher, this.argsExecutable, false,\n      function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n        if (err) {\n          this.addLog(\n            `- \"${this.pyLauncher}\" is not in PATH or produced an error`)\n          return errorCallback(err)\n        }\n        this.addLog(`- executable path is \"${execPath}\"`)\n        this.checkExecPath(execPath, errorCallback)\n      }.bind(this))\n  },\n\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath (execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`)\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`)\n        return errorCallback(err)\n      }\n      this.addLog(`- version is \"${version}\"`)\n\n      const range = new semver.Range(this.semverRange)\n      var valid = false\n      try {\n        valid = range.test(version)\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack)\n        this.addLog(`- \"${execPath}\" does not have a valid version`)\n        this.addLog('- is it a Python executable?')\n        return errorCallback(err)\n      }\n\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`)\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED')\n        return errorCallback(new Error(\n          `Found unsupported Python version ${version}`))\n      }\n      this.succeed(execPath, version)\n    }.bind(this))\n  },\n\n  // Run an executable or shell command, trimming the output.\n  run: function run (exec, args, shell, callback) {\n    var env = extend({}, this.env)\n    env.TERM = 'dumb'\n    const opts = { env: env, shell: shell }\n\n    this.log.silly('execFile: exec = %j', exec)\n    this.log.silly('execFile: args = %j', args)\n    this.log.silly('execFile: opts = %j', opts)\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this))\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack)\n      return callback(err)\n    }\n\n    function execFileCallback (err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', (err && err.stack) || err)\n      this.log.silly('execFile result: stdout = %j', stdout)\n      this.log.silly('execFile result: stderr = %j', stderr)\n      if (err) {\n        return callback(err)\n      }\n      const execPath = stdout.trim()\n      callback(null, execPath)\n    }\n  },\n\n  succeed: function succeed (execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`)\n    process.nextTick(this.callback.bind(null, null, execPath))\n  },\n\n  fail: function fail () {\n    const errorLog = this.errorLog.join('\\n')\n\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe'\n      : '/path/to/pythonexecutable'\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n    const info = [\n      '**********************************************************',\n      'You need to install the latest version of Python.',\n      'Node-gyp should be able to find and use Python. If not,',\n      'you can try one of the following options:',\n      `- Use the switch --python=\"${pathExample}\"`,\n      '  (accepted by both node-gyp and npm)',\n      '- Set the environment variable PYTHON',\n      '- Set the npm configuration variable python:',\n      `  npm config set python \"${pathExample}\"`,\n      'For more information consult the documentation at:',\n      'https://github.com/nodejs/node-gyp#installation',\n      '**********************************************************'\n    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`)\n    process.nextTick(this.callback.bind(null, new Error(\n      'Could not find any Python installation to use')))\n  }\n}\n\nfunction findPython (configPython, callback) {\n  var finder = new PythonFinder(configPython, callback)\n  finder.findPython()\n}\n\nmodule.exports = findPython\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"// if the thing isn't there, skip it\n// if there's a non-symlink there already, eexist\n// if there's a symlink already, pointing somewhere else, eexist\n// if there's a symlink already, pointing into our pkg, remove it first\n// then create the symlink\n\nconst {\n  promisify\n} = require('util');\nconst {\n  resolve,\n  dirname\n} = require('path');\nconst mkdirp = require('mkdirp-infer-owner');\nconst fs = require('fs');\nconst symlink = promisify(fs.symlink);\nconst readlink = promisify(fs.readlink);\nconst lstat = promisify(fs.lstat);\nconst throwNonEnoent = er => {\n  if (er.code !== 'ENOENT') throw er;\n};\n\n// even in --force mode, we never create a link over a link we've\n// already created.  you can have multiple packages in a tree trying\n// to contend for the same bin, or the same manpage listed multiple times,\n// which creates a race condition and nondeterminism.\nconst seen = new Set();\n\n// disable glob in our rimraf calls\nconst rimraf = promisify(require('rimraf'));\nconst rm = path => rimraf(path, {\n  glob: false\n});\nconst SKIP = Symbol('skip - missing or already installed');\nconst CLOBBER = Symbol('clobber - ours or in forceful mode');\nconst linkGently = async ({\n  path,\n  to,\n  from,\n  absFrom,\n  force\n}) => {\n  if (seen.has(to)) return true;\n  seen.add(to);\n\n  // if the script or manpage isn't there, just ignore it.\n  // this arguably *should* be an install error of some sort,\n  // or at least a warning, but npm has always behaved this\n  // way in the past, so it'd be a breaking change\n  return Promise.all([lstat(absFrom).catch(throwNonEnoent), lstat(to).catch(throwNonEnoent)]).then(([stFrom, stTo]) => {\n    // not present in package, skip it\n    if (!stFrom) return SKIP;\n\n    // exists! maybe clobber if we can\n    if (stTo) {\n      if (!stTo.isSymbolicLink()) return force && rm(to).then(() => CLOBBER);\n      return readlink(to).then(target => {\n        if (target === from) return SKIP; // skip it, already set up like we want it.\n\n        target = resolve(dirname(to), target);\n        if (target.indexOf(path) === 0 || force) return rm(to).then(() => CLOBBER);\n      });\n    } else {\n      // doesn't exist, dir might not either\n      return mkdirp(dirname(to));\n    }\n  }).then(skipOrClobber => {\n    if (skipOrClobber === SKIP) return true;\n    return symlink(from, to, 'file').catch(er => {\n      if (skipOrClobber === CLOBBER || force) return rm(to).then(() => symlink(from, to, 'file'));\n      throw er;\n    }).then(() => true);\n  });\n};\nconst resetSeen = () => {\n  for (const p of seen) {\n    seen.delete(p);\n  }\n};\nmodule.exports = Object.assign(linkGently, {\n  resetSeen\n});","map":{"version":3,"names":["promisify","require","resolve","dirname","mkdirp","fs","symlink","readlink","lstat","throwNonEnoent","er","code","seen","Set","rimraf","rm","path","glob","SKIP","Symbol","CLOBBER","linkGently","to","from","absFrom","force","has","add","Promise","all","catch","then","stFrom","stTo","isSymbolicLink","target","indexOf","skipOrClobber","resetSeen","p","delete","module","exports","Object","assign"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/bin-links/lib/link-gently.js"],"sourcesContent":["// if the thing isn't there, skip it\n// if there's a non-symlink there already, eexist\n// if there's a symlink already, pointing somewhere else, eexist\n// if there's a symlink already, pointing into our pkg, remove it first\n// then create the symlink\n\nconst { promisify } = require('util')\nconst { resolve, dirname } = require('path')\nconst mkdirp = require('mkdirp-infer-owner')\nconst fs = require('fs')\nconst symlink = promisify(fs.symlink)\nconst readlink = promisify(fs.readlink)\nconst lstat = promisify(fs.lstat)\nconst throwNonEnoent = er => { if (er.code !== 'ENOENT') throw er }\n\n// even in --force mode, we never create a link over a link we've\n// already created.  you can have multiple packages in a tree trying\n// to contend for the same bin, or the same manpage listed multiple times,\n// which creates a race condition and nondeterminism.\nconst seen = new Set()\n\n// disable glob in our rimraf calls\nconst rimraf = promisify(require('rimraf'))\nconst rm = path => rimraf(path, { glob: false })\n\nconst SKIP = Symbol('skip - missing or already installed')\nconst CLOBBER  = Symbol('clobber - ours or in forceful mode')\n\nconst linkGently = async ({path, to, from, absFrom, force}) => {\n  if (seen.has(to))\n    return true\n  seen.add(to)\n\n  // if the script or manpage isn't there, just ignore it.\n  // this arguably *should* be an install error of some sort,\n  // or at least a warning, but npm has always behaved this\n  // way in the past, so it'd be a breaking change\n  return Promise.all([\n    lstat(absFrom).catch(throwNonEnoent),\n    lstat(to).catch(throwNonEnoent),\n  ]).then(([stFrom, stTo]) => {\n    // not present in package, skip it\n    if (!stFrom)\n      return SKIP\n\n    // exists! maybe clobber if we can\n    if (stTo) {\n      if (!stTo.isSymbolicLink())\n        return force && rm(to).then(() => CLOBBER)\n\n      return readlink(to).then(target => {\n        if (target === from)\n          return SKIP // skip it, already set up like we want it.\n\n        target = resolve(dirname(to), target)\n        if (target.indexOf(path) === 0 || force)\n          return rm(to).then(() => CLOBBER)\n      })\n    } else {\n      // doesn't exist, dir might not either\n      return mkdirp(dirname(to))\n    }\n  })\n  .then(skipOrClobber => {\n    if (skipOrClobber === SKIP)\n      return true\n    return symlink(from, to, 'file').catch(er => {\n      if (skipOrClobber === CLOBBER || force)\n        return rm(to).then(() => symlink(from, to, 'file'))\n      throw er\n    }).then(() => true)\n  })\n}\n\nconst resetSeen = () => {\n  for (const p of seen) {\n    seen.delete(p)\n  }\n}\n\nmodule.exports = Object.assign(linkGently, { resetSeen })\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
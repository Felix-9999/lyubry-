{"ast":null,"code":"const inspect = require('util').inspect;\nconst {\n  URL\n} = require('url');\nconst ansistyles = require('ansistyles');\nconst log = require('npmlog');\nconst npmProfile = require('npm-profile');\nconst qrcodeTerminal = require('qrcode-terminal');\nconst Table = require('cli-table3');\nconst otplease = require('./utils/otplease.js');\nconst pulseTillDone = require('./utils/pulse-till-done.js');\nconst readUserInfo = require('./utils/read-user-info.js');\nconst qrcode = url => new Promise(resolve => qrcodeTerminal.generate(url, resolve));\nconst knownProfileKeys = ['name', 'email', 'two-factor auth', 'fullname', 'homepage', 'freenode', 'twitter', 'github', 'created', 'updated'];\nconst writableProfileKeys = ['email', 'password', 'fullname', 'homepage', 'freenode', 'twitter', 'github'];\nconst BaseCommand = require('./base-command.js');\nclass Profile extends BaseCommand {\n  static get description() {\n    return 'Change settings on your registry profile';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'profile';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['enable-2fa [auth-only|auth-and-writes]', 'disable-2fa', 'get [<key>]', 'set <key> <value>'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['registry', 'json', 'parseable', 'otp'];\n  }\n  async completion(opts) {\n    var argv = opts.conf.argv.remain;\n    if (!argv[2]) return ['enable-2fa', 'disable-2fa', 'get', 'set'];\n    switch (argv[2]) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n        return ['auth-and-writes', 'auth-only'];\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'get':\n      case 'set':\n        return [];\n      default:\n        throw new Error(argv[2] + ' not recognized');\n    }\n  }\n  exec(args, cb) {\n    this.profile(args).then(() => cb()).catch(cb);\n  }\n  async profile(args) {\n    if (args.length === 0) throw new Error(this.usage);\n    log.gauge.show('profile');\n    const [subcmd, ...opts] = args;\n    switch (subcmd) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n      case 'enable2fa':\n      case 'enabletfa':\n        return this.enable2fa(opts);\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'disable2fa':\n      case 'disabletfa':\n        return this.disable2fa();\n      case 'get':\n        return this.get(opts);\n      case 'set':\n        return this.set(opts);\n      default:\n        throw new Error('Unknown profile command: ' + subcmd);\n    }\n  }\n  async get(args) {\n    const tfa = 'two-factor auth';\n    const info = await pulseTillDone.withPromise(npmProfile.get(this.npm.flatOptions));\n    if (!info.cidr_whitelist) delete info.cidr_whitelist;\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(info, null, 2));\n      return;\n    }\n\n    // clean up and format key/values for output\n    const cleaned = {};\n    for (const key of knownProfileKeys) cleaned[key] = info[key] || '';\n    const unknownProfileKeys = Object.keys(info).filter(k => !(k in cleaned));\n    for (const key of unknownProfileKeys) cleaned[key] = info[key] || '';\n    delete cleaned.tfa;\n    delete cleaned.email_verified;\n    cleaned.email += info.email_verified ? ' (verified)' : '(unverified)';\n    if (info.tfa && !info.tfa.pending) cleaned[tfa] = info.tfa.mode;else cleaned[tfa] = 'disabled';\n    if (args.length) {\n      const values = args // comma or space separated\n      .join(',').split(/,/).filter(arg => arg.trim() !== '').map(arg => cleaned[arg]).join('\\t');\n      this.npm.output(values);\n    } else {\n      if (this.npm.config.get('parseable')) {\n        for (const key of Object.keys(info)) {\n          if (key === 'tfa') this.npm.output(`${key}\\t${cleaned[tfa]}`);else this.npm.output(`${key}\\t${info[key]}`);\n        }\n      } else {\n        const table = new Table();\n        for (const key of Object.keys(cleaned)) table.push({\n          [ansistyles.bright(key)]: cleaned[key]\n        });\n        this.npm.output(table.toString());\n      }\n    }\n  }\n  async set(args) {\n    const conf = this.npm.flatOptions;\n    const prop = (args[0] || '').toLowerCase().trim();\n    let value = args.length > 1 ? args.slice(1).join(' ') : null;\n    const readPasswords = async () => {\n      const newpassword = await readUserInfo.password('New password: ');\n      const confirmedpassword = await readUserInfo.password('       Again:     ');\n      if (newpassword !== confirmedpassword) {\n        log.warn('profile', 'Passwords do not match, please try again.');\n        return readPasswords();\n      }\n      return newpassword;\n    };\n    if (prop !== 'password' && value === null) throw new Error('npm profile set <prop> <value>');\n    if (prop === 'password' && value !== null) {\n      throw new Error('npm profile set password\\n' + 'Do not include your current or new passwords on the command line.');\n    }\n    if (writableProfileKeys.indexOf(prop) === -1) {\n      throw new Error(`\"${prop}\" is not a property we can set. ` + `Valid properties are: ` + writableProfileKeys.join(', '));\n    }\n    if (prop === 'password') {\n      const current = await readUserInfo.password('Current password: ');\n      const newpassword = await readPasswords();\n      value = {\n        old: current,\n        new: newpassword\n      };\n    }\n\n    // FIXME: Work around to not clear everything other than what we're setting\n    const user = await pulseTillDone.withPromise(npmProfile.get(conf));\n    const newUser = {};\n    for (const key of writableProfileKeys) newUser[key] = user[key];\n    newUser[prop] = value;\n    const result = await otplease(conf, conf => npmProfile.set(newUser, conf));\n    if (this.npm.config.get('json')) this.npm.output(JSON.stringify({\n      [prop]: result[prop]\n    }, null, 2));else if (this.npm.config.get('parseable')) this.npm.output(prop + '\\t' + result[prop]);else if (result[prop] != null) this.npm.output('Set', prop, 'to', result[prop]);else this.npm.output('Set', prop);\n  }\n  async enable2fa(args) {\n    if (args.length > 1) throw new Error('npm profile enable-2fa [auth-and-writes|auth-only]');\n    const mode = args[0] || 'auth-and-writes';\n    if (mode !== 'auth-only' && mode !== 'auth-and-writes') {\n      throw new Error(`Invalid two-factor authentication mode \"${mode}\".\\n` + 'Valid modes are:\\n' + '  auth-only - Require two-factor authentication only when logging in\\n' + '  auth-and-writes - Require two-factor authentication when logging in ' + 'AND when publishing');\n    }\n    if (this.npm.config.get('json') || this.npm.config.get('parseable')) {\n      throw new Error('Enabling two-factor authentication is an interactive operation and ' + (this.npm.config.get('json') ? 'JSON' : 'parseable') + ' output mode is not available');\n    }\n    const info = {\n      tfa: {\n        mode: mode\n      }\n    };\n\n    // if they're using legacy auth currently then we have to\n    // update them to a bearer token before continuing.\n    const creds = this.npm.config.getCredentialsByURI(this.npm.config.get('registry'));\n    const auth = {};\n    if (creds.token) auth.token = creds.token;else if (creds.username) auth.basic = {\n      username: creds.username,\n      password: creds.password\n    };else if (creds.auth) {\n      const basic = Buffer.from(creds.auth, 'base64').toString().split(':', 2);\n      auth.basic = {\n        username: basic[0],\n        password: basic[1]\n      };\n    }\n    if (!auth.basic && !auth.token) {\n      throw new Error('You need to be logged in to registry ' + `${this.npm.config.get('registry')} in order to enable 2fa`);\n    }\n    if (auth.basic) {\n      log.info('profile', 'Updating authentication to bearer token');\n      const result = await npmProfile.createToken(auth.basic.password, false, [], this.npm.flatOptions);\n      if (!result.token) {\n        throw new Error(`Your registry ${this.npm.config.get('registry')} does not seem to ` + 'support bearer tokens. Bearer tokens are required for ' + 'two-factor authentication');\n      }\n      this.npm.config.setCredentialsByURI(this.npm.config.get('registry'), {\n        token: result.token\n      });\n      await this.npm.config.save('user');\n    }\n    log.notice('profile', 'Enabling two factor authentication for ' + mode);\n    const password = await readUserInfo.password();\n    info.tfa.password = password;\n    log.info('profile', 'Determine if tfa is pending');\n    const userInfo = await pulseTillDone.withPromise(npmProfile.get(this.npm.flatOptions));\n    const conf = {\n      ...this.npm.flatOptions\n    };\n    if (userInfo && userInfo.tfa && userInfo.tfa.pending) {\n      log.info('profile', 'Resetting two-factor authentication');\n      await pulseTillDone.withPromise(npmProfile.set({\n        tfa: {\n          password,\n          mode: 'disable'\n        }\n      }, conf));\n    } else if (userInfo && userInfo.tfa) {\n      if (!conf.otp) {\n        conf.otp = await readUserInfo.otp('Enter one-time password from your authenticator app: ');\n      }\n    }\n    log.info('profile', 'Setting two-factor authentication to ' + mode);\n    const challenge = await pulseTillDone.withPromise(npmProfile.set(info, conf));\n    if (challenge.tfa === null) {\n      this.npm.output('Two factor authentication mode changed to: ' + mode);\n      return;\n    }\n    const badResponse = typeof challenge.tfa !== 'string' || !/^otpauth:[/][/]/.test(challenge.tfa);\n    if (badResponse) {\n      throw new Error('Unknown error enabling two-factor authentication. Expected otpauth URL' + ', got: ' + inspect(challenge.tfa));\n    }\n    const otpauth = new URL(challenge.tfa);\n    const secret = otpauth.searchParams.get('secret');\n    const code = await qrcode(challenge.tfa);\n    this.npm.output('Scan into your authenticator app:\\n' + code + '\\n Or enter code:', secret);\n    const interactiveOTP = await readUserInfo.otp('And an OTP code from your authenticator: ');\n    log.info('profile', 'Finalizing two-factor authentication');\n    const result = await npmProfile.set({\n      tfa: [interactiveOTP]\n    }, conf);\n    this.npm.output('2FA successfully enabled. Below are your recovery codes, ' + 'please print these out.');\n    this.npm.output('You will need these to recover access to your account ' + 'if you lose your authentication device.');\n    for (const tfaCode of result.tfa) this.npm.output('\\t' + tfaCode);\n  }\n  async disable2fa(args) {\n    const conf = {\n      ...this.npm.flatOptions\n    };\n    const info = await pulseTillDone.withPromise(npmProfile.get(conf));\n    if (!info.tfa || info.tfa.pending) {\n      this.npm.output('Two factor authentication not enabled.');\n      return;\n    }\n    const password = await readUserInfo.password();\n    if (!conf.otp) {\n      const msg = 'Enter one-time password from your authenticator app: ';\n      conf.otp = await readUserInfo.otp(msg);\n    }\n    log.info('profile', 'disabling tfa');\n    await pulseTillDone.withPromise(npmProfile.set({\n      tfa: {\n        password: password,\n        mode: 'disable'\n      }\n    }, conf));\n    if (this.npm.config.get('json')) this.npm.output(JSON.stringify({\n      tfa: false\n    }, null, 2));else if (this.npm.config.get('parseable')) this.npm.output('tfa\\tfalse');else this.npm.output('Two factor authentication disabled.');\n  }\n}\nmodule.exports = Profile;","map":{"version":3,"names":["inspect","require","URL","ansistyles","log","npmProfile","qrcodeTerminal","Table","otplease","pulseTillDone","readUserInfo","qrcode","url","Promise","resolve","generate","knownProfileKeys","writableProfileKeys","BaseCommand","Profile","description","name","usage","params","completion","opts","argv","conf","remain","Error","exec","args","cb","profile","then","catch","length","gauge","show","subcmd","enable2fa","disable2fa","get","set","tfa","info","withPromise","npm","flatOptions","cidr_whitelist","config","output","JSON","stringify","cleaned","key","unknownProfileKeys","Object","keys","filter","k","email_verified","email","pending","mode","values","join","split","arg","trim","map","table","push","bright","toString","prop","toLowerCase","value","slice","readPasswords","newpassword","password","confirmedpassword","warn","indexOf","current","old","new","user","newUser","result","creds","getCredentialsByURI","auth","token","username","basic","Buffer","from","createToken","setCredentialsByURI","save","notice","userInfo","otp","challenge","badResponse","test","otpauth","secret","searchParams","code","interactiveOTP","tfaCode","msg","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/profile.js"],"sourcesContent":["const inspect = require('util').inspect\nconst { URL } = require('url')\nconst ansistyles = require('ansistyles')\nconst log = require('npmlog')\nconst npmProfile = require('npm-profile')\nconst qrcodeTerminal = require('qrcode-terminal')\nconst Table = require('cli-table3')\n\nconst otplease = require('./utils/otplease.js')\nconst pulseTillDone = require('./utils/pulse-till-done.js')\nconst readUserInfo = require('./utils/read-user-info.js')\n\nconst qrcode = url =>\n  new Promise((resolve) => qrcodeTerminal.generate(url, resolve))\n\nconst knownProfileKeys = [\n  'name',\n  'email',\n  'two-factor auth',\n  'fullname',\n  'homepage',\n  'freenode',\n  'twitter',\n  'github',\n  'created',\n  'updated',\n]\n\nconst writableProfileKeys = [\n  'email',\n  'password',\n  'fullname',\n  'homepage',\n  'freenode',\n  'twitter',\n  'github',\n]\n\nconst BaseCommand = require('./base-command.js')\nclass Profile extends BaseCommand {\n  static get description () {\n    return 'Change settings on your registry profile'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'profile'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      'enable-2fa [auth-only|auth-and-writes]',\n      'disable-2fa',\n      'get [<key>]',\n      'set <key> <value>',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'registry',\n      'json',\n      'parseable',\n      'otp',\n    ]\n  }\n\n  async completion (opts) {\n    var argv = opts.conf.argv.remain\n\n    if (!argv[2])\n      return ['enable-2fa', 'disable-2fa', 'get', 'set']\n\n    switch (argv[2]) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n        return ['auth-and-writes', 'auth-only']\n\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'get':\n      case 'set':\n        return []\n      default:\n        throw new Error(argv[2] + ' not recognized')\n    }\n  }\n\n  exec (args, cb) {\n    this.profile(args).then(() => cb()).catch(cb)\n  }\n\n  async profile (args) {\n    if (args.length === 0)\n      throw new Error(this.usage)\n\n    log.gauge.show('profile')\n\n    const [subcmd, ...opts] = args\n\n    switch (subcmd) {\n      case 'enable-2fa':\n      case 'enable-tfa':\n      case 'enable2fa':\n      case 'enabletfa':\n        return this.enable2fa(opts)\n      case 'disable-2fa':\n      case 'disable-tfa':\n      case 'disable2fa':\n      case 'disabletfa':\n        return this.disable2fa()\n      case 'get':\n        return this.get(opts)\n      case 'set':\n        return this.set(opts)\n      default:\n        throw new Error('Unknown profile command: ' + subcmd)\n    }\n  }\n\n  async get (args) {\n    const tfa = 'two-factor auth'\n    const info = await pulseTillDone.withPromise(\n      npmProfile.get(this.npm.flatOptions)\n    )\n\n    if (!info.cidr_whitelist)\n      delete info.cidr_whitelist\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(info, null, 2))\n      return\n    }\n\n    // clean up and format key/values for output\n    const cleaned = {}\n    for (const key of knownProfileKeys)\n      cleaned[key] = info[key] || ''\n\n    const unknownProfileKeys = Object.keys(info).filter((k) => !(k in cleaned))\n    for (const key of unknownProfileKeys)\n      cleaned[key] = info[key] || ''\n\n    delete cleaned.tfa\n    delete cleaned.email_verified\n    cleaned.email += info.email_verified ? ' (verified)' : '(unverified)'\n\n    if (info.tfa && !info.tfa.pending)\n      cleaned[tfa] = info.tfa.mode\n    else\n      cleaned[tfa] = 'disabled'\n\n    if (args.length) {\n      const values = args // comma or space separated\n        .join(',')\n        .split(/,/)\n        .filter((arg) => arg.trim() !== '')\n        .map((arg) => cleaned[arg])\n        .join('\\t')\n      this.npm.output(values)\n    } else {\n      if (this.npm.config.get('parseable')) {\n        for (const key of Object.keys(info)) {\n          if (key === 'tfa')\n            this.npm.output(`${key}\\t${cleaned[tfa]}`)\n          else\n            this.npm.output(`${key}\\t${info[key]}`)\n        }\n      } else {\n        const table = new Table()\n        for (const key of Object.keys(cleaned))\n          table.push({ [ansistyles.bright(key)]: cleaned[key] })\n\n        this.npm.output(table.toString())\n      }\n    }\n  }\n\n  async set (args) {\n    const conf = this.npm.flatOptions\n    const prop = (args[0] || '').toLowerCase().trim()\n\n    let value = args.length > 1 ? args.slice(1).join(' ') : null\n\n    const readPasswords = async () => {\n      const newpassword = await readUserInfo.password('New password: ')\n      const confirmedpassword = await readUserInfo.password('       Again:     ')\n\n      if (newpassword !== confirmedpassword) {\n        log.warn('profile', 'Passwords do not match, please try again.')\n        return readPasswords()\n      }\n\n      return newpassword\n    }\n\n    if (prop !== 'password' && value === null)\n      throw new Error('npm profile set <prop> <value>')\n\n    if (prop === 'password' && value !== null) {\n      throw new Error(\n        'npm profile set password\\n' +\n        'Do not include your current or new passwords on the command line.')\n    }\n\n    if (writableProfileKeys.indexOf(prop) === -1) {\n      throw new Error(`\"${prop}\" is not a property we can set. ` +\n        `Valid properties are: ` + writableProfileKeys.join(', '))\n    }\n\n    if (prop === 'password') {\n      const current = await readUserInfo.password('Current password: ')\n      const newpassword = await readPasswords()\n\n      value = { old: current, new: newpassword }\n    }\n\n    // FIXME: Work around to not clear everything other than what we're setting\n    const user = await pulseTillDone.withPromise(npmProfile.get(conf))\n    const newUser = {}\n\n    for (const key of writableProfileKeys)\n      newUser[key] = user[key]\n\n    newUser[prop] = value\n\n    const result = await otplease(conf, conf => npmProfile.set(newUser, conf))\n\n    if (this.npm.config.get('json'))\n      this.npm.output(JSON.stringify({ [prop]: result[prop] }, null, 2))\n    else if (this.npm.config.get('parseable'))\n      this.npm.output(prop + '\\t' + result[prop])\n    else if (result[prop] != null)\n      this.npm.output('Set', prop, 'to', result[prop])\n    else\n      this.npm.output('Set', prop)\n  }\n\n  async enable2fa (args) {\n    if (args.length > 1)\n      throw new Error('npm profile enable-2fa [auth-and-writes|auth-only]')\n\n    const mode = args[0] || 'auth-and-writes'\n    if (mode !== 'auth-only' && mode !== 'auth-and-writes') {\n      throw new Error(\n        `Invalid two-factor authentication mode \"${mode}\".\\n` +\n        'Valid modes are:\\n' +\n        '  auth-only - Require two-factor authentication only when logging in\\n' +\n        '  auth-and-writes - Require two-factor authentication when logging in ' +\n        'AND when publishing'\n      )\n    }\n\n    if (this.npm.config.get('json') || this.npm.config.get('parseable')) {\n      throw new Error(\n        'Enabling two-factor authentication is an interactive operation and ' +\n        (this.npm.config.get('json') ? 'JSON' : 'parseable') + ' output mode is not available'\n      )\n    }\n\n    const info = {\n      tfa: {\n        mode: mode,\n      },\n    }\n\n    // if they're using legacy auth currently then we have to\n    // update them to a bearer token before continuing.\n    const creds = this.npm.config.getCredentialsByURI(this.npm.config.get('registry'))\n    const auth = {}\n\n    if (creds.token)\n      auth.token = creds.token\n    else if (creds.username)\n      auth.basic = { username: creds.username, password: creds.password }\n    else if (creds.auth) {\n      const basic = Buffer.from(creds.auth, 'base64').toString().split(':', 2)\n      auth.basic = { username: basic[0], password: basic[1] }\n    }\n\n    if (!auth.basic && !auth.token) {\n      throw new Error(\n        'You need to be logged in to registry ' +\n        `${this.npm.config.get('registry')} in order to enable 2fa`\n      )\n    }\n\n    if (auth.basic) {\n      log.info('profile', 'Updating authentication to bearer token')\n      const result = await npmProfile.createToken(\n        auth.basic.password, false, [], this.npm.flatOptions\n      )\n\n      if (!result.token) {\n        throw new Error(\n          `Your registry ${this.npm.config.get('registry')} does not seem to ` +\n          'support bearer tokens. Bearer tokens are required for ' +\n          'two-factor authentication'\n        )\n      }\n\n      this.npm.config.setCredentialsByURI(\n        this.npm.config.get('registry'),\n        { token: result.token }\n      )\n      await this.npm.config.save('user')\n    }\n\n    log.notice('profile', 'Enabling two factor authentication for ' + mode)\n    const password = await readUserInfo.password()\n    info.tfa.password = password\n\n    log.info('profile', 'Determine if tfa is pending')\n    const userInfo = await pulseTillDone.withPromise(\n      npmProfile.get(this.npm.flatOptions)\n    )\n\n    const conf = { ...this.npm.flatOptions }\n    if (userInfo && userInfo.tfa && userInfo.tfa.pending) {\n      log.info('profile', 'Resetting two-factor authentication')\n      await pulseTillDone.withPromise(\n        npmProfile.set({ tfa: { password, mode: 'disable' } }, conf)\n      )\n    } else if (userInfo && userInfo.tfa) {\n      if (!conf.otp) {\n        conf.otp = await readUserInfo.otp(\n          'Enter one-time password from your authenticator app: '\n        )\n      }\n    }\n\n    log.info('profile', 'Setting two-factor authentication to ' + mode)\n    const challenge = await pulseTillDone.withPromise(\n      npmProfile.set(info, conf)\n    )\n\n    if (challenge.tfa === null) {\n      this.npm.output('Two factor authentication mode changed to: ' + mode)\n      return\n    }\n\n    const badResponse = typeof challenge.tfa !== 'string'\n      || !/^otpauth:[/][/]/.test(challenge.tfa)\n    if (badResponse) {\n      throw new Error(\n        'Unknown error enabling two-factor authentication. Expected otpauth URL' +\n        ', got: ' + inspect(challenge.tfa)\n      )\n    }\n\n    const otpauth = new URL(challenge.tfa)\n    const secret = otpauth.searchParams.get('secret')\n    const code = await qrcode(challenge.tfa)\n\n    this.npm.output(\n      'Scan into your authenticator app:\\n' + code + '\\n Or enter code:', secret\n    )\n\n    const interactiveOTP =\n      await readUserInfo.otp('And an OTP code from your authenticator: ')\n\n    log.info('profile', 'Finalizing two-factor authentication')\n\n    const result = await npmProfile.set({ tfa: [interactiveOTP] }, conf)\n\n    this.npm.output(\n      '2FA successfully enabled. Below are your recovery codes, ' +\n      'please print these out.'\n    )\n    this.npm.output(\n      'You will need these to recover access to your account ' +\n      'if you lose your authentication device.'\n    )\n\n    for (const tfaCode of result.tfa)\n      this.npm.output('\\t' + tfaCode)\n  }\n\n  async disable2fa (args) {\n    const conf = { ...this.npm.flatOptions }\n    const info = await pulseTillDone.withPromise(npmProfile.get(conf))\n\n    if (!info.tfa || info.tfa.pending) {\n      this.npm.output('Two factor authentication not enabled.')\n      return\n    }\n\n    const password = await readUserInfo.password()\n\n    if (!conf.otp) {\n      const msg = 'Enter one-time password from your authenticator app: '\n      conf.otp = await readUserInfo.otp(msg)\n    }\n\n    log.info('profile', 'disabling tfa')\n\n    await pulseTillDone.withPromise(npmProfile.set({\n      tfa: { password: password, mode: 'disable' },\n    }, conf))\n\n    if (this.npm.config.get('json'))\n      this.npm.output(JSON.stringify({ tfa: false }, null, 2))\n    else if (this.npm.config.get('parseable'))\n      this.npm.output('tfa\\tfalse')\n    else\n      this.npm.output('Two factor authentication disabled.')\n  }\n}\nmodule.exports = Profile\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
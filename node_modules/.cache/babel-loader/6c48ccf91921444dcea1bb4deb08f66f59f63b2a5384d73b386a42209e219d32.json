{"ast":null,"code":"// module to set the appropriate log settings based on configs\n// returns a boolean to say whether we should enable color on\n// stdout or not.\n//\n// Also (and this is a really inexcusable kludge), we patch the\n// log.warn() method so that when we see a peerDep override\n// explanation from Arborist, we can replace the object with a\n// highly abbreviated explanation of what's being overridden.\nconst log = require('npmlog');\nconst {\n  explain\n} = require('./explain-eresolve.js');\nmodule.exports = config => {\n  const color = config.get('color');\n  const {\n    warn\n  } = log;\n  const stdoutTTY = process.stdout.isTTY;\n  const stderrTTY = process.stderr.isTTY;\n  const dumbTerm = process.env.TERM === 'dumb';\n  const stderrNotDumb = stderrTTY && !dumbTerm;\n  // this logic is duplicated in the config 'color' flattener\n  const enableColorStderr = color === 'always' ? true : color === false ? false : stderrTTY;\n  const enableColorStdout = color === 'always' ? true : color === false ? false : stdoutTTY;\n  log.warn = (heading, ...args) => {\n    if (heading === 'ERESOLVE' && args[1] && typeof args[1] === 'object') {\n      warn(heading, args[0]);\n      return warn('', explain(args[1], enableColorStdout, 2));\n    }\n    return warn(heading, ...args);\n  };\n  if (config.get('timing') && config.get('loglevel') === 'notice') log.level = 'timing';else log.level = config.get('loglevel');\n  log.heading = config.get('heading') || 'npm';\n  if (enableColorStderr) log.enableColor();else log.disableColor();\n  if (config.get('unicode')) log.enableUnicode();else log.disableUnicode();\n\n  // if it's more than error, don't show progress\n  const quiet = log.levels[log.level] > log.levels.error;\n  if (config.get('progress') && stderrNotDumb && !quiet) log.enableProgress();else log.disableProgress();\n};","map":{"version":3,"names":["log","require","explain","module","exports","config","color","get","warn","stdoutTTY","process","stdout","isTTY","stderrTTY","stderr","dumbTerm","env","TERM","stderrNotDumb","enableColorStderr","enableColorStdout","heading","args","level","enableColor","disableColor","enableUnicode","disableUnicode","quiet","levels","error","enableProgress","disableProgress"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/setup-log.js"],"sourcesContent":["// module to set the appropriate log settings based on configs\n// returns a boolean to say whether we should enable color on\n// stdout or not.\n//\n// Also (and this is a really inexcusable kludge), we patch the\n// log.warn() method so that when we see a peerDep override\n// explanation from Arborist, we can replace the object with a\n// highly abbreviated explanation of what's being overridden.\nconst log = require('npmlog')\nconst { explain } = require('./explain-eresolve.js')\n\nmodule.exports = (config) => {\n  const color = config.get('color')\n\n  const { warn } = log\n\n  const stdoutTTY = process.stdout.isTTY\n  const stderrTTY = process.stderr.isTTY\n  const dumbTerm = process.env.TERM === 'dumb'\n  const stderrNotDumb = stderrTTY && !dumbTerm\n  // this logic is duplicated in the config 'color' flattener\n  const enableColorStderr = color === 'always' ? true\n    : color === false ? false\n    : stderrTTY\n\n  const enableColorStdout = color === 'always' ? true\n    : color === false ? false\n    : stdoutTTY\n\n  log.warn = (heading, ...args) => {\n    if (heading === 'ERESOLVE' && args[1] && typeof args[1] === 'object') {\n      warn(heading, args[0])\n      return warn('', explain(args[1], enableColorStdout, 2))\n    }\n    return warn(heading, ...args)\n  }\n\n  if (config.get('timing') && config.get('loglevel') === 'notice')\n    log.level = 'timing'\n  else\n    log.level = config.get('loglevel')\n\n  log.heading = config.get('heading') || 'npm'\n\n  if (enableColorStderr)\n    log.enableColor()\n  else\n    log.disableColor()\n\n  if (config.get('unicode'))\n    log.enableUnicode()\n  else\n    log.disableUnicode()\n\n  // if it's more than error, don't show progress\n  const quiet = log.levels[log.level] > log.levels.error\n\n  if (config.get('progress') && stderrNotDumb && !quiet)\n    log.enableProgress()\n  else\n    log.disableProgress()\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC7B,MAAM;EAAEC;AAAQ,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAEpDE,MAAM,CAACC,OAAO,GAAIC,MAAM,IAAK;EAC3B,MAAMC,KAAK,GAAGD,MAAM,CAACE,GAAG,CAAC,OAAO,CAAC;EAEjC,MAAM;IAAEC;EAAK,CAAC,GAAGR,GAAG;EAEpB,MAAMS,SAAS,GAAGC,OAAO,CAACC,MAAM,CAACC,KAAK;EACtC,MAAMC,SAAS,GAAGH,OAAO,CAACI,MAAM,CAACF,KAAK;EACtC,MAAMG,QAAQ,GAAGL,OAAO,CAACM,GAAG,CAACC,IAAI,KAAK,MAAM;EAC5C,MAAMC,aAAa,GAAGL,SAAS,IAAI,CAACE,QAAQ;EAC5C;EACA,MAAMI,iBAAiB,GAAGb,KAAK,KAAK,QAAQ,GAAG,IAAI,GAC/CA,KAAK,KAAK,KAAK,GAAG,KAAK,GACvBO,SAAS;EAEb,MAAMO,iBAAiB,GAAGd,KAAK,KAAK,QAAQ,GAAG,IAAI,GAC/CA,KAAK,KAAK,KAAK,GAAG,KAAK,GACvBG,SAAS;EAEbT,GAAG,CAACQ,IAAI,GAAG,CAACa,OAAO,EAAE,GAAGC,IAAI,KAAK;IAC/B,IAAID,OAAO,KAAK,UAAU,IAAIC,IAAI,CAAC,CAAC,CAAC,IAAI,OAAOA,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACpEd,IAAI,CAACa,OAAO,EAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;MACtB,OAAOd,IAAI,CAAC,EAAE,EAAEN,OAAO,CAACoB,IAAI,CAAC,CAAC,CAAC,EAAEF,iBAAiB,EAAE,CAAC,CAAC,CAAC;IACzD;IACA,OAAOZ,IAAI,CAACa,OAAO,EAAE,GAAGC,IAAI,CAAC;EAC/B,CAAC;EAED,IAAIjB,MAAM,CAACE,GAAG,CAAC,QAAQ,CAAC,IAAIF,MAAM,CAACE,GAAG,CAAC,UAAU,CAAC,KAAK,QAAQ,EAC7DP,GAAG,CAACuB,KAAK,GAAG,QAAQ,MAEpBvB,GAAG,CAACuB,KAAK,GAAGlB,MAAM,CAACE,GAAG,CAAC,UAAU,CAAC;EAEpCP,GAAG,CAACqB,OAAO,GAAGhB,MAAM,CAACE,GAAG,CAAC,SAAS,CAAC,IAAI,KAAK;EAE5C,IAAIY,iBAAiB,EACnBnB,GAAG,CAACwB,WAAW,CAAC,CAAC,MAEjBxB,GAAG,CAACyB,YAAY,CAAC,CAAC;EAEpB,IAAIpB,MAAM,CAACE,GAAG,CAAC,SAAS,CAAC,EACvBP,GAAG,CAAC0B,aAAa,CAAC,CAAC,MAEnB1B,GAAG,CAAC2B,cAAc,CAAC,CAAC;;EAEtB;EACA,MAAMC,KAAK,GAAG5B,GAAG,CAAC6B,MAAM,CAAC7B,GAAG,CAACuB,KAAK,CAAC,GAAGvB,GAAG,CAAC6B,MAAM,CAACC,KAAK;EAEtD,IAAIzB,MAAM,CAACE,GAAG,CAAC,UAAU,CAAC,IAAIW,aAAa,IAAI,CAACU,KAAK,EACnD5B,GAAG,CAAC+B,cAAc,CAAC,CAAC,MAEpB/B,GAAG,CAACgC,eAAe,CAAC,CAAC;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
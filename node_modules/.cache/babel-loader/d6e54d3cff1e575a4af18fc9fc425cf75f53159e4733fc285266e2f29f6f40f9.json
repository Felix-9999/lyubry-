{"ast":null,"code":"const {\n  explainNode\n} = require('./utils/explain-dep.js');\nconst completion = require('./utils/completion/installed-deep.js');\nconst Arborist = require('@npmcli/arborist');\nconst npa = require('npm-package-arg');\nconst semver = require('semver');\nconst {\n  relative,\n  resolve\n} = require('path');\nconst validName = require('validate-npm-package-name');\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\nclass Explain extends ArboristWorkspaceCmd {\n  static get description() {\n    return 'Explain installed packages';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'explain';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['<folder | specifier>'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['json', 'workspace'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n  exec(args, cb) {\n    this.explain(args).then(() => cb()).catch(cb);\n  }\n  async explain(args) {\n    if (!args.length) throw this.usage;\n    const arb = new Arborist({\n      path: this.npm.prefix,\n      ...this.npm.flatOptions\n    });\n    const tree = await arb.loadActual();\n    if (this.workspaceNames && this.workspaceNames.length) this.filterSet = arb.workspaceDependencySet(tree, this.workspaceNames);\n    const nodes = new Set();\n    for (const arg of args) {\n      for (const node of this.getNodes(tree, arg)) {\n        const filteredOut = this.filterSet && this.filterSet.size > 0 && !this.filterSet.has(node);\n        if (!filteredOut) nodes.add(node);\n      }\n    }\n    if (nodes.size === 0) throw `No dependencies found matching ${args.join(', ')}`;\n    const expls = [];\n    for (const node of nodes) {\n      const {\n        extraneous,\n        dev,\n        optional,\n        devOptional,\n        peer,\n        inBundle\n      } = node;\n      const expl = node.explain();\n      if (extraneous) expl.extraneous = true;else {\n        expl.dev = dev;\n        expl.optional = optional;\n        expl.devOptional = devOptional;\n        expl.peer = peer;\n        expl.bundled = inBundle;\n      }\n      expls.push(expl);\n    }\n    if (this.npm.flatOptions.json) this.npm.output(JSON.stringify(expls, null, 2));else {\n      this.npm.output(expls.map(expl => {\n        return explainNode(expl, Infinity, this.npm.color);\n      }).join('\\n\\n'));\n    }\n  }\n  getNodes(tree, arg) {\n    // if it's just a name, return packages by that name\n    const {\n      validForOldPackages: valid\n    } = validName(arg);\n    if (valid) return tree.inventory.query('packageName', arg);\n\n    // if it's a location, get that node\n    const maybeLoc = arg.replace(/\\\\/g, '/').replace(/\\/+$/, '');\n    const nodeByLoc = tree.inventory.get(maybeLoc);\n    if (nodeByLoc) return [nodeByLoc];\n\n    // maybe a path to a node_modules folder\n    const maybePath = relative(this.npm.prefix, resolve(maybeLoc)).replace(/\\\\/g, '/').replace(/\\/+$/, '');\n    const nodeByPath = tree.inventory.get(maybePath);\n    if (nodeByPath) return [nodeByPath];\n\n    // otherwise, try to select all matching nodes\n    try {\n      return this.getNodesByVersion(tree, arg);\n    } catch (er) {\n      return [];\n    }\n  }\n  getNodesByVersion(tree, arg) {\n    const spec = npa(arg, this.npm.prefix);\n    if (spec.type !== 'version' && spec.type !== 'range') return [];\n    return tree.inventory.filter(node => {\n      return node.package.name === spec.name && semver.satisfies(node.package.version, spec.rawSpec);\n    });\n  }\n}\nmodule.exports = Explain;","map":{"version":3,"names":["explainNode","require","completion","Arborist","npa","semver","relative","resolve","validName","ArboristWorkspaceCmd","Explain","description","name","usage","params","opts","npm","exec","args","cb","explain","then","catch","length","arb","path","prefix","flatOptions","tree","loadActual","workspaceNames","filterSet","workspaceDependencySet","nodes","Set","arg","node","getNodes","filteredOut","size","has","add","join","expls","extraneous","dev","optional","devOptional","peer","inBundle","expl","bundled","push","json","output","JSON","stringify","map","Infinity","color","validForOldPackages","valid","inventory","query","maybeLoc","replace","nodeByLoc","get","maybePath","nodeByPath","getNodesByVersion","er","spec","type","filter","package","satisfies","version","rawSpec","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/explain.js"],"sourcesContent":["const { explainNode } = require('./utils/explain-dep.js')\nconst completion = require('./utils/completion/installed-deep.js')\nconst Arborist = require('@npmcli/arborist')\nconst npa = require('npm-package-arg')\nconst semver = require('semver')\nconst { relative, resolve } = require('path')\nconst validName = require('validate-npm-package-name')\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\n\nclass Explain extends ArboristWorkspaceCmd {\n  static get description () {\n    return 'Explain installed packages'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'explain'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<folder | specifier>']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'json',\n      'workspace',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  exec (args, cb) {\n    this.explain(args).then(() => cb()).catch(cb)\n  }\n\n  async explain (args) {\n    if (!args.length)\n      throw this.usage\n\n    const arb = new Arborist({ path: this.npm.prefix, ...this.npm.flatOptions })\n    const tree = await arb.loadActual()\n\n    if (this.workspaceNames && this.workspaceNames.length)\n      this.filterSet = arb.workspaceDependencySet(tree, this.workspaceNames)\n\n    const nodes = new Set()\n    for (const arg of args) {\n      for (const node of this.getNodes(tree, arg)) {\n        const filteredOut = this.filterSet\n          && this.filterSet.size > 0\n          && !this.filterSet.has(node)\n        if (!filteredOut)\n          nodes.add(node)\n      }\n    }\n    if (nodes.size === 0)\n      throw `No dependencies found matching ${args.join(', ')}`\n\n    const expls = []\n    for (const node of nodes) {\n      const { extraneous, dev, optional, devOptional, peer, inBundle } = node\n      const expl = node.explain()\n      if (extraneous)\n        expl.extraneous = true\n      else {\n        expl.dev = dev\n        expl.optional = optional\n        expl.devOptional = devOptional\n        expl.peer = peer\n        expl.bundled = inBundle\n      }\n      expls.push(expl)\n    }\n\n    if (this.npm.flatOptions.json)\n      this.npm.output(JSON.stringify(expls, null, 2))\n    else {\n      this.npm.output(expls.map(expl => {\n        return explainNode(expl, Infinity, this.npm.color)\n      }).join('\\n\\n'))\n    }\n  }\n\n  getNodes (tree, arg) {\n    // if it's just a name, return packages by that name\n    const { validForOldPackages: valid } = validName(arg)\n    if (valid)\n      return tree.inventory.query('packageName', arg)\n\n    // if it's a location, get that node\n    const maybeLoc = arg.replace(/\\\\/g, '/').replace(/\\/+$/, '')\n    const nodeByLoc = tree.inventory.get(maybeLoc)\n    if (nodeByLoc)\n      return [nodeByLoc]\n\n    // maybe a path to a node_modules folder\n    const maybePath = relative(this.npm.prefix, resolve(maybeLoc))\n      .replace(/\\\\/g, '/').replace(/\\/+$/, '')\n    const nodeByPath = tree.inventory.get(maybePath)\n    if (nodeByPath)\n      return [nodeByPath]\n\n    // otherwise, try to select all matching nodes\n    try {\n      return this.getNodesByVersion(tree, arg)\n    } catch (er) {\n      return []\n    }\n  }\n\n  getNodesByVersion (tree, arg) {\n    const spec = npa(arg, this.npm.prefix)\n    if (spec.type !== 'version' && spec.type !== 'range')\n      return []\n\n    return tree.inventory.filter(node => {\n      return node.package.name === spec.name &&\n        semver.satisfies(node.package.version, spec.rawSpec)\n    })\n  }\n}\nmodule.exports = Explain\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
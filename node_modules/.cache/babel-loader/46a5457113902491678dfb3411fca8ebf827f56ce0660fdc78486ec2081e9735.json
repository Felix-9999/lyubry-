{"ast":null,"code":"const tar = require('tar');\nconst ssri = require('ssri');\nconst npmlog = require('npmlog');\nconst formatBytes = require('./format-bytes.js');\nconst columnify = require('columnify');\nconst localeCompare = require('@isaacs/string-locale-compare')('en', {\n  sensitivity: 'case',\n  numeric: true\n});\nconst logTar = (tarball, opts = {}) => {\n  const {\n    unicode = false,\n    log = npmlog\n  } = opts;\n  log.notice('');\n  log.notice('', `${unicode ? 'ðŸ“¦ ' : 'package:'} ${tarball.name}@${tarball.version}`);\n  log.notice('=== Tarball Contents ===');\n  if (tarball.files.length) {\n    log.notice('', columnify(tarball.files.map(f => {\n      const bytes = formatBytes(f.size, false);\n      return /^node_modules\\//.test(f.path) ? null : {\n        path: f.path,\n        size: `${bytes}`\n      };\n    }).filter(f => f), {\n      include: ['size', 'path'],\n      showHeaders: false\n    }));\n  }\n  if (tarball.bundled.length) {\n    log.notice('=== Bundled Dependencies ===');\n    tarball.bundled.forEach(name => log.notice('', name));\n  }\n  log.notice('=== Tarball Details ===');\n  log.notice('', columnify([{\n    name: 'name:',\n    value: tarball.name\n  }, {\n    name: 'version:',\n    value: tarball.version\n  }, tarball.filename && {\n    name: 'filename:',\n    value: tarball.filename\n  }, {\n    name: 'package size:',\n    value: formatBytes(tarball.size)\n  }, {\n    name: 'unpacked size:',\n    value: formatBytes(tarball.unpackedSize)\n  }, {\n    name: 'shasum:',\n    value: tarball.shasum\n  }, {\n    name: 'integrity:',\n    value: tarball.integrity.toString().substr(0, 20) + '[...]' + tarball.integrity.toString().substr(80)\n  }, tarball.bundled.length && {\n    name: 'bundled deps:',\n    value: tarball.bundled.length\n  }, tarball.bundled.length && {\n    name: 'bundled files:',\n    value: tarball.entryCount - tarball.files.length\n  }, tarball.bundled.length && {\n    name: 'own files:',\n    value: tarball.files.length\n  }, {\n    name: 'total files:',\n    value: tarball.entryCount\n  }].filter(x => x), {\n    include: ['name', 'value'],\n    showHeaders: false\n  }));\n  log.notice('', '');\n};\nconst getContents = async (manifest, tarball) => {\n  const files = [];\n  const bundled = new Set();\n  let totalEntries = 0;\n  let totalEntrySize = 0;\n\n  // reads contents of tarball\n  const stream = tar.t({\n    onentry(entry) {\n      totalEntries++;\n      totalEntrySize += entry.size;\n      const p = entry.path;\n      if (p.startsWith('package/node_modules/')) {\n        const name = p.match(/^package\\/node_modules\\/((?:@[^/]+\\/)?[^/]+)/)[1];\n        bundled.add(name);\n      }\n      files.push({\n        path: entry.path.replace(/^package\\//, ''),\n        size: entry.size,\n        mode: entry.mode\n      });\n    }\n  });\n  stream.end(tarball);\n  const integrity = await ssri.fromData(tarball, {\n    algorithms: ['sha1', 'sha512']\n  });\n  const comparator = ({\n    path: a\n  }, {\n    path: b\n  }) => localeCompare(a, b);\n  const isUpper = str => {\n    const ch = str.charAt(0);\n    return ch === ch.toUpperCase();\n  };\n  const uppers = files.filter(file => isUpper(file.path));\n  const others = files.filter(file => !isUpper(file.path));\n  uppers.sort(comparator);\n  others.sort(comparator);\n  const shasum = integrity.sha1[0].hexDigest();\n  return {\n    id: manifest._id || `${manifest.name}@${manifest.version}`,\n    name: manifest.name,\n    version: manifest.version,\n    size: tarball.length,\n    unpackedSize: totalEntrySize,\n    shasum,\n    integrity: ssri.parse(integrity.sha512[0]),\n    filename: `${manifest.name}-${manifest.version}.tgz`,\n    files: uppers.concat(others),\n    entryCount: totalEntries,\n    bundled: Array.from(bundled)\n  };\n};\nmodule.exports = {\n  logTar,\n  getContents\n};","map":{"version":3,"names":["tar","require","ssri","npmlog","formatBytes","columnify","localeCompare","sensitivity","numeric","logTar","tarball","opts","unicode","log","notice","name","version","files","length","map","f","bytes","size","test","path","filter","include","showHeaders","bundled","forEach","value","filename","unpackedSize","shasum","integrity","toString","substr","entryCount","x","getContents","manifest","Set","totalEntries","totalEntrySize","stream","t","onentry","entry","p","startsWith","match","add","push","replace","mode","end","fromData","algorithms","comparator","a","b","isUpper","str","ch","charAt","toUpperCase","uppers","file","others","sort","sha1","hexDigest","id","_id","parse","sha512","concat","Array","from","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/tar.js"],"sourcesContent":["const tar = require('tar')\nconst ssri = require('ssri')\nconst npmlog = require('npmlog')\nconst formatBytes = require('./format-bytes.js')\nconst columnify = require('columnify')\nconst localeCompare = require('@isaacs/string-locale-compare')('en', {\n  sensitivity: 'case',\n  numeric: true,\n})\n\nconst logTar = (tarball, opts = {}) => {\n  const { unicode = false, log = npmlog } = opts\n  log.notice('')\n  log.notice('', `${unicode ? 'ðŸ“¦ ' : 'package:'} ${tarball.name}@${tarball.version}`)\n  log.notice('=== Tarball Contents ===')\n  if (tarball.files.length) {\n    log.notice('', columnify(tarball.files.map((f) => {\n      const bytes = formatBytes(f.size, false)\n      return (/^node_modules\\//.test(f.path)) ? null\n        : { path: f.path, size: `${bytes}` }\n    }).filter(f => f), {\n      include: ['size', 'path'],\n      showHeaders: false,\n    }))\n  }\n  if (tarball.bundled.length) {\n    log.notice('=== Bundled Dependencies ===')\n    tarball.bundled.forEach((name) => log.notice('', name))\n  }\n  log.notice('=== Tarball Details ===')\n  log.notice('', columnify([\n    { name: 'name:', value: tarball.name },\n    { name: 'version:', value: tarball.version },\n    tarball.filename && { name: 'filename:', value: tarball.filename },\n    { name: 'package size:', value: formatBytes(tarball.size) },\n    { name: 'unpacked size:', value: formatBytes(tarball.unpackedSize) },\n    { name: 'shasum:', value: tarball.shasum },\n    {\n      name: 'integrity:',\n      value: tarball.integrity.toString().substr(0, 20) + '[...]' + tarball.integrity.toString().substr(80),\n    },\n    tarball.bundled.length && { name: 'bundled deps:', value: tarball.bundled.length },\n    tarball.bundled.length && { name: 'bundled files:', value: tarball.entryCount - tarball.files.length },\n    tarball.bundled.length && { name: 'own files:', value: tarball.files.length },\n    { name: 'total files:', value: tarball.entryCount },\n  ].filter((x) => x), {\n    include: ['name', 'value'],\n    showHeaders: false,\n  }))\n  log.notice('', '')\n}\n\nconst getContents = async (manifest, tarball) => {\n  const files = []\n  const bundled = new Set()\n  let totalEntries = 0\n  let totalEntrySize = 0\n\n  // reads contents of tarball\n  const stream = tar.t({\n    onentry (entry) {\n      totalEntries++\n      totalEntrySize += entry.size\n      const p = entry.path\n      if (p.startsWith('package/node_modules/')) {\n        const name = p.match(/^package\\/node_modules\\/((?:@[^/]+\\/)?[^/]+)/)[1]\n        bundled.add(name)\n      }\n      files.push({\n        path: entry.path.replace(/^package\\//, ''),\n        size: entry.size,\n        mode: entry.mode,\n      })\n    },\n  })\n  stream.end(tarball)\n\n  const integrity = await ssri.fromData(tarball, {\n    algorithms: ['sha1', 'sha512'],\n  })\n\n  const comparator = ({ path: a }, { path: b }) => localeCompare(a, b)\n\n  const isUpper = (str) => {\n    const ch = str.charAt(0)\n    return ch === ch.toUpperCase()\n  }\n\n  const uppers = files.filter(file => isUpper(file.path))\n  const others = files.filter(file => !isUpper(file.path))\n\n  uppers.sort(comparator)\n  others.sort(comparator)\n\n  const shasum = integrity.sha1[0].hexDigest()\n  return {\n    id: manifest._id || `${manifest.name}@${manifest.version}`,\n    name: manifest.name,\n    version: manifest.version,\n    size: tarball.length,\n    unpackedSize: totalEntrySize,\n    shasum,\n    integrity: ssri.parse(integrity.sha512[0]),\n    filename: `${manifest.name}-${manifest.version}.tgz`,\n    files: uppers.concat(others),\n    entryCount: totalEntries,\n    bundled: Array.from(bundled),\n  }\n}\n\nmodule.exports = { logTar, getContents }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
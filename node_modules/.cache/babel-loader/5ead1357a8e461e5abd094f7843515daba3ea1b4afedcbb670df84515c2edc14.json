{"ast":null,"code":"// print a banner telling the user to upgrade npm to latest\n// but not in CI, and not if we're doing that already.\n// Check daily for betas, and weekly otherwise.\n\nconst pacote = require('pacote');\nconst ciDetect = require('@npmcli/ci-detect');\nconst semver = require('semver');\nconst chalk = require('chalk');\nconst {\n  promisify\n} = require('util');\nconst stat = promisify(require('fs').stat);\nconst writeFile = promisify(require('fs').writeFile);\nconst {\n  resolve\n} = require('path');\nconst isGlobalNpmUpdate = npm => {\n  return npm.flatOptions.global && ['install', 'update'].includes(npm.command) && npm.argv.some(arg => /^npm(@|$)/.test(arg));\n};\n\n// update check frequency\nconst DAILY = 1000 * 60 * 60 * 24;\nconst WEEKLY = DAILY * 7;\n\n// don't put it in the _cacache folder, just in npm's cache\nconst lastCheckedFile = npm => resolve(npm.flatOptions.cache, '../_update-notifier-last-checked');\nconst checkTimeout = async (npm, duration) => {\n  const t = new Date(Date.now() - duration);\n  const f = lastCheckedFile(npm);\n  // if we don't have a file, then definitely check it.\n  const st = await stat(f).catch(() => ({\n    mtime: t - 1\n  }));\n  return t > st.mtime;\n};\nconst updateNotifier = async (npm, spec = 'latest') => {\n  // never check for updates in CI, when updating npm already, or opted out\n  if (!npm.config.get('update-notifier') || isGlobalNpmUpdate(npm) || ciDetect()) return null;\n\n  // if we're on a prerelease train, then updates are coming fast\n  // check for a new one daily.  otherwise, weekly.\n  const {\n    version\n  } = npm;\n  const current = semver.parse(version);\n\n  // if we're on a beta train, always get the next beta\n  if (current.prerelease.length) spec = `^${version}`;\n\n  // while on a beta train, get updates daily\n  const duration = spec !== 'latest' ? DAILY : WEEKLY;\n\n  // if we've already checked within the specified duration, don't check again\n  if (!(await checkTimeout(npm, duration))) return null;\n\n  // if they're currently using a prerelease, nudge to the next prerelease\n  // otherwise, nudge to latest.\n  const useColor = npm.log.useColor();\n  const mani = await pacote.manifest(`npm@${spec}`, {\n    // always prefer latest, even if doing --tag=whatever on the cmd\n    defaultTag: 'latest',\n    ...npm.flatOptions\n  }).catch(() => null);\n\n  // if pacote failed, give up\n  if (!mani) return null;\n  const latest = mani.version;\n\n  // if the current version is *greater* than latest, we're on a 'next'\n  // and should get the updates from that release train.\n  // Note that this isn't another http request over the network, because\n  // the packument will be cached by pacote from previous request.\n  if (semver.gt(version, latest) && spec === 'latest') return updateNotifier(npm, `^${version}`);\n\n  // if we already have something >= the desired spec, then we're done\n  if (semver.gte(version, latest)) return null;\n\n  // ok!  notify the user about this update they should get.\n  // The message is saved for printing at process exit so it will not get\n  // lost in any other messages being printed as part of the command.\n  const update = semver.parse(mani.version);\n  const type = update.major !== current.major ? 'major' : update.minor !== current.minor ? 'minor' : update.patch !== current.patch ? 'patch' : 'prerelease';\n  const typec = !useColor ? type : type === 'major' ? chalk.red(type) : type === 'minor' ? chalk.yellow(type) : chalk.green(type);\n  const oldc = !useColor ? current : chalk.red(current);\n  const latestc = !useColor ? latest : chalk.green(latest);\n  const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`;\n  const changelogc = !useColor ? `<${changelog}>` : chalk.cyan(changelog);\n  const cmd = `npm install -g npm@${latest}`;\n  const cmdc = !useColor ? `\\`${cmd}\\`` : chalk.green(cmd);\n  const message = `\\nNew ${typec} version of npm available! ` + `${oldc} -> ${latestc}\\n` + `Changelog: ${changelogc}\\n` + `Run ${cmdc} to update!\\n`;\n  return message;\n};\n\n// only update the notification timeout if we actually finished checking\nmodule.exports = async npm => {\n  const notification = await updateNotifier(npm);\n  // intentional.  do not await this.  it's a best-effort update.  if this\n  // fails, it's ok.  might be using /dev/null as the cache or something weird\n  // like that.\n  writeFile(lastCheckedFile(npm), '').catch(() => {});\n  npm.updateNotification = notification;\n};","map":{"version":3,"names":["pacote","require","ciDetect","semver","chalk","promisify","stat","writeFile","resolve","isGlobalNpmUpdate","npm","flatOptions","global","includes","command","argv","some","arg","test","DAILY","WEEKLY","lastCheckedFile","cache","checkTimeout","duration","t","Date","now","f","st","catch","mtime","updateNotifier","spec","config","get","version","current","parse","prerelease","length","useColor","log","mani","manifest","defaultTag","latest","gt","gte","update","type","major","minor","patch","typec","red","yellow","green","oldc","latestc","changelog","changelogc","cyan","cmd","cmdc","message","module","exports","notification","updateNotification"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/update-notifier.js"],"sourcesContent":["// print a banner telling the user to upgrade npm to latest\n// but not in CI, and not if we're doing that already.\n// Check daily for betas, and weekly otherwise.\n\nconst pacote = require('pacote')\nconst ciDetect = require('@npmcli/ci-detect')\nconst semver = require('semver')\nconst chalk = require('chalk')\nconst { promisify } = require('util')\nconst stat = promisify(require('fs').stat)\nconst writeFile = promisify(require('fs').writeFile)\nconst { resolve } = require('path')\n\nconst isGlobalNpmUpdate = npm => {\n  return npm.flatOptions.global &&\n    ['install', 'update'].includes(npm.command) &&\n    npm.argv.some(arg => /^npm(@|$)/.test(arg))\n}\n\n// update check frequency\nconst DAILY = 1000 * 60 * 60 * 24\nconst WEEKLY = DAILY * 7\n\n// don't put it in the _cacache folder, just in npm's cache\nconst lastCheckedFile = npm =>\n  resolve(npm.flatOptions.cache, '../_update-notifier-last-checked')\n\nconst checkTimeout = async (npm, duration) => {\n  const t = new Date(Date.now() - duration)\n  const f = lastCheckedFile(npm)\n  // if we don't have a file, then definitely check it.\n  const st = await stat(f).catch(() => ({ mtime: t - 1 }))\n  return t > st.mtime\n}\n\nconst updateNotifier = async (npm, spec = 'latest') => {\n  // never check for updates in CI, when updating npm already, or opted out\n  if (!npm.config.get('update-notifier') ||\n      isGlobalNpmUpdate(npm) ||\n      ciDetect())\n    return null\n\n  // if we're on a prerelease train, then updates are coming fast\n  // check for a new one daily.  otherwise, weekly.\n  const { version } = npm\n  const current = semver.parse(version)\n\n  // if we're on a beta train, always get the next beta\n  if (current.prerelease.length)\n    spec = `^${version}`\n\n  // while on a beta train, get updates daily\n  const duration = spec !== 'latest' ? DAILY : WEEKLY\n\n  // if we've already checked within the specified duration, don't check again\n  if (!(await checkTimeout(npm, duration)))\n    return null\n\n  // if they're currently using a prerelease, nudge to the next prerelease\n  // otherwise, nudge to latest.\n  const useColor = npm.log.useColor()\n\n  const mani = await pacote.manifest(`npm@${spec}`, {\n    // always prefer latest, even if doing --tag=whatever on the cmd\n    defaultTag: 'latest',\n    ...npm.flatOptions,\n  }).catch(() => null)\n\n  // if pacote failed, give up\n  if (!mani)\n    return null\n\n  const latest = mani.version\n\n  // if the current version is *greater* than latest, we're on a 'next'\n  // and should get the updates from that release train.\n  // Note that this isn't another http request over the network, because\n  // the packument will be cached by pacote from previous request.\n  if (semver.gt(version, latest) && spec === 'latest')\n    return updateNotifier(npm, `^${version}`)\n\n  // if we already have something >= the desired spec, then we're done\n  if (semver.gte(version, latest))\n    return null\n\n  // ok!  notify the user about this update they should get.\n  // The message is saved for printing at process exit so it will not get\n  // lost in any other messages being printed as part of the command.\n  const update = semver.parse(mani.version)\n  const type = update.major !== current.major ? 'major'\n    : update.minor !== current.minor ? 'minor'\n    : update.patch !== current.patch ? 'patch'\n    : 'prerelease'\n  const typec = !useColor ? type\n    : type === 'major' ? chalk.red(type)\n    : type === 'minor' ? chalk.yellow(type)\n    : chalk.green(type)\n  const oldc = !useColor ? current : chalk.red(current)\n  const latestc = !useColor ? latest : chalk.green(latest)\n  const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`\n  const changelogc = !useColor ? `<${changelog}>` : chalk.cyan(changelog)\n  const cmd = `npm install -g npm@${latest}`\n  const cmdc = !useColor ? `\\`${cmd}\\`` : chalk.green(cmd)\n  const message = `\\nNew ${typec} version of npm available! ` +\n    `${oldc} -> ${latestc}\\n` +\n    `Changelog: ${changelogc}\\n` +\n    `Run ${cmdc} to update!\\n`\n\n  return message\n}\n\n// only update the notification timeout if we actually finished checking\nmodule.exports = async npm => {\n  const notification = await updateNotifier(npm)\n  // intentional.  do not await this.  it's a best-effort update.  if this\n  // fails, it's ok.  might be using /dev/null as the cache or something weird\n  // like that.\n  writeFile(lastCheckedFile(npm), '').catch(() => {})\n  npm.updateNotification = notification\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const libexec = require('libnpmexec');\nconst BaseCommand = require('./base-command.js');\nconst getLocationMsg = require('./exec/get-workspace-location-msg.js');\n\n// it's like this:\n//\n// npm x pkg@version <-- runs the bin named \"pkg\" or the only bin if only 1\n//\n// { name: 'pkg', bin: { pkg: 'pkg.js', foo: 'foo.js' }} <-- run pkg\n// { name: 'pkg', bin: { foo: 'foo.js' }} <-- run foo?\n//\n// npm x -p pkg@version -- foo\n//\n// npm x -p pkg@version -- foo --registry=/dev/null\n//\n// const pkg = npm.config.get('package') || getPackageFrom(args[0])\n// const cmd = getCommand(pkg, args[0])\n// --> npm x -c 'cmd ...args.slice(1)'\n//\n// we've resolved cmd and args, and escaped them properly, and installed the\n// relevant packages.\n//\n// Add the ${npx install prefix}/node_modules/.bin to PATH\n//\n// pkg = readPackageJson('./package.json')\n// pkg.scripts.___npx = ${the -c arg}\n// runScript({ pkg, event: 'npx', ... })\n// process.env.npm_lifecycle_event = 'npx'\n\nclass Exec extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Run a command from a local or remote npm package';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['package', 'call', 'workspace', 'workspaces'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'exec';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['-- <pkg>[@<version>] [args...]', '--package=<pkg>[@<version>] -- <cmd> [args...]', '-c \\'<cmd> [args...]\\'', '--package=foo -c \\'<cmd> [args...]\\''];\n  }\n  exec(args, cb) {\n    const path = this.npm.localPrefix;\n    const runPath = process.cwd();\n    this._exec(args, {\n      path,\n      runPath\n    }).then(() => cb()).catch(cb);\n  }\n  execWorkspaces(args, filters, cb) {\n    this._execWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n\n  // When commands go async and we can dump the boilerplate exec methods this\n  // can be named correctly\n  async _exec(_args, {\n    locationMsg,\n    path,\n    runPath\n  }) {\n    const args = [..._args];\n    const call = this.npm.config.get('call');\n    const {\n      flatOptions,\n      localBin,\n      log,\n      globalBin\n    } = this.npm;\n    const output = (...outputArgs) => this.npm.output(...outputArgs);\n    const scriptShell = this.npm.config.get('script-shell') || undefined;\n    const packages = this.npm.config.get('package');\n    const yes = this.npm.config.get('yes');\n    if (call && _args.length) throw this.usage;\n    return libexec({\n      ...flatOptions,\n      args,\n      call,\n      localBin,\n      locationMsg,\n      log,\n      globalBin,\n      output,\n      packages,\n      path,\n      runPath,\n      scriptShell,\n      yes\n    });\n  }\n  async _execWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n    const color = this.npm.color;\n    for (const path of this.workspacePaths) {\n      const locationMsg = await getLocationMsg({\n        color,\n        path\n      });\n      await this._exec(args, {\n        locationMsg,\n        path,\n        runPath: path\n      });\n    }\n  }\n}\nmodule.exports = Exec;","map":{"version":3,"names":["libexec","require","BaseCommand","getLocationMsg","Exec","description","params","name","usage","exec","args","cb","path","npm","localPrefix","runPath","process","cwd","_exec","then","catch","execWorkspaces","filters","_execWorkspaces","_args","locationMsg","call","config","get","flatOptions","localBin","log","globalBin","output","outputArgs","scriptShell","undefined","packages","yes","length","setWorkspaces","color","workspacePaths","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/exec.js"],"sourcesContent":["const libexec = require('libnpmexec')\nconst BaseCommand = require('./base-command.js')\nconst getLocationMsg = require('./exec/get-workspace-location-msg.js')\n\n// it's like this:\n//\n// npm x pkg@version <-- runs the bin named \"pkg\" or the only bin if only 1\n//\n// { name: 'pkg', bin: { pkg: 'pkg.js', foo: 'foo.js' }} <-- run pkg\n// { name: 'pkg', bin: { foo: 'foo.js' }} <-- run foo?\n//\n// npm x -p pkg@version -- foo\n//\n// npm x -p pkg@version -- foo --registry=/dev/null\n//\n// const pkg = npm.config.get('package') || getPackageFrom(args[0])\n// const cmd = getCommand(pkg, args[0])\n// --> npm x -c 'cmd ...args.slice(1)'\n//\n// we've resolved cmd and args, and escaped them properly, and installed the\n// relevant packages.\n//\n// Add the ${npx install prefix}/node_modules/.bin to PATH\n//\n// pkg = readPackageJson('./package.json')\n// pkg.scripts.___npx = ${the -c arg}\n// runScript({ pkg, event: 'npx', ... })\n// process.env.npm_lifecycle_event = 'npx'\n\nclass Exec extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Run a command from a local or remote npm package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['package', 'call', 'workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'exec'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      '-- <pkg>[@<version>] [args...]',\n      '--package=<pkg>[@<version>] -- <cmd> [args...]',\n      '-c \\'<cmd> [args...]\\'',\n      '--package=foo -c \\'<cmd> [args...]\\'',\n    ]\n  }\n\n  exec (args, cb) {\n    const path = this.npm.localPrefix\n    const runPath = process.cwd()\n    this._exec(args, { path, runPath }).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this._execWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  // When commands go async and we can dump the boilerplate exec methods this\n  // can be named correctly\n  async _exec (_args, { locationMsg, path, runPath }) {\n    const args = [..._args]\n    const call = this.npm.config.get('call')\n    const {\n      flatOptions,\n      localBin,\n      log,\n      globalBin,\n    } = this.npm\n    const output = (...outputArgs) => this.npm.output(...outputArgs)\n    const scriptShell = this.npm.config.get('script-shell') || undefined\n    const packages = this.npm.config.get('package')\n    const yes = this.npm.config.get('yes')\n\n    if (call && _args.length)\n      throw this.usage\n\n    return libexec({\n      ...flatOptions,\n      args,\n      call,\n      localBin,\n      locationMsg,\n      log,\n      globalBin,\n      output,\n      packages,\n      path,\n      runPath,\n      scriptShell,\n      yes,\n    })\n  }\n\n  async _execWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n    const color = this.npm.color\n\n    for (const path of this.workspacePaths) {\n      const locationMsg = await getLocationMsg({ color, path })\n      await this._exec(args, {\n        locationMsg,\n        path,\n        runPath: path,\n      })\n    }\n  }\n}\n\nmodule.exports = Exec\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
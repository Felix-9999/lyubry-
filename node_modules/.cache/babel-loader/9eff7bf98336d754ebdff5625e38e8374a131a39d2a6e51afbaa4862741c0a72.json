{"ast":null,"code":"// called with all the options already set to their defaults\n\nconst retrieveTag = require('./retrieve-tag.js');\nconst semver = require('semver');\nconst enforceClean = require('./enforce-clean.js');\nconst writeJson = require('./write-json.js');\nconst readJson = require('./read-json.js');\nconst git = require('@npmcli/git');\nconst commit = require('./commit.js');\nconst tag = require('./tag.js');\nconst runScript = require('@npmcli/run-script');\nmodule.exports = async (newversion, opts) => {\n  const {\n    path,\n    allowSameVersion,\n    gitTagVersion,\n    ignoreScripts,\n    preid,\n    pkg,\n    log\n  } = opts;\n  const {\n    valid,\n    clean,\n    inc\n  } = semver;\n  const current = pkg.version || '0.0.0';\n  const currentClean = clean(current);\n  let newV;\n  if (valid(newversion, {\n    loose: true\n  })) {\n    newV = clean(newversion, {\n      loose: true\n    });\n  } else if (newversion === 'from-git') {\n    newV = await retrieveTag(opts);\n  } else {\n    newV = inc(currentClean, newversion, {\n      loose: true\n    }, preid);\n  }\n  if (!newV) {\n    throw Object.assign(new Error('Invalid version: ' + newversion), {\n      current,\n      requested: newversion\n    });\n  }\n  if (newV === currentClean && !allowSameVersion) {\n    throw Object.assign(new Error('Version not changed'), {\n      current,\n      requested: newversion,\n      newVersion: newV\n    });\n  }\n  const isGitDir = newversion === 'from-git' || (await git.is(opts));\n\n  // ok!  now we know the new version, and the old version is in pkg\n\n  // - check if git dir is clean\n  // returns false if we should not keep doing git stuff\n  const doGit = gitTagVersion && isGitDir && (await enforceClean(opts));\n  if (!ignoreScripts) {\n    await runScript({\n      ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'preversion',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV\n      }\n    });\n  }\n\n  // - update the files\n  pkg.version = newV;\n  delete pkg._id;\n  await writeJson(`${path}/package.json`, pkg);\n\n  // try to update shrinkwrap, but ok if this fails\n  const locks = [`${path}/package-lock.json`, `${path}/npm-shrinkwrap.json`];\n  const haveLocks = [];\n  for (const lock of locks) {\n    try {\n      const sw = await readJson(lock);\n      sw.version = newV;\n      if (sw.packages && sw.packages['']) {\n        sw.packages[''].version = newV;\n      }\n      await writeJson(lock, sw);\n      haveLocks.push(lock);\n    } catch (er) {}\n  }\n  if (!ignoreScripts) {\n    await runScript({\n      ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'version',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV\n      }\n    });\n  }\n  if (doGit) {\n    // - git add, git commit, git tag\n    await git.spawn(['add', `${path}/package.json`], opts);\n    // sometimes people .gitignore their lockfiles\n    for (const lock of haveLocks) {\n      await git.spawn(['add', lock], opts).catch(() => {});\n    }\n    await commit(newV, opts);\n    await tag(newV, opts);\n  } else {\n    log.verbose('version', 'Not tagging: not in a git repo or no git cmd');\n  }\n  if (!ignoreScripts) {\n    await runScript({\n      ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'postversion',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV\n      }\n    });\n  }\n  return newV;\n};","map":{"version":3,"names":["retrieveTag","require","semver","enforceClean","writeJson","readJson","git","commit","tag","runScript","module","exports","newversion","opts","path","allowSameVersion","gitTagVersion","ignoreScripts","preid","pkg","log","valid","clean","inc","current","version","currentClean","newV","loose","Object","assign","Error","requested","newVersion","isGitDir","is","doGit","stdio","event","banner","level","env","npm_old_version","npm_new_version","_id","locks","haveLocks","lock","sw","packages","push","er","spawn","catch","verbose"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmversion/lib/version.js"],"sourcesContent":["// called with all the options already set to their defaults\n\nconst retrieveTag = require('./retrieve-tag.js')\nconst semver = require('semver')\nconst enforceClean = require('./enforce-clean.js')\nconst writeJson = require('./write-json.js')\nconst readJson = require('./read-json.js')\nconst git = require('@npmcli/git')\nconst commit = require('./commit.js')\nconst tag = require('./tag.js')\n\nconst runScript = require('@npmcli/run-script')\n\nmodule.exports = async (newversion, opts) => {\n  const {\n    path,\n    allowSameVersion,\n    gitTagVersion,\n    ignoreScripts,\n    preid,\n    pkg,\n    log\n  } = opts\n\n  const { valid, clean, inc } = semver\n  const current = pkg.version || '0.0.0'\n  const currentClean = clean(current)\n\n  let newV\n  if (valid(newversion, { loose: true })) {\n    newV = clean(newversion, { loose: true })\n  } else if (newversion === 'from-git') {\n    newV = await retrieveTag(opts)\n  } else {\n    newV = inc(currentClean, newversion, { loose: true }, preid)\n  }\n\n  if (!newV) {\n    throw Object.assign(new Error('Invalid version: ' + newversion), {\n      current,\n      requested: newversion\n    })\n  }\n\n  if (newV === currentClean && !allowSameVersion) {\n    throw Object.assign(new Error('Version not changed'), {\n      current,\n      requested: newversion,\n      newVersion: newV\n    })\n  }\n\n  const isGitDir = newversion === 'from-git' || await git.is(opts)\n\n  // ok!  now we know the new version, and the old version is in pkg\n\n  // - check if git dir is clean\n  // returns false if we should not keep doing git stuff\n  const doGit = gitTagVersion && isGitDir && await enforceClean(opts)\n\n  if (!ignoreScripts) {\n    await runScript({\n      ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'preversion',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV\n      }\n    })\n  }\n\n  // - update the files\n  pkg.version = newV\n  delete pkg._id\n  await writeJson(`${path}/package.json`, pkg)\n\n  // try to update shrinkwrap, but ok if this fails\n  const locks = [`${path}/package-lock.json`, `${path}/npm-shrinkwrap.json`]\n  const haveLocks = []\n  for (const lock of locks) {\n    try {\n      const sw = await readJson(lock)\n      sw.version = newV\n      if (sw.packages && sw.packages['']) {\n        sw.packages[''].version = newV\n      }\n      await writeJson(lock, sw)\n      haveLocks.push(lock)\n    } catch (er) {}\n  }\n\n  if (!ignoreScripts) {\n    await runScript({\n      ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'version',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV\n      }\n    })\n  }\n\n  if (doGit) {\n    // - git add, git commit, git tag\n    await git.spawn(['add', `${path}/package.json`], opts)\n    // sometimes people .gitignore their lockfiles\n    for (const lock of haveLocks) {\n      await git.spawn(['add', lock], opts).catch(() => {})\n    }\n    await commit(newV, opts)\n    await tag(newV, opts)\n  } else { log.verbose('version', 'Not tagging: not in a git repo or no git cmd') }\n\n  if (!ignoreScripts) {\n    await runScript({\n      ...opts,\n      pkg,\n      stdio: 'inherit',\n      event: 'postversion',\n      banner: log.level !== 'silent',\n      env: {\n        npm_old_version: current,\n        npm_new_version: newV\n      }\n    })\n  }\n\n  return newV\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,YAAY,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAClD,MAAMG,SAAS,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;AAC1C,MAAMK,GAAG,GAAGL,OAAO,CAAC,aAAa,CAAC;AAClC,MAAMM,MAAM,GAAGN,OAAO,CAAC,aAAa,CAAC;AACrC,MAAMO,GAAG,GAAGP,OAAO,CAAC,UAAU,CAAC;AAE/B,MAAMQ,SAAS,GAAGR,OAAO,CAAC,oBAAoB,CAAC;AAE/CS,MAAM,CAACC,OAAO,GAAG,OAAOC,UAAU,EAAEC,IAAI,KAAK;EAC3C,MAAM;IACJC,IAAI;IACJC,gBAAgB;IAChBC,aAAa;IACbC,aAAa;IACbC,KAAK;IACLC,GAAG;IACHC;EACF,CAAC,GAAGP,IAAI;EAER,MAAM;IAAEQ,KAAK;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGrB,MAAM;EACpC,MAAMsB,OAAO,GAAGL,GAAG,CAACM,OAAO,IAAI,OAAO;EACtC,MAAMC,YAAY,GAAGJ,KAAK,CAACE,OAAO,CAAC;EAEnC,IAAIG,IAAI;EACR,IAAIN,KAAK,CAACT,UAAU,EAAE;IAAEgB,KAAK,EAAE;EAAK,CAAC,CAAC,EAAE;IACtCD,IAAI,GAAGL,KAAK,CAACV,UAAU,EAAE;MAAEgB,KAAK,EAAE;IAAK,CAAC,CAAC;EAC3C,CAAC,MAAM,IAAIhB,UAAU,KAAK,UAAU,EAAE;IACpCe,IAAI,GAAG,MAAM3B,WAAW,CAACa,IAAI,CAAC;EAChC,CAAC,MAAM;IACLc,IAAI,GAAGJ,GAAG,CAACG,YAAY,EAAEd,UAAU,EAAE;MAAEgB,KAAK,EAAE;IAAK,CAAC,EAAEV,KAAK,CAAC;EAC9D;EAEA,IAAI,CAACS,IAAI,EAAE;IACT,MAAME,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,mBAAmB,GAAGnB,UAAU,CAAC,EAAE;MAC/DY,OAAO;MACPQ,SAAS,EAAEpB;IACb,CAAC,CAAC;EACJ;EAEA,IAAIe,IAAI,KAAKD,YAAY,IAAI,CAACX,gBAAgB,EAAE;IAC9C,MAAMc,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,qBAAqB,CAAC,EAAE;MACpDP,OAAO;MACPQ,SAAS,EAAEpB,UAAU;MACrBqB,UAAU,EAAEN;IACd,CAAC,CAAC;EACJ;EAEA,MAAMO,QAAQ,GAAGtB,UAAU,KAAK,UAAU,KAAI,MAAMN,GAAG,CAAC6B,EAAE,CAACtB,IAAI,CAAC;;EAEhE;;EAEA;EACA;EACA,MAAMuB,KAAK,GAAGpB,aAAa,IAAIkB,QAAQ,KAAI,MAAM/B,YAAY,CAACU,IAAI,CAAC;EAEnE,IAAI,CAACI,aAAa,EAAE;IAClB,MAAMR,SAAS,CAAC;MACd,GAAGI,IAAI;MACPM,GAAG;MACHkB,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,YAAY;MACnBC,MAAM,EAAEnB,GAAG,CAACoB,KAAK,KAAK,QAAQ;MAC9BC,GAAG,EAAE;QACHC,eAAe,EAAElB,OAAO;QACxBmB,eAAe,EAAEhB;MACnB;IACF,CAAC,CAAC;EACJ;;EAEA;EACAR,GAAG,CAACM,OAAO,GAAGE,IAAI;EAClB,OAAOR,GAAG,CAACyB,GAAG;EACd,MAAMxC,SAAS,CAAC,GAAGU,IAAI,eAAe,EAAEK,GAAG,CAAC;;EAE5C;EACA,MAAM0B,KAAK,GAAG,CAAC,GAAG/B,IAAI,oBAAoB,EAAE,GAAGA,IAAI,sBAAsB,CAAC;EAC1E,MAAMgC,SAAS,GAAG,EAAE;EACpB,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACxB,IAAI;MACF,MAAMG,EAAE,GAAG,MAAM3C,QAAQ,CAAC0C,IAAI,CAAC;MAC/BC,EAAE,CAACvB,OAAO,GAAGE,IAAI;MACjB,IAAIqB,EAAE,CAACC,QAAQ,IAAID,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAE;QAClCD,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACxB,OAAO,GAAGE,IAAI;MAChC;MACA,MAAMvB,SAAS,CAAC2C,IAAI,EAAEC,EAAE,CAAC;MACzBF,SAAS,CAACI,IAAI,CAACH,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOI,EAAE,EAAE,CAAC;EAChB;EAEA,IAAI,CAAClC,aAAa,EAAE;IAClB,MAAMR,SAAS,CAAC;MACd,GAAGI,IAAI;MACPM,GAAG;MACHkB,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,SAAS;MAChBC,MAAM,EAAEnB,GAAG,CAACoB,KAAK,KAAK,QAAQ;MAC9BC,GAAG,EAAE;QACHC,eAAe,EAAElB,OAAO;QACxBmB,eAAe,EAAEhB;MACnB;IACF,CAAC,CAAC;EACJ;EAEA,IAAIS,KAAK,EAAE;IACT;IACA,MAAM9B,GAAG,CAAC8C,KAAK,CAAC,CAAC,KAAK,EAAE,GAAGtC,IAAI,eAAe,CAAC,EAAED,IAAI,CAAC;IACtD;IACA,KAAK,MAAMkC,IAAI,IAAID,SAAS,EAAE;MAC5B,MAAMxC,GAAG,CAAC8C,KAAK,CAAC,CAAC,KAAK,EAAEL,IAAI,CAAC,EAAElC,IAAI,CAAC,CAACwC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IACtD;IACA,MAAM9C,MAAM,CAACoB,IAAI,EAAEd,IAAI,CAAC;IACxB,MAAML,GAAG,CAACmB,IAAI,EAAEd,IAAI,CAAC;EACvB,CAAC,MAAM;IAAEO,GAAG,CAACkC,OAAO,CAAC,SAAS,EAAE,8CAA8C,CAAC;EAAC;EAEhF,IAAI,CAACrC,aAAa,EAAE;IAClB,MAAMR,SAAS,CAAC;MACd,GAAGI,IAAI;MACPM,GAAG;MACHkB,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,aAAa;MACpBC,MAAM,EAAEnB,GAAG,CAACoB,KAAK,KAAK,QAAQ;MAC9BC,GAAG,EAAE;QACHC,eAAe,EAAElB,OAAO;QACxBmB,eAAe,EAAEhB;MACnB;IACF,CAAC,CAAC;EACJ;EAEA,OAAOA,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
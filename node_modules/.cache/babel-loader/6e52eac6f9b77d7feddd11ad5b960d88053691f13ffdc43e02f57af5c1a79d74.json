{"ast":null,"code":"const _idealTreePrune = Symbol.for('idealTreePrune');\nmodule.exports = cls => class Pruner extends cls {\n  async prune(options = {}) {\n    // allow the user to set options on the ctor as well.\n    // XXX: deprecate separate method options objects.\n    options = {\n      ...this.options,\n      ...options\n    };\n    await this.buildIdealTree(options);\n    this[_idealTreePrune]();\n    return this.reify(options);\n  }\n};","map":{"version":3,"names":["_idealTreePrune","Symbol","for","module","exports","cls","Pruner","prune","options","buildIdealTree","reify"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/arborist/pruner.js"],"sourcesContent":["const _idealTreePrune = Symbol.for('idealTreePrune')\n\nmodule.exports = cls => class Pruner extends cls {\n  async prune (options = {}) {\n    // allow the user to set options on the ctor as well.\n    // XXX: deprecate separate method options objects.\n    options = { ...this.options, ...options }\n\n    await this.buildIdealTree(options)\n\n    this[_idealTreePrune]()\n\n    return this.reify(options)\n  }\n}\n"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,MAAM,CAACC,GAAG,CAAC,gBAAgB,CAAC;AAEpDC,MAAM,CAACC,OAAO,GAAGC,GAAG,IAAI,MAAMC,MAAM,SAASD,GAAG,CAAC;EAC/C,MAAME,KAAKA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACzB;IACA;IACAA,OAAO,GAAG;MAAE,GAAG,IAAI,CAACA,OAAO;MAAE,GAAGA;IAAQ,CAAC;IAEzC,MAAM,IAAI,CAACC,cAAc,CAACD,OAAO,CAAC;IAElC,IAAI,CAACR,eAAe,CAAC,CAAC,CAAC;IAEvB,OAAO,IAAI,CAACU,KAAK,CAACF,OAAO,CAAC;EAC5B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
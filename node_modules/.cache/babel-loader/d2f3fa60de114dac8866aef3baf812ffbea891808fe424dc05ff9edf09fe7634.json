{"ast":null,"code":"// mixin implementing the audit method\n\nconst AuditReport = require('../audit-report.js');\n\n// shared with reify\nconst _global = Symbol.for('global');\nconst _workspaces = Symbol.for('workspaces');\nmodule.exports = cls => class Auditor extends cls {\n  async audit(options = {}) {\n    this.addTracker('audit');\n    if (this[_global]) {\n      throw Object.assign(new Error('`npm audit` does not support testing globals'), {\n        code: 'EAUDITGLOBAL'\n      });\n    }\n\n    // allow the user to set options on the ctor as well.\n    // XXX: deprecate separate method options objects.\n    options = {\n      ...this.options,\n      ...options\n    };\n    process.emit('time', 'audit');\n    const tree = await this.loadVirtual();\n    if (this[_workspaces] && this[_workspaces].length) {\n      options.filterSet = this.workspaceDependencySet(tree, this[_workspaces]);\n    }\n    this.auditReport = await AuditReport.load(tree, options);\n    const ret = options.fix ? this.reify(options) : this.auditReport;\n    process.emit('timeEnd', 'audit');\n    this.finishTracker('audit');\n    return ret;\n  }\n};","map":{"version":3,"names":["AuditReport","require","_global","Symbol","for","_workspaces","module","exports","cls","Auditor","audit","options","addTracker","Object","assign","Error","code","process","emit","tree","loadVirtual","length","filterSet","workspaceDependencySet","auditReport","load","ret","fix","reify","finishTracker"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/arborist/audit.js"],"sourcesContent":["// mixin implementing the audit method\n\nconst AuditReport = require('../audit-report.js')\n\n// shared with reify\nconst _global = Symbol.for('global')\nconst _workspaces = Symbol.for('workspaces')\n\nmodule.exports = cls => class Auditor extends cls {\n  async audit (options = {}) {\n    this.addTracker('audit')\n    if (this[_global]) {\n      throw Object.assign(\n        new Error('`npm audit` does not support testing globals'),\n        { code: 'EAUDITGLOBAL' }\n      )\n    }\n\n    // allow the user to set options on the ctor as well.\n    // XXX: deprecate separate method options objects.\n    options = { ...this.options, ...options }\n\n    process.emit('time', 'audit')\n    const tree = await this.loadVirtual()\n    if (this[_workspaces] && this[_workspaces].length) {\n      options.filterSet = this.workspaceDependencySet(tree, this[_workspaces])\n    }\n    this.auditReport = await AuditReport.load(tree, options)\n    const ret = options.fix ? this.reify(options) : this.auditReport\n    process.emit('timeEnd', 'audit')\n    this.finishTracker('audit')\n    return ret\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAoB,CAAC;;AAEjD;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC;AACpC,MAAMC,WAAW,GAAGF,MAAM,CAACC,GAAG,CAAC,YAAY,CAAC;AAE5CE,MAAM,CAACC,OAAO,GAAGC,GAAG,IAAI,MAAMC,OAAO,SAASD,GAAG,CAAC;EAChD,MAAME,KAAKA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACzB,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC;IACxB,IAAI,IAAI,CAACV,OAAO,CAAC,EAAE;MACjB,MAAMW,MAAM,CAACC,MAAM,CACjB,IAAIC,KAAK,CAAC,8CAA8C,CAAC,EACzD;QAAEC,IAAI,EAAE;MAAe,CACzB,CAAC;IACH;;IAEA;IACA;IACAL,OAAO,GAAG;MAAE,GAAG,IAAI,CAACA,OAAO;MAAE,GAAGA;IAAQ,CAAC;IAEzCM,OAAO,CAACC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;IAC7B,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC,CAAC;IACrC,IAAI,IAAI,CAACf,WAAW,CAAC,IAAI,IAAI,CAACA,WAAW,CAAC,CAACgB,MAAM,EAAE;MACjDV,OAAO,CAACW,SAAS,GAAG,IAAI,CAACC,sBAAsB,CAACJ,IAAI,EAAE,IAAI,CAACd,WAAW,CAAC,CAAC;IAC1E;IACA,IAAI,CAACmB,WAAW,GAAG,MAAMxB,WAAW,CAACyB,IAAI,CAACN,IAAI,EAAER,OAAO,CAAC;IACxD,MAAMe,GAAG,GAAGf,OAAO,CAACgB,GAAG,GAAG,IAAI,CAACC,KAAK,CAACjB,OAAO,CAAC,GAAG,IAAI,CAACa,WAAW;IAChEP,OAAO,CAACC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC;IAChC,IAAI,CAACW,aAAa,CAAC,OAAO,CAAC;IAC3B,OAAOH,GAAG;EACZ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
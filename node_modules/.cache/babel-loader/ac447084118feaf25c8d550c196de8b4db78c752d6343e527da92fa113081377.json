{"ast":null,"code":"const {\n  resolve\n} = require('path');\nconst Arborist = require('@npmcli/arborist');\nconst localeCompare = require('@isaacs/string-locale-compare')('en');\nconst installedDeep = async npm => {\n  const {\n    depth,\n    global,\n    prefix\n  } = npm.flatOptions;\n  const getValues = tree => [...tree.inventory.values()].filter(i => i.location !== '' && !i.isRoot).map(i => {\n    return i;\n  }).filter(i => i.depth - 1 <= depth).sort((a, b) => a.depth - b.depth || localeCompare(a.name, b.name));\n  const res = new Set();\n  const gArb = new Arborist({\n    global: true,\n    path: resolve(npm.globalDir, '..')\n  });\n  const gTree = await gArb.loadActual({\n    global: true\n  });\n  for (const node of getValues(gTree)) res.add(global ? node.name : [node.name, '-g']);\n  if (!global) {\n    const arb = new Arborist({\n      global: false,\n      path: prefix\n    });\n    const tree = await arb.loadActual();\n    for (const node of getValues(tree)) res.add(node.name);\n  }\n  return [...res];\n};\nmodule.exports = installedDeep;","map":{"version":3,"names":["resolve","require","Arborist","localeCompare","installedDeep","npm","depth","global","prefix","flatOptions","getValues","tree","inventory","values","filter","i","location","isRoot","map","sort","a","b","name","res","Set","gArb","path","globalDir","gTree","loadActual","node","add","arb","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/completion/installed-deep.js"],"sourcesContent":["const { resolve } = require('path')\nconst Arborist = require('@npmcli/arborist')\nconst localeCompare = require('@isaacs/string-locale-compare')('en')\n\nconst installedDeep = async (npm) => {\n  const {\n    depth,\n    global,\n    prefix,\n  } = npm.flatOptions\n\n  const getValues = (tree) =>\n    [...tree.inventory.values()]\n      .filter(i => i.location !== '' && !i.isRoot)\n      .map(i => {\n        return i\n      })\n      .filter(i => (i.depth - 1) <= depth)\n      .sort((a, b) => (a.depth - b.depth) || localeCompare(a.name, b.name))\n\n  const res = new Set()\n  const gArb = new Arborist({ global: true, path: resolve(npm.globalDir, '..') })\n  const gTree = await gArb.loadActual({ global: true })\n\n  for (const node of getValues(gTree))\n    res.add(global ? node.name : [node.name, '-g'])\n\n  if (!global) {\n    const arb = new Arborist({ global: false, path: prefix })\n    const tree = await arb.loadActual()\n    for (const node of getValues(tree))\n      res.add(node.name)\n  }\n\n  return [...res]\n}\n\nmodule.exports = installedDeep\n"],"mappings":"AAAA,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACnC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAME,aAAa,GAAGF,OAAO,CAAC,+BAA+B,CAAC,CAAC,IAAI,CAAC;AAEpE,MAAMG,aAAa,GAAG,MAAOC,GAAG,IAAK;EACnC,MAAM;IACJC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,GAAG,CAACI,WAAW;EAEnB,MAAMC,SAAS,GAAIC,IAAI,IACrB,CAAC,GAAGA,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,CAAC,CAAC,CACzBC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAK,EAAE,IAAI,CAACD,CAAC,CAACE,MAAM,CAAC,CAC3CC,GAAG,CAACH,CAAC,IAAI;IACR,OAAOA,CAAC;EACV,CAAC,CAAC,CACDD,MAAM,CAACC,CAAC,IAAKA,CAAC,CAACT,KAAK,GAAG,CAAC,IAAKA,KAAK,CAAC,CACnCa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACd,KAAK,GAAGe,CAAC,CAACf,KAAK,IAAKH,aAAa,CAACiB,CAAC,CAACE,IAAI,EAAED,CAAC,CAACC,IAAI,CAAC,CAAC;EAEzE,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrB,MAAMC,IAAI,GAAG,IAAIvB,QAAQ,CAAC;IAAEK,MAAM,EAAE,IAAI;IAAEmB,IAAI,EAAE1B,OAAO,CAACK,GAAG,CAACsB,SAAS,EAAE,IAAI;EAAE,CAAC,CAAC;EAC/E,MAAMC,KAAK,GAAG,MAAMH,IAAI,CAACI,UAAU,CAAC;IAAEtB,MAAM,EAAE;EAAK,CAAC,CAAC;EAErD,KAAK,MAAMuB,IAAI,IAAIpB,SAAS,CAACkB,KAAK,CAAC,EACjCL,GAAG,CAACQ,GAAG,CAACxB,MAAM,GAAGuB,IAAI,CAACR,IAAI,GAAG,CAACQ,IAAI,CAACR,IAAI,EAAE,IAAI,CAAC,CAAC;EAEjD,IAAI,CAACf,MAAM,EAAE;IACX,MAAMyB,GAAG,GAAG,IAAI9B,QAAQ,CAAC;MAAEK,MAAM,EAAE,KAAK;MAAEmB,IAAI,EAAElB;IAAO,CAAC,CAAC;IACzD,MAAMG,IAAI,GAAG,MAAMqB,GAAG,CAACH,UAAU,CAAC,CAAC;IACnC,KAAK,MAAMC,IAAI,IAAIpB,SAAS,CAACC,IAAI,CAAC,EAChCY,GAAG,CAACQ,GAAG,CAACD,IAAI,CAACR,IAAI,CAAC;EACtB;EAEA,OAAO,CAAC,GAAGC,GAAG,CAAC;AACjB,CAAC;AAEDU,MAAM,CAACC,OAAO,GAAG9B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
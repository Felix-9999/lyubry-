{"ast":null,"code":"'use strict';\n\n// Taken from https://github.com/request/request/blob/212570b/lib/getProxyFromURI.js\nconst url = require('url');\nfunction formatHostname(hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase();\n}\nfunction parseNoProxyZone(zone) {\n  zone = zone.trim().toLowerCase();\n  var zoneParts = zone.split(':', 2);\n  var zoneHost = formatHostname(zoneParts[0]);\n  var zonePort = zoneParts[1];\n  var hasPort = zone.indexOf(':') > -1;\n  return {\n    hostname: zoneHost,\n    port: zonePort,\n    hasPort: hasPort\n  };\n}\nfunction uriInNoProxy(uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80');\n  var hostname = formatHostname(uri.hostname);\n  var noProxyList = noProxy.split(',');\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname);\n    var hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;\n    if (noProxyZone.hasPort) {\n      return port === noProxyZone.port && hostnameMatched;\n    }\n    return hostnameMatched;\n  });\n}\nfunction getProxyFromURI(gyp, env, uri) {\n  // If a string URI/URL was given, parse it into a URL object\n  if (typeof uri === 'string') {\n    // eslint-disable-next-line\n    uri = url.parse(uri);\n  }\n\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: https://lynx.invisible-island.net/lynx2.8.7/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = gyp.opts.noproxy || env.NO_PROXY || env.no_proxy || env.npm_config_noproxy || '';\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null;\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null;\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return gyp.opts.proxy || env.HTTP_PROXY || env.http_proxy || env.npm_config_proxy || null;\n  }\n  if (uri.protocol === 'https:') {\n    return gyp.opts.proxy || env.HTTPS_PROXY || env.https_proxy || env.HTTP_PROXY || env.http_proxy || env.npm_config_proxy || null;\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null;\n}\nmodule.exports = getProxyFromURI;","map":{"version":3,"names":["url","require","formatHostname","hostname","replace","toLowerCase","parseNoProxyZone","zone","trim","zoneParts","split","zoneHost","zonePort","hasPort","indexOf","port","uriInNoProxy","uri","noProxy","protocol","noProxyList","map","some","noProxyZone","isMatchedAt","hostnameMatched","length","getProxyFromURI","gyp","env","parse","opts","noproxy","NO_PROXY","no_proxy","npm_config_noproxy","proxy","HTTP_PROXY","http_proxy","npm_config_proxy","HTTPS_PROXY","https_proxy","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/node-gyp/lib/proxy.js"],"sourcesContent":["'use strict'\n// Taken from https://github.com/request/request/blob/212570b/lib/getProxyFromURI.js\n\nconst url = require('url')\n\nfunction formatHostname (hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone (zone) {\n  zone = zone.trim().toLowerCase()\n\n  var zoneParts = zone.split(':', 2)\n  var zoneHost = formatHostname(zoneParts[0])\n  var zonePort = zoneParts[1]\n  var hasPort = zone.indexOf(':') > -1\n\n  return { hostname: zoneHost, port: zonePort, hasPort: hasPort }\n}\n\nfunction uriInNoProxy (uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  var hostname = formatHostname(uri.hostname)\n  var noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    var hostnameMatched = (\n      isMatchedAt > -1 &&\n        (isMatchedAt === hostname.length - noProxyZone.hostname.length)\n    )\n\n    if (noProxyZone.hasPort) {\n      return (port === noProxyZone.port) && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromURI (gyp, env, uri) {\n  // If a string URI/URL was given, parse it into a URL object\n  if (typeof uri === 'string') {\n    // eslint-disable-next-line\n    uri = url.parse(uri)\n  }\n\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: https://lynx.invisible-island.net/lynx2.8.7/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = gyp.opts.noproxy || env.NO_PROXY || env.no_proxy || env.npm_config_noproxy || ''\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return gyp.opts.proxy ||\n      env.HTTP_PROXY ||\n      env.http_proxy ||\n      env.npm_config_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return gyp.opts.proxy ||\n      env.HTTPS_PROXY ||\n      env.https_proxy ||\n      env.HTTP_PROXY ||\n      env.http_proxy ||\n      env.npm_config_proxy || null\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null\n}\n\nmodule.exports = getProxyFromURI\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const {\n  resolve\n} = require('path');\nconst Arborist = require('@npmcli/arborist');\nconst npa = require('npm-package-arg');\nconst semver = require('semver');\nconst completion = require('./utils/completion/installed-deep.js');\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\nclass Rebuild extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Rebuild a package';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'rebuild';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['global', 'bin-links', 'ignore-scripts', ...super.params];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[[<@scope>/]<name>[@<version>] ...]'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n  exec(args, cb) {\n    this.rebuild(args).then(() => cb()).catch(cb);\n  }\n  async rebuild(args) {\n    const globalTop = resolve(this.npm.globalDir, '..');\n    const where = this.npm.config.get('global') ? globalTop : this.npm.prefix;\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: where\n      // TODO when extending ReifyCmd\n      // workspaces: this.workspaceNames,\n    });\n    if (args.length) {\n      // get the set of nodes matching the name that we want rebuilt\n      const tree = await arb.loadActual();\n      const specs = args.map(arg => {\n        const spec = npa(arg);\n        if (spec.type === 'tag' && spec.rawSpec === '') return spec;\n        if (spec.type !== 'range' && spec.type !== 'version' && spec.type !== 'directory') throw new Error('`npm rebuild` only supports SemVer version/range specifiers');\n        return spec;\n      });\n      const nodes = tree.inventory.filter(node => this.isNode(specs, node));\n      await arb.rebuild({\n        nodes\n      });\n    } else await arb.rebuild();\n    this.npm.output('rebuilt dependencies successfully');\n  }\n  isNode(specs, node) {\n    return specs.some(spec => {\n      if (spec.type === 'directory') return node.path === spec.fetchSpec;\n      if (spec.name !== node.name) return false;\n      if (spec.rawSpec === '' || spec.rawSpec === '*') return true;\n      const {\n        version\n      } = node.package;\n      // TODO: add tests for a package with missing version\n      return semver.satisfies(version, spec.fetchSpec);\n    });\n  }\n}\nmodule.exports = Rebuild;","map":{"version":3,"names":["resolve","require","Arborist","npa","semver","completion","ArboristWorkspaceCmd","Rebuild","description","name","params","usage","opts","npm","exec","args","cb","rebuild","then","catch","globalTop","globalDir","where","config","get","prefix","arb","flatOptions","path","length","tree","loadActual","specs","map","arg","spec","type","rawSpec","Error","nodes","inventory","filter","node","isNode","output","some","fetchSpec","version","package","satisfies","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/rebuild.js"],"sourcesContent":["const { resolve } = require('path')\nconst Arborist = require('@npmcli/arborist')\nconst npa = require('npm-package-arg')\nconst semver = require('semver')\nconst completion = require('./utils/completion/installed-deep.js')\n\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\nclass Rebuild extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Rebuild a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'rebuild'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'global',\n      'bin-links',\n      'ignore-scripts',\n      ...super.params,\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[[<@scope>/]<name>[@<version>] ...]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  exec (args, cb) {\n    this.rebuild(args).then(() => cb()).catch(cb)\n  }\n\n  async rebuild (args) {\n    const globalTop = resolve(this.npm.globalDir, '..')\n    const where = this.npm.config.get('global') ? globalTop : this.npm.prefix\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: where,\n      // TODO when extending ReifyCmd\n      // workspaces: this.workspaceNames,\n    })\n\n    if (args.length) {\n      // get the set of nodes matching the name that we want rebuilt\n      const tree = await arb.loadActual()\n      const specs = args.map(arg => {\n        const spec = npa(arg)\n        if (spec.type === 'tag' && spec.rawSpec === '')\n          return spec\n\n        if (spec.type !== 'range' && spec.type !== 'version' && spec.type !== 'directory')\n          throw new Error('`npm rebuild` only supports SemVer version/range specifiers')\n\n        return spec\n      })\n      const nodes = tree.inventory.filter(node => this.isNode(specs, node))\n\n      await arb.rebuild({ nodes })\n    } else\n      await arb.rebuild()\n\n    this.npm.output('rebuilt dependencies successfully')\n  }\n\n  isNode (specs, node) {\n    return specs.some(spec => {\n      if (spec.type === 'directory')\n        return node.path === spec.fetchSpec\n\n      if (spec.name !== node.name)\n        return false\n\n      if (spec.rawSpec === '' || spec.rawSpec === '*')\n        return true\n\n      const { version } = node.package\n      // TODO: add tests for a package with missing version\n      return semver.satisfies(version, spec.fetchSpec)\n    })\n  }\n}\nmodule.exports = Rebuild\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
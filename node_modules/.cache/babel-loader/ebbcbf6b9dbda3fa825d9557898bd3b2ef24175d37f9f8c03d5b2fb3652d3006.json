{"ast":null,"code":"// Base class for npm.commands[cmd]\nconst usageUtil = require('./utils/usage.js');\nconst ConfigDefinitions = require('./utils/config/definitions.js');\nconst getWorkspaces = require('./workspaces/get-workspaces.js');\nclass BaseCommand {\n  constructor(npm) {\n    this.wrapWidth = 80;\n    this.npm = npm;\n    this.workspaces = null;\n    this.workspacePaths = null;\n  }\n  get name() {\n    return this.constructor.name;\n  }\n  get description() {\n    return this.constructor.description;\n  }\n  get usage() {\n    let usage = `npm ${this.constructor.name}\\n\\n`;\n    if (this.constructor.description) usage = `${usage}${this.constructor.description}\\n\\n`;\n    usage = `${usage}Usage:\\n`;\n    if (!this.constructor.usage) usage = `${usage}npm ${this.constructor.name}`;else usage = `${usage}${this.constructor.usage.map(u => `npm ${this.constructor.name} ${u}`).join('\\n')}`;\n    if (this.constructor.params) usage = `${usage}\\n\\nOptions:\\n${this.wrappedParams}`;\n\n    // Mostly this just appends aliases, this could be more clear\n    usage = usageUtil(this.constructor.name, usage);\n    usage = `${usage}\\n\\nRun \"npm help ${this.constructor.name}\" for more info`;\n    return usage;\n  }\n  get wrappedParams() {\n    let results = '';\n    let line = '';\n    for (const param of this.constructor.params) {\n      const usage = `[${ConfigDefinitions[param].usage}]`;\n      if (line.length && line.length + usage.length > this.wrapWidth) {\n        results = [results, line].filter(Boolean).join('\\n');\n        line = '';\n      }\n      line = [line, usage].filter(Boolean).join(' ');\n    }\n    results = [results, line].filter(Boolean).join('\\n');\n    return results;\n  }\n  usageError(msg) {\n    if (!msg) {\n      return Object.assign(new Error(`\\nUsage: ${this.usage}`), {\n        code: 'EUSAGE'\n      });\n    }\n    return Object.assign(new Error(`\\nUsage: ${msg}\\n\\n${this.usage}`), {\n      code: 'EUSAGE'\n    });\n  }\n  execWorkspaces(args, filters, cb) {\n    throw Object.assign(new Error('This command does not support workspaces.'), {\n      code: 'ENOWORKSPACES'\n    });\n  }\n  async setWorkspaces(filters) {\n    const ws = await getWorkspaces(filters, {\n      path: this.npm.localPrefix\n    });\n    this.workspaces = ws;\n    this.workspaceNames = [...ws.keys()];\n    this.workspacePaths = [...ws.values()];\n  }\n}\nmodule.exports = BaseCommand;","map":{"version":3,"names":["usageUtil","require","ConfigDefinitions","getWorkspaces","BaseCommand","constructor","npm","wrapWidth","workspaces","workspacePaths","name","description","usage","map","u","join","params","wrappedParams","results","line","param","length","filter","Boolean","usageError","msg","Object","assign","Error","code","execWorkspaces","args","filters","cb","setWorkspaces","ws","path","localPrefix","workspaceNames","keys","values","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/base-command.js"],"sourcesContent":["// Base class for npm.commands[cmd]\nconst usageUtil = require('./utils/usage.js')\nconst ConfigDefinitions = require('./utils/config/definitions.js')\nconst getWorkspaces = require('./workspaces/get-workspaces.js')\n\nclass BaseCommand {\n  constructor (npm) {\n    this.wrapWidth = 80\n    this.npm = npm\n    this.workspaces = null\n    this.workspacePaths = null\n  }\n\n  get name () {\n    return this.constructor.name\n  }\n\n  get description () {\n    return this.constructor.description\n  }\n\n  get usage () {\n    let usage = `npm ${this.constructor.name}\\n\\n`\n    if (this.constructor.description)\n      usage = `${usage}${this.constructor.description}\\n\\n`\n\n    usage = `${usage}Usage:\\n`\n    if (!this.constructor.usage)\n      usage = `${usage}npm ${this.constructor.name}`\n    else\n      usage = `${usage}${this.constructor.usage.map(u => `npm ${this.constructor.name} ${u}`).join('\\n')}`\n\n    if (this.constructor.params)\n      usage = `${usage}\\n\\nOptions:\\n${this.wrappedParams}`\n\n    // Mostly this just appends aliases, this could be more clear\n    usage = usageUtil(this.constructor.name, usage)\n    usage = `${usage}\\n\\nRun \"npm help ${this.constructor.name}\" for more info`\n    return usage\n  }\n\n  get wrappedParams () {\n    let results = ''\n    let line = ''\n\n    for (const param of this.constructor.params) {\n      const usage = `[${ConfigDefinitions[param].usage}]`\n      if (line.length && (line.length + usage.length) > this.wrapWidth) {\n        results = [results, line].filter(Boolean).join('\\n')\n        line = ''\n      }\n      line = [line, usage].filter(Boolean).join(' ')\n    }\n    results = [results, line].filter(Boolean).join('\\n')\n    return results\n  }\n\n  usageError (msg) {\n    if (!msg) {\n      return Object.assign(new Error(`\\nUsage: ${this.usage}`), {\n        code: 'EUSAGE',\n      })\n    }\n\n    return Object.assign(new Error(`\\nUsage: ${msg}\\n\\n${this.usage}`), {\n      code: 'EUSAGE',\n    })\n  }\n\n  execWorkspaces (args, filters, cb) {\n    throw Object.assign(\n      new Error('This command does not support workspaces.'),\n      { code: 'ENOWORKSPACES' }\n    )\n  }\n\n  async setWorkspaces (filters) {\n    const ws = await getWorkspaces(filters, { path: this.npm.localPrefix })\n    this.workspaces = ws\n    this.workspaceNames = [...ws.keys()]\n    this.workspacePaths = [...ws.values()]\n  }\n}\nmodule.exports = BaseCommand\n"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AAClE,MAAME,aAAa,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AAE/D,MAAMG,WAAW,CAAC;EAChBC,WAAWA,CAAEC,GAAG,EAAE;IAChB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACE,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,cAAc,GAAG,IAAI;EAC5B;EAEA,IAAIC,IAAIA,CAAA,EAAI;IACV,OAAO,IAAI,CAACL,WAAW,CAACK,IAAI;EAC9B;EAEA,IAAIC,WAAWA,CAAA,EAAI;IACjB,OAAO,IAAI,CAACN,WAAW,CAACM,WAAW;EACrC;EAEA,IAAIC,KAAKA,CAAA,EAAI;IACX,IAAIA,KAAK,GAAG,OAAO,IAAI,CAACP,WAAW,CAACK,IAAI,MAAM;IAC9C,IAAI,IAAI,CAACL,WAAW,CAACM,WAAW,EAC9BC,KAAK,GAAG,GAAGA,KAAK,GAAG,IAAI,CAACP,WAAW,CAACM,WAAW,MAAM;IAEvDC,KAAK,GAAG,GAAGA,KAAK,UAAU;IAC1B,IAAI,CAAC,IAAI,CAACP,WAAW,CAACO,KAAK,EACzBA,KAAK,GAAG,GAAGA,KAAK,OAAO,IAAI,CAACP,WAAW,CAACK,IAAI,EAAE,MAE9CE,KAAK,GAAG,GAAGA,KAAK,GAAG,IAAI,CAACP,WAAW,CAACO,KAAK,CAACC,GAAG,CAACC,CAAC,IAAI,OAAO,IAAI,CAACT,WAAW,CAACK,IAAI,IAAII,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE;IAEtG,IAAI,IAAI,CAACV,WAAW,CAACW,MAAM,EACzBJ,KAAK,GAAG,GAAGA,KAAK,iBAAiB,IAAI,CAACK,aAAa,EAAE;;IAEvD;IACAL,KAAK,GAAGZ,SAAS,CAAC,IAAI,CAACK,WAAW,CAACK,IAAI,EAAEE,KAAK,CAAC;IAC/CA,KAAK,GAAG,GAAGA,KAAK,qBAAqB,IAAI,CAACP,WAAW,CAACK,IAAI,iBAAiB;IAC3E,OAAOE,KAAK;EACd;EAEA,IAAIK,aAAaA,CAAA,EAAI;IACnB,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,IAAI,GAAG,EAAE;IAEb,KAAK,MAAMC,KAAK,IAAI,IAAI,CAACf,WAAW,CAACW,MAAM,EAAE;MAC3C,MAAMJ,KAAK,GAAG,IAAIV,iBAAiB,CAACkB,KAAK,CAAC,CAACR,KAAK,GAAG;MACnD,IAAIO,IAAI,CAACE,MAAM,IAAKF,IAAI,CAACE,MAAM,GAAGT,KAAK,CAACS,MAAM,GAAI,IAAI,CAACd,SAAS,EAAE;QAChEW,OAAO,GAAG,CAACA,OAAO,EAAEC,IAAI,CAAC,CAACG,MAAM,CAACC,OAAO,CAAC,CAACR,IAAI,CAAC,IAAI,CAAC;QACpDI,IAAI,GAAG,EAAE;MACX;MACAA,IAAI,GAAG,CAACA,IAAI,EAAEP,KAAK,CAAC,CAACU,MAAM,CAACC,OAAO,CAAC,CAACR,IAAI,CAAC,GAAG,CAAC;IAChD;IACAG,OAAO,GAAG,CAACA,OAAO,EAAEC,IAAI,CAAC,CAACG,MAAM,CAACC,OAAO,CAAC,CAACR,IAAI,CAAC,IAAI,CAAC;IACpD,OAAOG,OAAO;EAChB;EAEAM,UAAUA,CAAEC,GAAG,EAAE;IACf,IAAI,CAACA,GAAG,EAAE;MACR,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,YAAY,IAAI,CAAChB,KAAK,EAAE,CAAC,EAAE;QACxDiB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;IAEA,OAAOH,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,YAAYH,GAAG,OAAO,IAAI,CAACb,KAAK,EAAE,CAAC,EAAE;MAClEiB,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;EAEAC,cAAcA,CAAEC,IAAI,EAAEC,OAAO,EAAEC,EAAE,EAAE;IACjC,MAAMP,MAAM,CAACC,MAAM,CACjB,IAAIC,KAAK,CAAC,2CAA2C,CAAC,EACtD;MAAEC,IAAI,EAAE;IAAgB,CAC1B,CAAC;EACH;EAEA,MAAMK,aAAaA,CAAEF,OAAO,EAAE;IAC5B,MAAMG,EAAE,GAAG,MAAMhC,aAAa,CAAC6B,OAAO,EAAE;MAAEI,IAAI,EAAE,IAAI,CAAC9B,GAAG,CAAC+B;IAAY,CAAC,CAAC;IACvE,IAAI,CAAC7B,UAAU,GAAG2B,EAAE;IACpB,IAAI,CAACG,cAAc,GAAG,CAAC,GAAGH,EAAE,CAACI,IAAI,CAAC,CAAC,CAAC;IACpC,IAAI,CAAC9B,cAAc,GAAG,CAAC,GAAG0B,EAAE,CAACK,MAAM,CAAC,CAAC,CAAC;EACxC;AACF;AACAC,MAAM,CAACC,OAAO,GAAGtC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
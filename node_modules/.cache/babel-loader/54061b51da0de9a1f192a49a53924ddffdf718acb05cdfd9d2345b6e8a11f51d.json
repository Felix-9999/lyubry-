{"ast":null,"code":"// npm edit <pkg>\n// open the package folder in the $EDITOR\n\nconst {\n  resolve\n} = require('path');\nconst fs = require('graceful-fs');\nconst {\n  spawn\n} = require('child_process');\nconst splitPackageNames = require('./utils/split-package-names.js');\nconst completion = require('./utils/completion/installed-shallow.js');\nconst BaseCommand = require('./base-command.js');\nclass Edit extends BaseCommand {\n  static get description() {\n    return 'Edit an installed package';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'edit';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['<pkg>[/<subpkg>...]'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['editor'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n  exec(args, cb) {\n    this.edit(args).then(() => cb()).catch(cb);\n  }\n  async edit(args) {\n    if (args.length !== 1) throw new Error(this.usage);\n    const path = splitPackageNames(args[0]);\n    const dir = resolve(this.npm.dir, path);\n\n    // graceful-fs does not promisify\n    await new Promise((resolve, reject) => {\n      fs.lstat(dir, err => {\n        if (err) return reject(err);\n        const [bin, ...args] = this.npm.config.get('editor').split(/\\s+/);\n        const editor = spawn(bin, [...args, dir], {\n          stdio: 'inherit'\n        });\n        editor.on('exit', code => {\n          if (code) return reject(new Error(`editor process exited with code: ${code}`));\n          this.npm.commands.rebuild([dir], err => {\n            if (err) return reject(err);\n            resolve();\n          });\n        });\n      });\n    });\n  }\n}\nmodule.exports = Edit;","map":{"version":3,"names":["resolve","require","fs","spawn","splitPackageNames","completion","BaseCommand","Edit","description","name","usage","params","opts","npm","exec","args","cb","edit","then","catch","length","Error","path","dir","Promise","reject","lstat","err","bin","config","get","split","editor","stdio","on","code","commands","rebuild","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/edit.js"],"sourcesContent":["// npm edit <pkg>\n// open the package folder in the $EDITOR\n\nconst { resolve } = require('path')\nconst fs = require('graceful-fs')\nconst { spawn } = require('child_process')\nconst splitPackageNames = require('./utils/split-package-names.js')\nconst completion = require('./utils/completion/installed-shallow.js')\nconst BaseCommand = require('./base-command.js')\n\nclass Edit extends BaseCommand {\n  static get description () {\n    return 'Edit an installed package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'edit'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<pkg>[/<subpkg>...]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['editor']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  exec (args, cb) {\n    this.edit(args).then(() => cb()).catch(cb)\n  }\n\n  async edit (args) {\n    if (args.length !== 1)\n      throw new Error(this.usage)\n\n    const path = splitPackageNames(args[0])\n    const dir = resolve(this.npm.dir, path)\n\n    // graceful-fs does not promisify\n    await new Promise((resolve, reject) => {\n      fs.lstat(dir, (err) => {\n        if (err)\n          return reject(err)\n        const [bin, ...args] = this.npm.config.get('editor').split(/\\s+/)\n        const editor = spawn(bin, [...args, dir], { stdio: 'inherit' })\n        editor.on('exit', (code) => {\n          if (code)\n            return reject(new Error(`editor process exited with code: ${code}`))\n          this.npm.commands.rebuild([dir], (err) => {\n            if (err)\n              return reject(err)\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n}\nmodule.exports = Edit\n"],"mappings":"AAAA;AACA;;AAEA,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACnC,MAAMC,EAAE,GAAGD,OAAO,CAAC,aAAa,CAAC;AACjC,MAAM;EAAEE;AAAM,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AACnE,MAAMI,UAAU,GAAGJ,OAAO,CAAC,yCAAyC,CAAC;AACrE,MAAMK,WAAW,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AAEhD,MAAMM,IAAI,SAASD,WAAW,CAAC;EAC7B,WAAWE,WAAWA,CAAA,EAAI;IACxB,OAAO,2BAA2B;EACpC;;EAEA;EACA,WAAWC,IAAIA,CAAA,EAAI;IACjB,OAAO,MAAM;EACf;;EAEA;EACA,WAAWC,KAAKA,CAAA,EAAI;IAClB,OAAO,CAAC,qBAAqB,CAAC;EAChC;;EAEA;EACA,WAAWC,MAAMA,CAAA,EAAI;IACnB,OAAO,CAAC,QAAQ,CAAC;EACnB;;EAEA;EACA,MAAMN,UAAUA,CAAEO,IAAI,EAAE;IACtB,OAAOP,UAAU,CAAC,IAAI,CAACQ,GAAG,EAAED,IAAI,CAAC;EACnC;EAEAE,IAAIA,CAAEC,IAAI,EAAEC,EAAE,EAAE;IACd,IAAI,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,MAAMF,EAAE,CAAC,CAAC,CAAC,CAACG,KAAK,CAACH,EAAE,CAAC;EAC5C;EAEA,MAAMC,IAAIA,CAAEF,IAAI,EAAE;IAChB,IAAIA,IAAI,CAACK,MAAM,KAAK,CAAC,EACnB,MAAM,IAAIC,KAAK,CAAC,IAAI,CAACX,KAAK,CAAC;IAE7B,MAAMY,IAAI,GAAGlB,iBAAiB,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC;IACvC,MAAMQ,GAAG,GAAGvB,OAAO,CAAC,IAAI,CAACa,GAAG,CAACU,GAAG,EAAED,IAAI,CAAC;;IAEvC;IACA,MAAM,IAAIE,OAAO,CAAC,CAACxB,OAAO,EAAEyB,MAAM,KAAK;MACrCvB,EAAE,CAACwB,KAAK,CAACH,GAAG,EAAGI,GAAG,IAAK;QACrB,IAAIA,GAAG,EACL,OAAOF,MAAM,CAACE,GAAG,CAAC;QACpB,MAAM,CAACC,GAAG,EAAE,GAAGb,IAAI,CAAC,GAAG,IAAI,CAACF,GAAG,CAACgB,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC;QACjE,MAAMC,MAAM,GAAG7B,KAAK,CAACyB,GAAG,EAAE,CAAC,GAAGb,IAAI,EAAEQ,GAAG,CAAC,EAAE;UAAEU,KAAK,EAAE;QAAU,CAAC,CAAC;QAC/DD,MAAM,CAACE,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;UAC1B,IAAIA,IAAI,EACN,OAAOV,MAAM,CAAC,IAAIJ,KAAK,CAAC,oCAAoCc,IAAI,EAAE,CAAC,CAAC;UACtE,IAAI,CAACtB,GAAG,CAACuB,QAAQ,CAACC,OAAO,CAAC,CAACd,GAAG,CAAC,EAAGI,GAAG,IAAK;YACxC,IAAIA,GAAG,EACL,OAAOF,MAAM,CAACE,GAAG,CAAC;YAEpB3B,OAAO,CAAC,CAAC;UACX,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF;AACAsC,MAAM,CAACC,OAAO,GAAGhC,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
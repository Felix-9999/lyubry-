{"ast":null,"code":"const util = require('util');\nconst log = require('npmlog');\nconst semver = require('semver');\nconst pack = require('libnpmpack');\nconst libpub = require('libnpmpublish').publish;\nconst runScript = require('@npmcli/run-script');\nconst pacote = require('pacote');\nconst npa = require('npm-package-arg');\nconst npmFetch = require('npm-registry-fetch');\nconst chalk = require('chalk');\nconst otplease = require('./utils/otplease.js');\nconst {\n  getContents,\n  logTar\n} = require('./utils/tar.js');\n\n// for historical reasons, publishConfig in package.json can contain ANY config\n// keys that npm supports in .npmrc files and elsewhere.  We *may* want to\n// revisit this at some point, and have a minimal set that's a SemVer-major\n// change that ought to get a RFC written on it.\nconst flatten = require('./utils/config/flatten.js');\n\n// this is the only case in the CLI where we want to use the old full slow\n// 'read-package-json' module, because we want to pull in all the defaults and\n// metadata, like git sha's and default scripts and all that.\nconst readJson = util.promisify(require('read-package-json'));\nconst BaseCommand = require('./base-command.js');\nclass Publish extends BaseCommand {\n  static get description() {\n    return 'Publish a package';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'publish';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['tag', 'access', 'dry-run', 'otp', 'workspace', 'workspaces'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[<folder>]'];\n  }\n  exec(args, cb) {\n    this.publish(args).then(() => cb()).catch(cb);\n  }\n  execWorkspaces(args, filters, cb) {\n    this.publishWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n  async publish(args) {\n    if (args.length === 0) args = ['.'];\n    if (args.length !== 1) throw this.usageError();\n    log.verbose('publish', args);\n    const unicode = this.npm.config.get('unicode');\n    const dryRun = this.npm.config.get('dry-run');\n    const json = this.npm.config.get('json');\n    const defaultTag = this.npm.config.get('tag');\n    const ignoreScripts = this.npm.config.get('ignore-scripts');\n    const silent = log.level === 'silent';\n    if (semver.validRange(defaultTag)) throw new Error('Tag name must not be a valid SemVer range: ' + defaultTag.trim());\n    const opts = {\n      ...this.npm.flatOptions\n    };\n\n    // you can publish name@version, ./foo.tgz, etc.\n    // even though the default is the 'file:.' cwd.\n    const spec = npa(args[0]);\n    let manifest = await this.getManifest(spec, opts);\n    if (manifest.publishConfig) flatten(manifest.publishConfig, opts);\n\n    // only run scripts for directory type publishes\n    if (spec.type === 'directory' && !ignoreScripts) {\n      await runScript({\n        event: 'prepublishOnly',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent\n      });\n    }\n    const tarballData = await pack(spec, opts);\n    const pkgContents = await getContents(manifest, tarballData);\n\n    // The purpose of re-reading the manifest is in case it changed,\n    // so that we send the latest and greatest thing to the registry\n    // note that publishConfig might have changed as well!\n    manifest = await this.getManifest(spec, opts);\n    if (manifest.publishConfig) flatten(manifest.publishConfig, opts);\n\n    // note that logTar calls npmlog.notice(), so if we ARE in silent mode,\n    // this will do nothing, but we still want it in the debuglog if it fails.\n    if (!json) logTar(pkgContents, {\n      log,\n      unicode\n    });\n    if (!dryRun) {\n      const resolved = npa.resolve(manifest.name, manifest.version);\n      const registry = npmFetch.pickRegistry(resolved, opts);\n      const creds = this.npm.config.getCredentialsByURI(registry);\n      if (!creds.token && !creds.username) {\n        throw Object.assign(new Error('This command requires you to be logged in.'), {\n          code: 'ENEEDAUTH'\n        });\n      }\n      await otplease(opts, opts => libpub(manifest, tarballData, opts));\n    }\n    if (spec.type === 'directory' && !ignoreScripts) {\n      await runScript({\n        event: 'publish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent\n      });\n      await runScript({\n        event: 'postpublish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent\n      });\n    }\n    if (!this.suppressOutput) {\n      if (!silent && json) this.npm.output(JSON.stringify(pkgContents, null, 2));else if (!silent) this.npm.output(`+ ${pkgContents.id}`);\n    }\n    return pkgContents;\n  }\n  async publishWorkspaces(args, filters) {\n    // Suppresses JSON output in publish() so we can handle it here\n    this.suppressOutput = true;\n    const results = {};\n    const json = this.npm.config.get('json');\n    const silent = log.level === 'silent';\n    const noop = a => a;\n    const color = this.npm.color ? chalk : {\n      green: noop,\n      bold: noop\n    };\n    await this.setWorkspaces(filters);\n    for (const [name, workspace] of this.workspaces.entries()) {\n      let pkgContents;\n      try {\n        pkgContents = await this.publish([workspace]);\n      } catch (err) {\n        if (err.code === 'EPRIVATE') {\n          log.warn('publish', `Skipping workspace ${color.green(name)}, marked as ${color.bold('private')}`);\n          continue;\n        }\n        throw err;\n      }\n      // This needs to be in-line w/ the rest of the output that non-JSON\n      // publish generates\n      if (!silent && !json) this.npm.output(`+ ${pkgContents.id}`);else results[name] = pkgContents;\n    }\n    if (!silent && json) this.npm.output(JSON.stringify(results, null, 2));\n  }\n\n  // if it's a directory, read it from the file system\n  // otherwise, get the full metadata from whatever it is\n  getManifest(spec, opts) {\n    if (spec.type === 'directory') return readJson(`${spec.fetchSpec}/package.json`);\n    return pacote.manifest(spec, {\n      ...opts,\n      fullMetadata: true\n    });\n  }\n}\nmodule.exports = Publish;","map":{"version":3,"names":["util","require","log","semver","pack","libpub","publish","runScript","pacote","npa","npmFetch","chalk","otplease","getContents","logTar","flatten","readJson","promisify","BaseCommand","Publish","description","name","params","usage","exec","args","cb","then","catch","execWorkspaces","filters","publishWorkspaces","length","usageError","verbose","unicode","npm","config","get","dryRun","json","defaultTag","ignoreScripts","silent","level","validRange","Error","trim","opts","flatOptions","spec","manifest","getManifest","publishConfig","type","event","path","fetchSpec","stdio","pkg","banner","tarballData","pkgContents","resolved","resolve","version","registry","pickRegistry","creds","getCredentialsByURI","token","username","Object","assign","code","suppressOutput","output","JSON","stringify","id","results","noop","a","color","green","bold","setWorkspaces","workspace","workspaces","entries","err","warn","fullMetadata","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/publish.js"],"sourcesContent":["const util = require('util')\nconst log = require('npmlog')\nconst semver = require('semver')\nconst pack = require('libnpmpack')\nconst libpub = require('libnpmpublish').publish\nconst runScript = require('@npmcli/run-script')\nconst pacote = require('pacote')\nconst npa = require('npm-package-arg')\nconst npmFetch = require('npm-registry-fetch')\nconst chalk = require('chalk')\n\nconst otplease = require('./utils/otplease.js')\nconst { getContents, logTar } = require('./utils/tar.js')\n\n// for historical reasons, publishConfig in package.json can contain ANY config\n// keys that npm supports in .npmrc files and elsewhere.  We *may* want to\n// revisit this at some point, and have a minimal set that's a SemVer-major\n// change that ought to get a RFC written on it.\nconst flatten = require('./utils/config/flatten.js')\n\n// this is the only case in the CLI where we want to use the old full slow\n// 'read-package-json' module, because we want to pull in all the defaults and\n// metadata, like git sha's and default scripts and all that.\nconst readJson = util.promisify(require('read-package-json'))\n\nconst BaseCommand = require('./base-command.js')\nclass Publish extends BaseCommand {\n  static get description () {\n    return 'Publish a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'publish'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['tag', 'access', 'dry-run', 'otp', 'workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      '[<folder>]',\n    ]\n  }\n\n  exec (args, cb) {\n    this.publish(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.publishWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async publish (args) {\n    if (args.length === 0)\n      args = ['.']\n    if (args.length !== 1)\n      throw this.usageError()\n\n    log.verbose('publish', args)\n\n    const unicode = this.npm.config.get('unicode')\n    const dryRun = this.npm.config.get('dry-run')\n    const json = this.npm.config.get('json')\n    const defaultTag = this.npm.config.get('tag')\n    const ignoreScripts = this.npm.config.get('ignore-scripts')\n    const silent = log.level === 'silent'\n\n    if (semver.validRange(defaultTag))\n      throw new Error('Tag name must not be a valid SemVer range: ' + defaultTag.trim())\n\n    const opts = { ...this.npm.flatOptions }\n\n    // you can publish name@version, ./foo.tgz, etc.\n    // even though the default is the 'file:.' cwd.\n    const spec = npa(args[0])\n    let manifest = await this.getManifest(spec, opts)\n\n    if (manifest.publishConfig)\n      flatten(manifest.publishConfig, opts)\n\n    // only run scripts for directory type publishes\n    if (spec.type === 'directory' && !ignoreScripts) {\n      await runScript({\n        event: 'prepublishOnly',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent,\n      })\n    }\n\n    const tarballData = await pack(spec, opts)\n    const pkgContents = await getContents(manifest, tarballData)\n\n    // The purpose of re-reading the manifest is in case it changed,\n    // so that we send the latest and greatest thing to the registry\n    // note that publishConfig might have changed as well!\n    manifest = await this.getManifest(spec, opts)\n    if (manifest.publishConfig)\n      flatten(manifest.publishConfig, opts)\n\n    // note that logTar calls npmlog.notice(), so if we ARE in silent mode,\n    // this will do nothing, but we still want it in the debuglog if it fails.\n    if (!json)\n      logTar(pkgContents, { log, unicode })\n\n    if (!dryRun) {\n      const resolved = npa.resolve(manifest.name, manifest.version)\n      const registry = npmFetch.pickRegistry(resolved, opts)\n      const creds = this.npm.config.getCredentialsByURI(registry)\n      if (!creds.token && !creds.username) {\n        throw Object.assign(new Error('This command requires you to be logged in.'), {\n          code: 'ENEEDAUTH',\n        })\n      }\n      await otplease(opts, opts => libpub(manifest, tarballData, opts))\n    }\n\n    if (spec.type === 'directory' && !ignoreScripts) {\n      await runScript({\n        event: 'publish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent,\n      })\n\n      await runScript({\n        event: 'postpublish',\n        path: spec.fetchSpec,\n        stdio: 'inherit',\n        pkg: manifest,\n        banner: !silent,\n      })\n    }\n\n    if (!this.suppressOutput) {\n      if (!silent && json)\n        this.npm.output(JSON.stringify(pkgContents, null, 2))\n      else if (!silent)\n        this.npm.output(`+ ${pkgContents.id}`)\n    }\n\n    return pkgContents\n  }\n\n  async publishWorkspaces (args, filters) {\n    // Suppresses JSON output in publish() so we can handle it here\n    this.suppressOutput = true\n\n    const results = {}\n    const json = this.npm.config.get('json')\n    const silent = log.level === 'silent'\n    const noop = a => a\n    const color = this.npm.color ? chalk : { green: noop, bold: noop }\n    await this.setWorkspaces(filters)\n\n    for (const [name, workspace] of this.workspaces.entries()) {\n      let pkgContents\n      try {\n        pkgContents = await this.publish([workspace])\n      } catch (err) {\n        if (err.code === 'EPRIVATE') {\n          log.warn(\n            'publish',\n            `Skipping workspace ${\n              color.green(name)\n            }, marked as ${\n              color.bold('private')\n            }`\n          )\n          continue\n        }\n        throw err\n      }\n      // This needs to be in-line w/ the rest of the output that non-JSON\n      // publish generates\n      if (!silent && !json)\n        this.npm.output(`+ ${pkgContents.id}`)\n      else\n        results[name] = pkgContents\n    }\n\n    if (!silent && json)\n      this.npm.output(JSON.stringify(results, null, 2))\n  }\n\n  // if it's a directory, read it from the file system\n  // otherwise, get the full metadata from whatever it is\n  getManifest (spec, opts) {\n    if (spec.type === 'directory')\n      return readJson(`${spec.fetchSpec}/package.json`)\n    return pacote.manifest(spec, { ...opts, fullMetadata: true })\n  }\n}\nmodule.exports = Publish\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
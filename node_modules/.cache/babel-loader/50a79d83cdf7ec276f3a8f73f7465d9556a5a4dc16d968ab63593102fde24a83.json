{"ast":null,"code":"// An object representing a vulnerability either as the result of an\n// advisory or due to the package in question depending exclusively on\n// vulnerable versions of a dep.\n//\n// - name: package name\n// - range: Set of vulnerable versions\n// - nodes: Set of nodes affected\n// - effects: Set of vulns triggered by this one\n// - advisories: Set of advisories (including metavulns) causing this vuln.\n//   All of the entries in via are vulnerability objects returned by\n//   @npmcli/metavuln-calculator\n// - via: dependency vulns which cause this one\n\nconst {\n  satisfies,\n  simplifyRange\n} = require('semver');\nconst semverOpt = {\n  loose: true,\n  includePrerelease: true\n};\nconst localeCompare = require('@isaacs/string-locale-compare')('en');\nconst npa = require('npm-package-arg');\nconst _range = Symbol('_range');\nconst _simpleRange = Symbol('_simpleRange');\nconst _fixAvailable = Symbol('_fixAvailable');\nconst severities = new Map([['info', 0], ['low', 1], ['moderate', 2], ['high', 3], ['critical', 4], [null, -1]]);\nfor (const [name, val] of severities.entries()) {\n  severities.set(val, name);\n}\nclass Vuln {\n  constructor({\n    name,\n    advisory\n  }) {\n    this.name = name;\n    this.via = new Set();\n    this.advisories = new Set();\n    this.severity = null;\n    this.effects = new Set();\n    this.topNodes = new Set();\n    this[_range] = null;\n    this[_simpleRange] = null;\n    this.nodes = new Set();\n    // assume a fix is available unless it hits a top node\n    // that locks it in place, setting this false or {isSemVerMajor, version}.\n    this[_fixAvailable] = true;\n    this.addAdvisory(advisory);\n    this.packument = advisory.packument;\n    this.versions = advisory.versions;\n  }\n  get fixAvailable() {\n    return this[_fixAvailable];\n  }\n  set fixAvailable(f) {\n    this[_fixAvailable] = f;\n    // if there's a fix available for this at the top level, it means that\n    // it will also fix the vulns that led to it being there.  to get there,\n    // we set the vias to the most \"strict\" of fix availables.\n    // - false: no fix is available\n    // - {name, version, isSemVerMajor} fix requires -f, is semver major\n    // - {name, version} fix requires -f, not semver major\n    // - true: fix does not require -f\n    for (const v of this.via) {\n      // don't blow up on loops\n      if (v.fixAvailable === f) {\n        continue;\n      }\n      if (f === false) {\n        v.fixAvailable = f;\n      } else if (v.fixAvailable === true) {\n        v.fixAvailable = f;\n      } else if (typeof f === 'object' && (typeof v.fixAvailable !== 'object' || !v.fixAvailable.isSemVerMajor)) {\n        v.fixAvailable = f;\n      }\n    }\n  }\n  get isDirect() {\n    for (const node of this.nodes.values()) {\n      for (const edge of node.edgesIn) {\n        if (edge.from.isProjectRoot || edge.from.isWorkspace) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  testSpec(spec) {\n    const specObj = npa(spec);\n    if (!specObj.registry) {\n      return true;\n    }\n    if (specObj.subSpec) {\n      spec = specObj.subSpec.rawSpec;\n    }\n    for (const v of this.versions) {\n      if (satisfies(v, spec) && !satisfies(v, this.range, semverOpt)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      severity: this.severity,\n      isDirect: this.isDirect,\n      // just loop over the advisories, since via is only Vuln objects,\n      // and calculated advisories have all the info we need\n      via: [...this.advisories].map(v => v.type === 'metavuln' ? v.dependency : {\n        ...v,\n        versions: undefined,\n        vulnerableVersions: undefined,\n        id: undefined\n      }).sort((a, b) => localeCompare(String(a.source || a), String(b.source || b))),\n      effects: [...this.effects].map(v => v.name).sort(localeCompare),\n      range: this.simpleRange,\n      nodes: [...this.nodes].map(n => n.location).sort(localeCompare),\n      fixAvailable: this[_fixAvailable]\n    };\n  }\n  addVia(v) {\n    this.via.add(v);\n    v.effects.add(this);\n    // call the setter since we might add vias _after_ setting fixAvailable\n    this.fixAvailable = this.fixAvailable;\n  }\n  deleteVia(v) {\n    this.via.delete(v);\n    v.effects.delete(this);\n  }\n  deleteAdvisory(advisory) {\n    this.advisories.delete(advisory);\n    // make sure we have the max severity of all the vulns causing this one\n    this.severity = null;\n    this[_range] = null;\n    this[_simpleRange] = null;\n    // refresh severity\n    for (const advisory of this.advisories) {\n      this.addAdvisory(advisory);\n    }\n\n    // remove any effects that are no longer relevant\n    const vias = new Set([...this.advisories].map(a => a.dependency));\n    for (const via of this.via) {\n      if (!vias.has(via.name)) {\n        this.deleteVia(via);\n      }\n    }\n  }\n  addAdvisory(advisory) {\n    this.advisories.add(advisory);\n    const sev = severities.get(advisory.severity);\n    this[_range] = null;\n    this[_simpleRange] = null;\n    if (sev > severities.get(this.severity)) {\n      this.severity = advisory.severity;\n    }\n  }\n  get range() {\n    return this[_range] || (this[_range] = [...this.advisories].map(v => v.range).join(' || '));\n  }\n  get simpleRange() {\n    if (this[_simpleRange] && this[_simpleRange] === this[_range]) {\n      return this[_simpleRange];\n    }\n    const versions = [...this.advisories][0].versions;\n    const range = this.range;\n    const simple = simplifyRange(versions, range, semverOpt);\n    return this[_simpleRange] = this[_range] = simple;\n  }\n  isVulnerable(node) {\n    if (this.nodes.has(node)) {\n      return true;\n    }\n    const {\n      version\n    } = node.package;\n    if (!version) {\n      return false;\n    }\n    for (const v of this.advisories) {\n      if (v.testVersion(version)) {\n        this.nodes.add(node);\n        return true;\n      }\n    }\n    return false;\n  }\n}\nmodule.exports = Vuln;","map":{"version":3,"names":["satisfies","simplifyRange","require","semverOpt","loose","includePrerelease","localeCompare","npa","_range","Symbol","_simpleRange","_fixAvailable","severities","Map","name","val","entries","set","Vuln","constructor","advisory","via","Set","advisories","severity","effects","topNodes","nodes","addAdvisory","packument","versions","fixAvailable","f","v","isSemVerMajor","isDirect","node","values","edge","edgesIn","from","isProjectRoot","isWorkspace","testSpec","spec","specObj","registry","subSpec","rawSpec","range","toJSON","map","type","dependency","undefined","vulnerableVersions","id","sort","a","b","String","source","simpleRange","n","location","addVia","add","deleteVia","delete","deleteAdvisory","vias","has","sev","get","join","simple","isVulnerable","version","package","testVersion","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/vuln.js"],"sourcesContent":["// An object representing a vulnerability either as the result of an\n// advisory or due to the package in question depending exclusively on\n// vulnerable versions of a dep.\n//\n// - name: package name\n// - range: Set of vulnerable versions\n// - nodes: Set of nodes affected\n// - effects: Set of vulns triggered by this one\n// - advisories: Set of advisories (including metavulns) causing this vuln.\n//   All of the entries in via are vulnerability objects returned by\n//   @npmcli/metavuln-calculator\n// - via: dependency vulns which cause this one\n\nconst {satisfies, simplifyRange} = require('semver')\nconst semverOpt = { loose: true, includePrerelease: true }\n\nconst localeCompare = require('@isaacs/string-locale-compare')('en')\nconst npa = require('npm-package-arg')\nconst _range = Symbol('_range')\nconst _simpleRange = Symbol('_simpleRange')\nconst _fixAvailable = Symbol('_fixAvailable')\n\nconst severities = new Map([\n  ['info', 0],\n  ['low', 1],\n  ['moderate', 2],\n  ['high', 3],\n  ['critical', 4],\n  [null, -1],\n])\n\nfor (const [name, val] of severities.entries()) {\n  severities.set(val, name)\n}\n\nclass Vuln {\n  constructor ({ name, advisory }) {\n    this.name = name\n    this.via = new Set()\n    this.advisories = new Set()\n    this.severity = null\n    this.effects = new Set()\n    this.topNodes = new Set()\n    this[_range] = null\n    this[_simpleRange] = null\n    this.nodes = new Set()\n    // assume a fix is available unless it hits a top node\n    // that locks it in place, setting this false or {isSemVerMajor, version}.\n    this[_fixAvailable] = true\n    this.addAdvisory(advisory)\n    this.packument = advisory.packument\n    this.versions = advisory.versions\n  }\n\n  get fixAvailable () {\n    return this[_fixAvailable]\n  }\n\n  set fixAvailable (f) {\n    this[_fixAvailable] = f\n    // if there's a fix available for this at the top level, it means that\n    // it will also fix the vulns that led to it being there.  to get there,\n    // we set the vias to the most \"strict\" of fix availables.\n    // - false: no fix is available\n    // - {name, version, isSemVerMajor} fix requires -f, is semver major\n    // - {name, version} fix requires -f, not semver major\n    // - true: fix does not require -f\n    for (const v of this.via) {\n      // don't blow up on loops\n      if (v.fixAvailable === f) {\n        continue\n      }\n\n      if (f === false) {\n        v.fixAvailable = f\n      } else if (v.fixAvailable === true) {\n        v.fixAvailable = f\n      } else if (typeof f === 'object' && (\n        typeof v.fixAvailable !== 'object' || !v.fixAvailable.isSemVerMajor)) {\n        v.fixAvailable = f\n      }\n    }\n  }\n\n  get isDirect () {\n    for (const node of this.nodes.values()) {\n      for (const edge of node.edgesIn) {\n        if (edge.from.isProjectRoot || edge.from.isWorkspace) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  testSpec (spec) {\n    const specObj = npa(spec)\n    if (!specObj.registry) {\n      return true\n    }\n\n    if (specObj.subSpec) {\n      spec = specObj.subSpec.rawSpec\n    }\n\n    for (const v of this.versions) {\n      if (satisfies(v, spec) && !satisfies(v, this.range, semverOpt)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  toJSON () {\n    return {\n      name: this.name,\n      severity: this.severity,\n      isDirect: this.isDirect,\n      // just loop over the advisories, since via is only Vuln objects,\n      // and calculated advisories have all the info we need\n      via: [...this.advisories].map(v => v.type === 'metavuln' ? v.dependency : {\n        ...v,\n        versions: undefined,\n        vulnerableVersions: undefined,\n        id: undefined,\n      }).sort((a, b) =>\n        localeCompare(String(a.source || a), String(b.source || b))),\n      effects: [...this.effects].map(v => v.name).sort(localeCompare),\n      range: this.simpleRange,\n      nodes: [...this.nodes].map(n => n.location).sort(localeCompare),\n      fixAvailable: this[_fixAvailable],\n    }\n  }\n\n  addVia (v) {\n    this.via.add(v)\n    v.effects.add(this)\n    // call the setter since we might add vias _after_ setting fixAvailable\n    this.fixAvailable = this.fixAvailable\n  }\n\n  deleteVia (v) {\n    this.via.delete(v)\n    v.effects.delete(this)\n  }\n\n  deleteAdvisory (advisory) {\n    this.advisories.delete(advisory)\n    // make sure we have the max severity of all the vulns causing this one\n    this.severity = null\n    this[_range] = null\n    this[_simpleRange] = null\n    // refresh severity\n    for (const advisory of this.advisories) {\n      this.addAdvisory(advisory)\n    }\n\n    // remove any effects that are no longer relevant\n    const vias = new Set([...this.advisories].map(a => a.dependency))\n    for (const via of this.via) {\n      if (!vias.has(via.name)) {\n        this.deleteVia(via)\n      }\n    }\n  }\n\n  addAdvisory (advisory) {\n    this.advisories.add(advisory)\n    const sev = severities.get(advisory.severity)\n    this[_range] = null\n    this[_simpleRange] = null\n    if (sev > severities.get(this.severity)) {\n      this.severity = advisory.severity\n    }\n  }\n\n  get range () {\n    return this[_range] ||\n      (this[_range] = [...this.advisories].map(v => v.range).join(' || '))\n  }\n\n  get simpleRange () {\n    if (this[_simpleRange] && this[_simpleRange] === this[_range]) {\n      return this[_simpleRange]\n    }\n\n    const versions = [...this.advisories][0].versions\n    const range = this.range\n    const simple = simplifyRange(versions, range, semverOpt)\n    return this[_simpleRange] = this[_range] = simple\n  }\n\n  isVulnerable (node) {\n    if (this.nodes.has(node)) {\n      return true\n    }\n\n    const { version } = node.package\n    if (!version) {\n      return false\n    }\n\n    for (const v of this.advisories) {\n      if (v.testVersion(version)) {\n        this.nodes.add(node)\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\nmodule.exports = Vuln\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
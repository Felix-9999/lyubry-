{"ast":null,"code":"const colors = require('../colors.js');\nconst calculate = (data, {\n  color\n}) => {\n  const c = colors(color);\n  const output = [];\n  const {\n    metadata: {\n      vulnerabilities\n    }\n  } = data;\n  const vulnCount = vulnerabilities.total;\n  let someFixable = false;\n  let someForceFixable = false;\n  let forceFixSemVerMajor = false;\n  let someUnfixable = false;\n  if (vulnCount === 0) {\n    output.push(`found ${c.green('0')} vulnerabilities`);\n  } else {\n    for (const [name, vuln] of Object.entries(data.vulnerabilities)) {\n      const {\n        fixAvailable\n      } = vuln;\n      someFixable = someFixable || fixAvailable === true;\n      someUnfixable = someUnfixable || fixAvailable === false;\n      if (typeof fixAvailable === 'object') {\n        someForceFixable = true;\n        forceFixSemVerMajor = forceFixSemVerMajor || fixAvailable.isSemVerMajor;\n      }\n    }\n    const total = vulnerabilities.total;\n    const sevs = Object.entries(vulnerabilities).filter(([s, count]) => {\n      return (s === 'low' || s === 'moderate' || s === 'high' || s === 'critical') && count > 0;\n    });\n    if (sevs.length > 1) {\n      const severities = sevs.map(([s, count]) => {\n        return `${count} ${c.severity(s)}`;\n      }).join(', ');\n      output.push(`${c.red(total)} vulnerabilities (${severities})`);\n    } else {\n      const [sev, count] = sevs[0];\n      output.push(`${count} ${c.severity(sev)} severity vulnerabilit${count === 1 ? 'y' : 'ies'}`);\n    }\n\n    // XXX use a different footer line if some aren't fixable easily.\n    // just 'run `npm audit` for details' maybe?\n\n    if (someFixable) {\n      output.push('', 'To address ' + (someForceFixable || someUnfixable ? 'issues that do not require attention' : 'all issues') + ', run:\\n  npm audit fix');\n    }\n    if (someForceFixable) {\n      output.push('', 'To address all issues' + (someUnfixable ? ' possible' : '') + (forceFixSemVerMajor ? ' (including breaking changes)' : '') + ', run:\\n  npm audit fix --force');\n    }\n    if (someUnfixable) {\n      output.push('', 'Some issues need review, and may require choosing', 'a different dependency.');\n    }\n  }\n  const summary = output.join('\\n');\n  return {\n    summary,\n    report: vulnCount > 0 ? `${summary}\\n\\nRun \\`npm audit\\` for details.` : summary\n  };\n};\nmodule.exports = Object.assign((data, opt) => calculate(data, opt).report, {\n  summary: (data, opt) => calculate(data, opt).summary\n});","map":{"version":3,"names":["colors","require","calculate","data","color","c","output","metadata","vulnerabilities","vulnCount","total","someFixable","someForceFixable","forceFixSemVerMajor","someUnfixable","push","green","name","vuln","Object","entries","fixAvailable","isSemVerMajor","sevs","filter","s","count","length","severities","map","severity","join","red","sev","summary","report","module","exports","assign","opt"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/npm-audit-report/lib/reporters/install.js"],"sourcesContent":["const colors = require('../colors.js')\n\nconst calculate = (data, { color }) => {\n  const c = colors(color)\n  const output = []\n  const { metadata: { vulnerabilities }} = data\n  const vulnCount = vulnerabilities.total\n\n  let someFixable = false\n  let someForceFixable = false\n  let forceFixSemVerMajor = false\n  let someUnfixable = false\n\n  if (vulnCount === 0) {\n    output.push(`found ${c.green('0')} vulnerabilities`)\n  } else {\n    for (const [name, vuln] of Object.entries(data.vulnerabilities)) {\n      const { fixAvailable } = vuln\n      someFixable = someFixable || fixAvailable === true\n      someUnfixable = someUnfixable || fixAvailable === false\n      if (typeof fixAvailable === 'object') {\n        someForceFixable = true\n        forceFixSemVerMajor = forceFixSemVerMajor || fixAvailable.isSemVerMajor\n      }\n    }\n    const total = vulnerabilities.total\n    const sevs = Object.entries(vulnerabilities).filter(([s, count]) => {\n      return (s === 'low' || s === 'moderate' || s === 'high' || s === 'critical') &&\n        count > 0\n    })\n\n    if (sevs.length > 1) {\n      const severities = sevs.map(([s, count]) => {\n        return `${count} ${c.severity(s)}`\n      }).join(', ')\n      output.push(`${c.red(total)} vulnerabilities (${severities})`)\n    } else {\n      const [sev, count] = sevs[0]\n      output.push(`${count} ${c.severity(sev)} severity vulnerabilit${count === 1 ? 'y' : 'ies'}`)\n    }\n\n    // XXX use a different footer line if some aren't fixable easily.\n    // just 'run `npm audit` for details' maybe?\n\n    if (someFixable) {\n      output.push('', 'To address ' +\n        (someForceFixable || someUnfixable ? 'issues that do not require attention'\n          : 'all issues') + ', run:\\n  npm audit fix')\n    }\n\n    if (someForceFixable) {\n      output.push('', 'To address all issues' +\n        (someUnfixable ? ' possible' : '') +\n        (forceFixSemVerMajor ? ' (including breaking changes)' : '') +\n        ', run:\\n  npm audit fix --force')\n    }\n\n    if (someUnfixable) {\n      output.push('',\n        'Some issues need review, and may require choosing',\n        'a different dependency.')\n    }\n  }\n\n  const summary = output.join('\\n')\n  return {\n    summary,\n    report: vulnCount > 0 ? `${summary}\\n\\nRun \\`npm audit\\` for details.`\n      : summary\n  }\n}\n\nmodule.exports = Object.assign((data, opt) => calculate(data, opt).report, {\n  summary: (data, opt) => calculate(data, opt).summary\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
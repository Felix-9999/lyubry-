{"ast":null,"code":"const log = require('npmlog');\nconst replaceInfo = require('./utils/replace-info.js');\nconst BaseCommand = require('./base-command.js');\nconst authTypes = {\n  legacy: require('./auth/legacy.js'),\n  oauth: require('./auth/oauth.js'),\n  saml: require('./auth/saml.js'),\n  sso: require('./auth/sso.js')\n};\nclass AddUser extends BaseCommand {\n  static get description() {\n    return 'Add a registry user account';\n  }\n  static get name() {\n    return 'adduser';\n  }\n  static get params() {\n    return ['registry', 'scope'];\n  }\n  exec(args, cb) {\n    this.adduser(args).then(() => cb()).catch(cb);\n  }\n  async adduser(args) {\n    const {\n      scope\n    } = this.npm.flatOptions;\n    const registry = this.getRegistry(this.npm.flatOptions);\n    const auth = this.getAuthType(this.npm.flatOptions);\n    const creds = this.npm.config.getCredentialsByURI(registry);\n    log.disableProgress();\n    log.notice('', `Log in on ${replaceInfo(registry)}`);\n    const {\n      message,\n      newCreds\n    } = await auth(this.npm, {\n      ...this.npm.flatOptions,\n      creds,\n      registry,\n      scope\n    });\n    await this.updateConfig({\n      newCreds,\n      registry,\n      scope\n    });\n    this.npm.output(message);\n  }\n  getRegistry({\n    scope,\n    registry\n  }) {\n    if (scope) {\n      const scopedRegistry = this.npm.config.get(`${scope}:registry`);\n      const cliRegistry = this.npm.config.get('registry', 'cli');\n      if (scopedRegistry && !cliRegistry) return scopedRegistry;\n    }\n    return registry;\n  }\n  getAuthType({\n    authType\n  }) {\n    const type = authTypes[authType];\n    if (!type) throw new Error('no such auth module');\n    return type;\n  }\n  async updateConfig({\n    newCreds,\n    registry,\n    scope\n  }) {\n    this.npm.config.delete('_token', 'user'); // prevent legacy pollution\n    this.npm.config.setCredentialsByURI(registry, newCreds);\n    if (scope) this.npm.config.set(scope + ':registry', registry, 'user');\n    await this.npm.config.save('user');\n  }\n}\nmodule.exports = AddUser;","map":{"version":3,"names":["log","require","replaceInfo","BaseCommand","authTypes","legacy","oauth","saml","sso","AddUser","description","name","params","exec","args","cb","adduser","then","catch","scope","npm","flatOptions","registry","getRegistry","auth","getAuthType","creds","config","getCredentialsByURI","disableProgress","notice","message","newCreds","updateConfig","output","scopedRegistry","get","cliRegistry","authType","type","Error","delete","setCredentialsByURI","set","save","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/adduser.js"],"sourcesContent":["const log = require('npmlog')\nconst replaceInfo = require('./utils/replace-info.js')\nconst BaseCommand = require('./base-command.js')\nconst authTypes = {\n  legacy: require('./auth/legacy.js'),\n  oauth: require('./auth/oauth.js'),\n  saml: require('./auth/saml.js'),\n  sso: require('./auth/sso.js'),\n}\n\nclass AddUser extends BaseCommand {\n  static get description () {\n    return 'Add a registry user account'\n  }\n\n  static get name () {\n    return 'adduser'\n  }\n\n  static get params () {\n    return [\n      'registry',\n      'scope',\n    ]\n  }\n\n  exec (args, cb) {\n    this.adduser(args).then(() => cb()).catch(cb)\n  }\n\n  async adduser (args) {\n    const { scope } = this.npm.flatOptions\n    const registry = this.getRegistry(this.npm.flatOptions)\n    const auth = this.getAuthType(this.npm.flatOptions)\n    const creds = this.npm.config.getCredentialsByURI(registry)\n\n    log.disableProgress()\n\n    log.notice('', `Log in on ${replaceInfo(registry)}`)\n\n    const { message, newCreds } = await auth(this.npm, {\n      ...this.npm.flatOptions,\n      creds,\n      registry,\n      scope,\n    })\n\n    await this.updateConfig({\n      newCreds,\n      registry,\n      scope,\n    })\n\n    this.npm.output(message)\n  }\n\n  getRegistry ({ scope, registry }) {\n    if (scope) {\n      const scopedRegistry = this.npm.config.get(`${scope}:registry`)\n      const cliRegistry = this.npm.config.get('registry', 'cli')\n      if (scopedRegistry && !cliRegistry)\n        return scopedRegistry\n    }\n    return registry\n  }\n\n  getAuthType ({ authType }) {\n    const type = authTypes[authType]\n\n    if (!type)\n      throw new Error('no such auth module')\n\n    return type\n  }\n\n  async updateConfig ({ newCreds, registry, scope }) {\n    this.npm.config.delete('_token', 'user') // prevent legacy pollution\n    this.npm.config.setCredentialsByURI(registry, newCreds)\n    if (scope)\n      this.npm.config.set(scope + ':registry', registry, 'user')\n    await this.npm.config.save('user')\n  }\n}\nmodule.exports = AddUser\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
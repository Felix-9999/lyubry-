{"ast":null,"code":"// module to clean out the old log files in cache/_logs\n// this is a best-effort attempt.  if a rm fails, we just\n// log a message about it and move on.  We do return a\n// Promise that succeeds when we've tried to delete everything,\n// just for the benefit of testing this function properly.\n\nconst {\n  resolve\n} = require('path');\nconst rimraf = require('rimraf');\nconst glob = require('glob');\nmodule.exports = (cache, max, warn) => {\n  /* eslint-disable promise/param-names */\n  return new Promise(done => {\n    glob(resolve(cache, '_logs', '*-debug.log'), (er, files) => {\n      if (er) return done();\n      let pending = files.length - max;\n      if (pending <= 0) return done();\n      for (let i = 0; i < files.length - max; i++) {\n        rimraf(files[i], er => {\n          if (er) warn('log', 'failed to remove log file', files[i]);\n          if (--pending === 0) done();\n        });\n      }\n    });\n  });\n};","map":{"version":3,"names":["resolve","require","rimraf","glob","module","exports","cache","max","warn","Promise","done","er","files","pending","length","i"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/cleanup-log-files.js"],"sourcesContent":["// module to clean out the old log files in cache/_logs\n// this is a best-effort attempt.  if a rm fails, we just\n// log a message about it and move on.  We do return a\n// Promise that succeeds when we've tried to delete everything,\n// just for the benefit of testing this function properly.\n\nconst { resolve } = require('path')\nconst rimraf = require('rimraf')\nconst glob = require('glob')\nmodule.exports = (cache, max, warn) => {\n  /* eslint-disable promise/param-names */\n  return new Promise(done => {\n    glob(resolve(cache, '_logs', '*-debug.log'), (er, files) => {\n      if (er)\n        return done()\n\n      let pending = files.length - max\n      if (pending <= 0)\n        return done()\n\n      for (let i = 0; i < files.length - max; i++) {\n        rimraf(files[i], (er) => {\n          if (er)\n            warn('log', 'failed to remove log file', files[i])\n\n          if (--pending === 0)\n            done()\n        })\n      }\n    })\n  })\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACnC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5BG,MAAM,CAACC,OAAO,GAAG,CAACC,KAAK,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACrC;EACA,OAAO,IAAIC,OAAO,CAACC,IAAI,IAAI;IACzBP,IAAI,CAACH,OAAO,CAACM,KAAK,EAAE,OAAO,EAAE,aAAa,CAAC,EAAE,CAACK,EAAE,EAAEC,KAAK,KAAK;MAC1D,IAAID,EAAE,EACJ,OAAOD,IAAI,CAAC,CAAC;MAEf,IAAIG,OAAO,GAAGD,KAAK,CAACE,MAAM,GAAGP,GAAG;MAChC,IAAIM,OAAO,IAAI,CAAC,EACd,OAAOH,IAAI,CAAC,CAAC;MAEf,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACE,MAAM,GAAGP,GAAG,EAAEQ,CAAC,EAAE,EAAE;QAC3Cb,MAAM,CAACU,KAAK,CAACG,CAAC,CAAC,EAAGJ,EAAE,IAAK;UACvB,IAAIA,EAAE,EACJH,IAAI,CAAC,KAAK,EAAE,2BAA2B,EAAEI,KAAK,CAACG,CAAC,CAAC,CAAC;UAEpD,IAAI,EAAEF,OAAO,KAAK,CAAC,EACjBH,IAAI,CAAC,CAAC;QACV,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
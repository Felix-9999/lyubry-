{"ast":null,"code":"// package children are represented with a Map object, but many file systems\n// are case-insensitive and unicode-normalizing, so we need to treat\n// node.children.get('FOO') and node.children.get('foo') as the same thing.\n\nconst _keys = Symbol('keys');\nconst _normKey = Symbol('normKey');\nconst normalize = s => s.normalize('NFKD').toLowerCase();\nconst OGMap = Map;\nmodule.exports = class Map extends OGMap {\n  constructor(items = []) {\n    super();\n    this[_keys] = new OGMap();\n    for (const [key, val] of items) {\n      this.set(key, val);\n    }\n  }\n  [_normKey](key) {\n    return typeof key === 'string' ? normalize(key) : key;\n  }\n  get(key) {\n    const normKey = this[_normKey](key);\n    return this[_keys].has(normKey) ? super.get(this[_keys].get(normKey)) : undefined;\n  }\n  set(key, val) {\n    const normKey = this[_normKey](key);\n    if (this[_keys].has(normKey)) {\n      super.delete(this[_keys].get(normKey));\n    }\n    this[_keys].set(normKey, key);\n    return super.set(key, val);\n  }\n  delete(key) {\n    const normKey = this[_normKey](key);\n    if (this[_keys].has(normKey)) {\n      const prevKey = this[_keys].get(normKey);\n      this[_keys].delete(normKey);\n      return super.delete(prevKey);\n    }\n  }\n  has(key) {\n    const normKey = this[_normKey](key);\n    return this[_keys].has(normKey) && super.has(this[_keys].get(normKey));\n  }\n};","map":{"version":3,"names":["_keys","Symbol","_normKey","normalize","s","toLowerCase","OGMap","Map","module","exports","constructor","items","key","val","set","get","normKey","has","undefined","delete","prevKey"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/case-insensitive-map.js"],"sourcesContent":["// package children are represented with a Map object, but many file systems\n// are case-insensitive and unicode-normalizing, so we need to treat\n// node.children.get('FOO') and node.children.get('foo') as the same thing.\n\nconst _keys = Symbol('keys')\nconst _normKey = Symbol('normKey')\nconst normalize = s => s.normalize('NFKD').toLowerCase()\nconst OGMap = Map\nmodule.exports = class Map extends OGMap {\n  constructor (items = []) {\n    super()\n    this[_keys] = new OGMap()\n    for (const [key, val] of items) {\n      this.set(key, val)\n    }\n  }\n\n  [_normKey] (key) {\n    return typeof key === 'string' ? normalize(key) : key\n  }\n\n  get (key) {\n    const normKey = this[_normKey](key)\n    return this[_keys].has(normKey) ? super.get(this[_keys].get(normKey))\n      : undefined\n  }\n\n  set (key, val) {\n    const normKey = this[_normKey](key)\n    if (this[_keys].has(normKey)) {\n      super.delete(this[_keys].get(normKey))\n    }\n    this[_keys].set(normKey, key)\n    return super.set(key, val)\n  }\n\n  delete (key) {\n    const normKey = this[_normKey](key)\n    if (this[_keys].has(normKey)) {\n      const prevKey = this[_keys].get(normKey)\n      this[_keys].delete(normKey)\n      return super.delete(prevKey)\n    }\n  }\n\n  has (key) {\n    const normKey = this[_normKey](key)\n    return this[_keys].has(normKey) && super.has(this[_keys].get(normKey))\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,KAAK,GAAGC,MAAM,CAAC,MAAM,CAAC;AAC5B,MAAMC,QAAQ,GAAGD,MAAM,CAAC,SAAS,CAAC;AAClC,MAAME,SAAS,GAAGC,CAAC,IAAIA,CAAC,CAACD,SAAS,CAAC,MAAM,CAAC,CAACE,WAAW,CAAC,CAAC;AACxD,MAAMC,KAAK,GAAGC,GAAG;AACjBC,MAAM,CAACC,OAAO,GAAG,MAAMF,GAAG,SAASD,KAAK,CAAC;EACvCI,WAAWA,CAAEC,KAAK,GAAG,EAAE,EAAE;IACvB,KAAK,CAAC,CAAC;IACP,IAAI,CAACX,KAAK,CAAC,GAAG,IAAIM,KAAK,CAAC,CAAC;IACzB,KAAK,MAAM,CAACM,GAAG,EAAEC,GAAG,CAAC,IAAIF,KAAK,EAAE;MAC9B,IAAI,CAACG,GAAG,CAACF,GAAG,EAAEC,GAAG,CAAC;IACpB;EACF;EAEA,CAACX,QAAQ,EAAGU,GAAG,EAAE;IACf,OAAO,OAAOA,GAAG,KAAK,QAAQ,GAAGT,SAAS,CAACS,GAAG,CAAC,GAAGA,GAAG;EACvD;EAEAG,GAAGA,CAAEH,GAAG,EAAE;IACR,MAAMI,OAAO,GAAG,IAAI,CAACd,QAAQ,CAAC,CAACU,GAAG,CAAC;IACnC,OAAO,IAAI,CAACZ,KAAK,CAAC,CAACiB,GAAG,CAACD,OAAO,CAAC,GAAG,KAAK,CAACD,GAAG,CAAC,IAAI,CAACf,KAAK,CAAC,CAACe,GAAG,CAACC,OAAO,CAAC,CAAC,GACjEE,SAAS;EACf;EAEAJ,GAAGA,CAAEF,GAAG,EAAEC,GAAG,EAAE;IACb,MAAMG,OAAO,GAAG,IAAI,CAACd,QAAQ,CAAC,CAACU,GAAG,CAAC;IACnC,IAAI,IAAI,CAACZ,KAAK,CAAC,CAACiB,GAAG,CAACD,OAAO,CAAC,EAAE;MAC5B,KAAK,CAACG,MAAM,CAAC,IAAI,CAACnB,KAAK,CAAC,CAACe,GAAG,CAACC,OAAO,CAAC,CAAC;IACxC;IACA,IAAI,CAAChB,KAAK,CAAC,CAACc,GAAG,CAACE,OAAO,EAAEJ,GAAG,CAAC;IAC7B,OAAO,KAAK,CAACE,GAAG,CAACF,GAAG,EAAEC,GAAG,CAAC;EAC5B;EAEAM,MAAMA,CAAEP,GAAG,EAAE;IACX,MAAMI,OAAO,GAAG,IAAI,CAACd,QAAQ,CAAC,CAACU,GAAG,CAAC;IACnC,IAAI,IAAI,CAACZ,KAAK,CAAC,CAACiB,GAAG,CAACD,OAAO,CAAC,EAAE;MAC5B,MAAMI,OAAO,GAAG,IAAI,CAACpB,KAAK,CAAC,CAACe,GAAG,CAACC,OAAO,CAAC;MACxC,IAAI,CAAChB,KAAK,CAAC,CAACmB,MAAM,CAACH,OAAO,CAAC;MAC3B,OAAO,KAAK,CAACG,MAAM,CAACC,OAAO,CAAC;IAC9B;EACF;EAEAH,GAAGA,CAAEL,GAAG,EAAE;IACR,MAAMI,OAAO,GAAG,IAAI,CAACd,QAAQ,CAAC,CAACU,GAAG,CAAC;IACnC,OAAO,IAAI,CAACZ,KAAK,CAAC,CAACiB,GAAG,CAACD,OAAO,CAAC,IAAI,KAAK,CAACC,GAAG,CAAC,IAAI,CAACjB,KAAK,CAAC,CAACe,GAAG,CAACC,OAAO,CAAC,CAAC;EACxE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const opener = require('opener');\nconst {\n  URL\n} = require('url');\n\n// attempt to open URL in web-browser, print address otherwise:\nconst open = async (npm, url, errMsg) => {\n  url = encodeURI(url);\n  const browser = npm.config.get('browser');\n  function printAlternateMsg() {\n    const json = npm.config.get('json');\n    const alternateMsg = json ? JSON.stringify({\n      title: errMsg,\n      url\n    }, null, 2) : `${errMsg}:\\n  ${url}\\n`;\n    npm.output(alternateMsg);\n  }\n  if (browser === false) {\n    printAlternateMsg();\n    return;\n  }\n  try {\n    if (!/^(https?|file):$/.test(new URL(url).protocol)) throw new Error();\n  } catch (_) {\n    throw new Error('Invalid URL: ' + url);\n  }\n  const command = browser === true ? null : browser;\n  await new Promise((resolve, reject) => {\n    opener(url, {\n      command\n    }, err => {\n      if (err) {\n        if (err.code === 'ENOENT') printAlternateMsg();else return reject(err);\n      }\n      return resolve();\n    });\n  });\n};\nmodule.exports = open;","map":{"version":3,"names":["opener","require","URL","open","npm","url","errMsg","encodeURI","browser","config","get","printAlternateMsg","json","alternateMsg","JSON","stringify","title","output","test","protocol","Error","_","command","Promise","resolve","reject","err","code","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/open-url.js"],"sourcesContent":["const opener = require('opener')\n\nconst { URL } = require('url')\n\n// attempt to open URL in web-browser, print address otherwise:\nconst open = async (npm, url, errMsg) => {\n  url = encodeURI(url)\n  const browser = npm.config.get('browser')\n\n  function printAlternateMsg () {\n    const json = npm.config.get('json')\n    const alternateMsg = json\n      ? JSON.stringify({\n        title: errMsg,\n        url,\n      }, null, 2)\n      : `${errMsg}:\\n  ${url}\\n`\n\n    npm.output(alternateMsg)\n  }\n\n  if (browser === false) {\n    printAlternateMsg()\n    return\n  }\n\n  try {\n    if (!/^(https?|file):$/.test(new URL(url).protocol))\n      throw new Error()\n  } catch (_) {\n    throw new Error('Invalid URL: ' + url)\n  }\n\n  const command = browser === true ? null : browser\n  await new Promise((resolve, reject) => {\n    opener(url, { command }, (err) => {\n      if (err) {\n        if (err.code === 'ENOENT')\n          printAlternateMsg()\n        else\n          return reject(err)\n      }\n      return resolve()\n    })\n  })\n}\n\nmodule.exports = open\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAM;EAAEC;AAAI,CAAC,GAAGD,OAAO,CAAC,KAAK,CAAC;;AAE9B;AACA,MAAME,IAAI,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,EAAEC,MAAM,KAAK;EACvCD,GAAG,GAAGE,SAAS,CAACF,GAAG,CAAC;EACpB,MAAMG,OAAO,GAAGJ,GAAG,CAACK,MAAM,CAACC,GAAG,CAAC,SAAS,CAAC;EAEzC,SAASC,iBAAiBA,CAAA,EAAI;IAC5B,MAAMC,IAAI,GAAGR,GAAG,CAACK,MAAM,CAACC,GAAG,CAAC,MAAM,CAAC;IACnC,MAAMG,YAAY,GAAGD,IAAI,GACrBE,IAAI,CAACC,SAAS,CAAC;MACfC,KAAK,EAAEV,MAAM;MACbD;IACF,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,GACT,GAAGC,MAAM,QAAQD,GAAG,IAAI;IAE5BD,GAAG,CAACa,MAAM,CAACJ,YAAY,CAAC;EAC1B;EAEA,IAAIL,OAAO,KAAK,KAAK,EAAE;IACrBG,iBAAiB,CAAC,CAAC;IACnB;EACF;EAEA,IAAI;IACF,IAAI,CAAC,kBAAkB,CAACO,IAAI,CAAC,IAAIhB,GAAG,CAACG,GAAG,CAAC,CAACc,QAAQ,CAAC,EACjD,MAAM,IAAIC,KAAK,CAAC,CAAC;EACrB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,MAAM,IAAID,KAAK,CAAC,eAAe,GAAGf,GAAG,CAAC;EACxC;EAEA,MAAMiB,OAAO,GAAGd,OAAO,KAAK,IAAI,GAAG,IAAI,GAAGA,OAAO;EACjD,MAAM,IAAIe,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACrCzB,MAAM,CAACK,GAAG,EAAE;MAAEiB;IAAQ,CAAC,EAAGI,GAAG,IAAK;MAChC,IAAIA,GAAG,EAAE;QACP,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,EACvBhB,iBAAiB,CAAC,CAAC,MAEnB,OAAOc,MAAM,CAACC,GAAG,CAAC;MACtB;MACA,OAAOF,OAAO,CAAC,CAAC;IAClB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAG1B,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
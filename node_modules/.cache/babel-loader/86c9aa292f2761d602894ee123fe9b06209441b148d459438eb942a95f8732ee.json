{"ast":null,"code":"'use strict';\n\nconst npa = require('npm-package-arg');\nconst npmFetch = require('npm-registry-fetch');\nconst semver = require('semver');\nconst {\n  URL\n} = require('url');\nconst unpublish = async (spec, opts) => {\n  spec = npa(spec);\n  // spec is used to pick the appropriate registry/auth combo.\n  opts = {\n    force: false,\n    ...opts,\n    spec\n  };\n  try {\n    const pkgUri = spec.escapedName;\n    const pkg = await npmFetch.json(pkgUri, {\n      ...opts,\n      query: {\n        write: true\n      }\n    });\n    const version = spec.rawSpec;\n    const allVersions = pkg.versions || {};\n    const versionData = allVersions[version];\n    const rawSpecs = !spec.rawSpec || spec.rawSpec === '*';\n    const onlyVersion = Object.keys(allVersions).length === 1;\n    const noVersions = !Object.keys(allVersions).length;\n\n    // if missing specific version,\n    // assumed unpublished\n    if (!versionData && !rawSpecs && !noVersions) return true;\n\n    // unpublish all versions of a package:\n    // - no specs supplied \"npm unpublish foo\"\n    // - all specs (\"*\") \"npm unpublish foo@*\"\n    // - there was only one version\n    // - has no versions field on packument\n    if (rawSpecs || onlyVersion || noVersions) {\n      await npmFetch(`${pkgUri}/-rev/${pkg._rev}`, {\n        ...opts,\n        method: 'DELETE',\n        ignoreBody: true\n      });\n      return true;\n    } else {\n      const dist = allVersions[version].dist;\n      delete allVersions[version];\n      const latestVer = pkg['dist-tags'].latest;\n\n      // deleting dist tags associated to version\n      Object.keys(pkg['dist-tags']).forEach(tag => {\n        if (pkg['dist-tags'][tag] === version) delete pkg['dist-tags'][tag];\n      });\n      if (latestVer === version) {\n        pkg['dist-tags'].latest = Object.keys(allVersions).sort(semver.compareLoose).pop();\n      }\n      delete pkg._revisions;\n      delete pkg._attachments;\n\n      // Update packument with removed versions\n      await npmFetch(`${pkgUri}/-rev/${pkg._rev}`, {\n        ...opts,\n        method: 'PUT',\n        body: pkg,\n        ignoreBody: true\n      });\n\n      // Remove the tarball itself\n      const {\n        _rev\n      } = await npmFetch.json(pkgUri, {\n        ...opts,\n        query: {\n          write: true\n        }\n      });\n      const tarballUrl = new URL(dist.tarball).pathname.substr(1);\n      await npmFetch(`${tarballUrl}/-rev/${_rev}`, {\n        ...opts,\n        method: 'DELETE',\n        ignoreBody: true\n      });\n      return true;\n    }\n  } catch (err) {\n    if (err.code !== 'E404') throw err;\n    return true;\n  }\n};\nmodule.exports = unpublish;","map":{"version":3,"names":["npa","require","npmFetch","semver","URL","unpublish","spec","opts","force","pkgUri","escapedName","pkg","json","query","write","version","rawSpec","allVersions","versions","versionData","rawSpecs","onlyVersion","Object","keys","length","noVersions","_rev","method","ignoreBody","dist","latestVer","latest","forEach","tag","sort","compareLoose","pop","_revisions","_attachments","body","tarballUrl","tarball","pathname","substr","err","code","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmpublish/unpublish.js"],"sourcesContent":["'use strict'\n\nconst npa = require('npm-package-arg')\nconst npmFetch = require('npm-registry-fetch')\nconst semver = require('semver')\nconst { URL } = require('url')\n\nconst unpublish = async (spec, opts) => {\n  spec = npa(spec)\n  // spec is used to pick the appropriate registry/auth combo.\n  opts = {\n    force: false,\n    ...opts,\n    spec,\n  }\n\n  try {\n    const pkgUri = spec.escapedName\n    const pkg = await npmFetch.json(pkgUri, {\n      ...opts,\n      query: { write: true },\n    })\n\n    const version = spec.rawSpec\n    const allVersions = pkg.versions || {}\n    const versionData = allVersions[version]\n\n    const rawSpecs = (!spec.rawSpec || spec.rawSpec === '*')\n    const onlyVersion = Object.keys(allVersions).length === 1\n    const noVersions = !Object.keys(allVersions).length\n\n    // if missing specific version,\n    // assumed unpublished\n    if (!versionData && !rawSpecs && !noVersions)\n      return true\n\n    // unpublish all versions of a package:\n    // - no specs supplied \"npm unpublish foo\"\n    // - all specs (\"*\") \"npm unpublish foo@*\"\n    // - there was only one version\n    // - has no versions field on packument\n    if (rawSpecs || onlyVersion || noVersions) {\n      await npmFetch(`${pkgUri}/-rev/${pkg._rev}`, {\n        ...opts,\n        method: 'DELETE',\n        ignoreBody: true,\n      })\n      return true\n    } else {\n      const dist = allVersions[version].dist\n      delete allVersions[version]\n\n      const latestVer = pkg['dist-tags'].latest\n\n      // deleting dist tags associated to version\n      Object.keys(pkg['dist-tags']).forEach(tag => {\n        if (pkg['dist-tags'][tag] === version)\n          delete pkg['dist-tags'][tag]\n      })\n\n      if (latestVer === version) {\n        pkg['dist-tags'].latest = Object.keys(\n          allVersions\n        ).sort(semver.compareLoose).pop()\n      }\n\n      delete pkg._revisions\n      delete pkg._attachments\n\n      // Update packument with removed versions\n      await npmFetch(`${pkgUri}/-rev/${pkg._rev}`, {\n        ...opts,\n        method: 'PUT',\n        body: pkg,\n        ignoreBody: true,\n      })\n\n      // Remove the tarball itself\n      const { _rev } = await npmFetch.json(pkgUri, {\n        ...opts,\n        query: { write: true },\n      })\n      const tarballUrl = new URL(dist.tarball).pathname.substr(1)\n      await npmFetch(`${tarballUrl}/-rev/${_rev}`, {\n        ...opts,\n        method: 'DELETE',\n        ignoreBody: true,\n      })\n      return true\n    }\n  } catch (err) {\n    if (err.code !== 'E404')\n      throw err\n\n    return true\n  }\n}\n\nmodule.exports = unpublish\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
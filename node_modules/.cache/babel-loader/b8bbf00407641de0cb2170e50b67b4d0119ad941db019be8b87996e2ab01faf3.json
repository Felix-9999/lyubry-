{"ast":null,"code":"// Separated out for easier unit testing\nmodule.exports = async process => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm';\n  const {\n    checkForBrokenNode,\n    checkForUnsupportedNode\n  } = require('../lib/utils/unsupported.js');\n  checkForBrokenNode();\n  const log = require('npmlog');\n  // pause it here so it can unpause when we've loaded the configs\n  // and know what loglevel we should be printing.\n  log.pause();\n  checkForUnsupportedNode();\n  const npm = require('../lib/npm.js');\n  const exitHandler = require('../lib/utils/exit-handler.js');\n  exitHandler.setNpm(npm);\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g') process.argv.splice(1, 1, 'npm', '-g');\n  const replaceInfo = require('../lib/utils/replace-info.js');\n  log.verbose('cli', replaceInfo(process.argv));\n  log.info('using', 'npm@%s', npm.version);\n  log.info('using', 'node@%s', process.version);\n  process.on('uncaughtException', exitHandler);\n  process.on('unhandledRejection', exitHandler);\n  const updateNotifier = require('../lib/utils/update-notifier.js');\n\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  try {\n    await npm.load();\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version);\n      return exitHandler();\n    }\n\n    // npm --versions=cli\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version'];\n      npm.config.set('usage', false, 'cli');\n    }\n    updateNotifier(npm);\n    const cmd = npm.argv.shift();\n    if (!cmd) {\n      npm.output(npm.usage);\n      process.exitCode = 1;\n      return exitHandler();\n    }\n    const impl = npm.commands[cmd];\n    if (!impl) {\n      const didYouMean = require('./utils/did-you-mean.js');\n      const suggestions = await didYouMean(npm, npm.localPrefix, cmd);\n      npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n\\nTo see a list of supported npm commands, run:\\n  npm help`);\n      process.exitCode = 1;\n      return exitHandler();\n    }\n    impl(npm.argv, exitHandler);\n  } catch (err) {\n    return exitHandler(err);\n  }\n};","map":{"version":3,"names":["module","exports","process","title","checkForBrokenNode","checkForUnsupportedNode","require","log","pause","npm","exitHandler","setNpm","argv","length","splice","replaceInfo","verbose","info","version","on","updateNotifier","load","config","get","output","set","cmd","shift","usage","exitCode","impl","commands","didYouMean","suggestions","localPrefix","err"],"sources":["C:/Users/Felo/node_modules/npm/lib/cli.js"],"sourcesContent":["// Separated out for easier unit testing\nmodule.exports = async (process) => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm'\n\n  const {\n    checkForBrokenNode,\n    checkForUnsupportedNode,\n  } = require('../lib/utils/unsupported.js')\n\n  checkForBrokenNode()\n\n  const log = require('npmlog')\n  // pause it here so it can unpause when we've loaded the configs\n  // and know what loglevel we should be printing.\n  log.pause()\n\n  checkForUnsupportedNode()\n\n  const npm = require('../lib/npm.js')\n  const exitHandler = require('../lib/utils/exit-handler.js')\n  exitHandler.setNpm(npm)\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g')\n    process.argv.splice(1, 1, 'npm', '-g')\n\n  const replaceInfo = require('../lib/utils/replace-info.js')\n  log.verbose('cli', replaceInfo(process.argv))\n\n  log.info('using', 'npm@%s', npm.version)\n  log.info('using', 'node@%s', process.version)\n\n  process.on('uncaughtException', exitHandler)\n  process.on('unhandledRejection', exitHandler)\n\n  const updateNotifier = require('../lib/utils/update-notifier.js')\n\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  try {\n    await npm.load()\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version)\n      return exitHandler()\n    }\n\n    // npm --versions=cli\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version']\n      npm.config.set('usage', false, 'cli')\n    }\n\n    updateNotifier(npm)\n\n    const cmd = npm.argv.shift()\n    if (!cmd) {\n      npm.output(npm.usage)\n      process.exitCode = 1\n      return exitHandler()\n    }\n\n    const impl = npm.commands[cmd]\n    if (!impl) {\n      const didYouMean = require('./utils/did-you-mean.js')\n      const suggestions = await didYouMean(npm, npm.localPrefix, cmd)\n      npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n\\nTo see a list of supported npm commands, run:\\n  npm help`)\n      process.exitCode = 1\n      return exitHandler()\n    }\n\n    impl(npm.argv, exitHandler)\n  } catch (err) {\n    return exitHandler(err)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
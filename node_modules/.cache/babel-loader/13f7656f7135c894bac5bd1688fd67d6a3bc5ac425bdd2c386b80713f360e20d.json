{"ast":null,"code":"const {\n  basename,\n  extname\n} = require('path');\nconst binaryExtensions = require('binary-extensions');\n\n// we should try to print patches as long as the\n// extension is not identified as binary files\nconst shouldPrintPatch = (path, opts = {}) => {\n  if (opts.diffText) return true;\n  const filename = basename(path);\n  const extension = (filename.startsWith('.') ? filename : extname(filename)).substr(1);\n  return !binaryExtensions.includes(extension);\n};\nmodule.exports = shouldPrintPatch;","map":{"version":3,"names":["basename","extname","require","binaryExtensions","shouldPrintPatch","path","opts","diffText","filename","extension","startsWith","substr","includes","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmdiff/lib/should-print-patch.js"],"sourcesContent":["const { basename, extname } = require('path')\n\nconst binaryExtensions = require('binary-extensions')\n\n// we should try to print patches as long as the\n// extension is not identified as binary files\nconst shouldPrintPatch = (path, opts = {}) => {\n  if (opts.diffText)\n    return true\n\n  const filename = basename(path)\n  const extension = (\n    filename.startsWith('.')\n      ? filename\n      : extname(filename)\n  ).substr(1)\n\n  return !binaryExtensions.includes(extension)\n}\n\nmodule.exports = shouldPrintPatch\n"],"mappings":"AAAA,MAAM;EAAEA,QAAQ;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE7C,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAErD;AACA;AACA,MAAME,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,IAAI,GAAG,CAAC,CAAC,KAAK;EAC5C,IAAIA,IAAI,CAACC,QAAQ,EACf,OAAO,IAAI;EAEb,MAAMC,QAAQ,GAAGR,QAAQ,CAACK,IAAI,CAAC;EAC/B,MAAMI,SAAS,GAAG,CAChBD,QAAQ,CAACE,UAAU,CAAC,GAAG,CAAC,GACpBF,QAAQ,GACRP,OAAO,CAACO,QAAQ,CAAC,EACrBG,MAAM,CAAC,CAAC,CAAC;EAEX,OAAO,CAACR,gBAAgB,CAACS,QAAQ,CAACH,SAAS,CAAC;AAC9C,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGV,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
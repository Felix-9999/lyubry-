{"ast":null,"code":"const {\n  spawn\n} = require('child_process');\nconst inferOwner = require('infer-owner');\nconst isPipe = (stdio = 'pipe', fd) => stdio === 'pipe' || stdio === null ? true : Array.isArray(stdio) ? isPipe(stdio[fd], fd) : false;\n\n// 'extra' object is for decorating the error a bit more\nconst promiseSpawn = (cmd, args, opts, extra = {}) => {\n  const cwd = opts.cwd || process.cwd();\n  const isRoot = process.getuid && process.getuid() === 0;\n  const {\n    uid,\n    gid\n  } = isRoot ? inferOwner.sync(cwd) : {};\n  return promiseSpawnUid(cmd, args, {\n    ...opts,\n    cwd,\n    uid,\n    gid\n  }, extra);\n};\nconst stdioResult = (stdout, stderr, {\n  stdioString,\n  stdio\n}) => stdioString ? {\n  stdout: isPipe(stdio, 1) ? Buffer.concat(stdout).toString() : null,\n  stderr: isPipe(stdio, 2) ? Buffer.concat(stderr).toString() : null\n} : {\n  stdout: isPipe(stdio, 1) ? Buffer.concat(stdout) : null,\n  stderr: isPipe(stdio, 2) ? Buffer.concat(stderr) : null\n};\nconst promiseSpawnUid = (cmd, args, opts, extra) => {\n  let proc;\n  const p = new Promise((res, rej) => {\n    proc = spawn(cmd, args, opts);\n    const stdout = [];\n    const stderr = [];\n    const reject = er => rej(Object.assign(er, {\n      cmd,\n      args,\n      ...stdioResult(stdout, stderr, opts),\n      ...extra\n    }));\n    proc.on('error', reject);\n    if (proc.stdout) {\n      proc.stdout.on('data', c => stdout.push(c)).on('error', reject);\n      proc.stdout.on('error', er => reject(er));\n    }\n    if (proc.stderr) {\n      proc.stderr.on('data', c => stderr.push(c)).on('error', reject);\n      proc.stderr.on('error', er => reject(er));\n    }\n    proc.on('close', (code, signal) => {\n      const result = {\n        cmd,\n        args,\n        code,\n        signal,\n        ...stdioResult(stdout, stderr, opts),\n        ...extra\n      };\n      if (code || signal) rej(Object.assign(new Error('command failed'), result));else res(result);\n    });\n  });\n  p.stdin = proc.stdin;\n  p.process = proc;\n  return p;\n};\nmodule.exports = promiseSpawn;","map":{"version":3,"names":["spawn","require","inferOwner","isPipe","stdio","fd","Array","isArray","promiseSpawn","cmd","args","opts","extra","cwd","process","isRoot","getuid","uid","gid","sync","promiseSpawnUid","stdioResult","stdout","stderr","stdioString","Buffer","concat","toString","proc","p","Promise","res","rej","reject","er","Object","assign","on","c","push","code","signal","result","Error","stdin","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/promise-spawn/index.js"],"sourcesContent":["const {spawn} = require('child_process')\n\nconst inferOwner = require('infer-owner')\n\nconst isPipe = (stdio = 'pipe', fd) =>\n  stdio === 'pipe' || stdio === null ? true\n  : Array.isArray(stdio) ? isPipe(stdio[fd], fd)\n  : false\n\n// 'extra' object is for decorating the error a bit more\nconst promiseSpawn = (cmd, args, opts, extra = {}) => {\n  const cwd = opts.cwd || process.cwd()\n  const isRoot = process.getuid && process.getuid() === 0\n  const { uid, gid } = isRoot ? inferOwner.sync(cwd) : {}\n  return promiseSpawnUid(cmd, args, {\n    ...opts,\n    cwd,\n    uid,\n    gid\n  }, extra)\n}\n\nconst stdioResult = (stdout, stderr, {stdioString, stdio}) =>\n  stdioString ? {\n    stdout: isPipe(stdio, 1) ? Buffer.concat(stdout).toString() : null,\n    stderr: isPipe(stdio, 2) ? Buffer.concat(stderr).toString() : null,\n  }\n  : {\n    stdout: isPipe(stdio, 1) ? Buffer.concat(stdout) : null,\n    stderr: isPipe(stdio, 2) ? Buffer.concat(stderr) : null,\n  }\n\nconst promiseSpawnUid = (cmd, args, opts, extra) => {\n  let proc\n  const p = new Promise((res, rej) => {\n    proc = spawn(cmd, args, opts)\n    const stdout = []\n    const stderr = []\n    const reject = er => rej(Object.assign(er, {\n      cmd,\n      args,\n      ...stdioResult(stdout, stderr, opts),\n      ...extra,\n    }))\n    proc.on('error', reject)\n    if (proc.stdout) {\n      proc.stdout.on('data', c => stdout.push(c)).on('error', reject)\n      proc.stdout.on('error', er => reject(er))\n    }\n    if (proc.stderr) {\n      proc.stderr.on('data', c => stderr.push(c)).on('error', reject)\n      proc.stderr.on('error', er => reject(er))\n    }\n    proc.on('close', (code, signal) => {\n      const result = {\n        cmd,\n        args,\n        code,\n        signal,\n        ...stdioResult(stdout, stderr, opts),\n        ...extra\n      }\n      if (code || signal)\n        rej(Object.assign(new Error('command failed'), result))\n      else\n        res(result)\n    })\n  })\n\n  p.stdin = proc.stdin\n  p.process = proc\n  return p\n}\n\nmodule.exports = promiseSpawn\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
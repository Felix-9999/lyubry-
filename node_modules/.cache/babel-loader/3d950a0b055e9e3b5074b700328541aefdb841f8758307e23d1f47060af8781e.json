{"ast":null,"code":"const validateOptions = options => {\n  if (typeof options !== 'object' || !options) throw new TypeError('invalid options object provided to runScript');\n  const {\n    event,\n    path,\n    scriptShell,\n    env = {},\n    stdio = 'pipe',\n    args = [],\n    cmd\n  } = options;\n  if (!event || typeof event !== 'string') throw new TypeError('valid event not provided to runScript');\n  if (!path || typeof path !== 'string') throw new TypeError('valid path not provided to runScript');\n  if (scriptShell !== undefined && typeof scriptShell !== 'string') throw new TypeError('invalid scriptShell option provided to runScript');\n  if (typeof env !== 'object' || !env) throw new TypeError('invalid env option provided to runScript');\n  if (typeof stdio !== 'string' && !Array.isArray(stdio)) throw new TypeError('invalid stdio option provided to runScript');\n  if (!Array.isArray(args) || args.some(a => typeof a !== 'string')) throw new TypeError('invalid args option provided to runScript');\n  if (cmd !== undefined && typeof cmd !== 'string') throw new TypeError('invalid cmd option provided to runScript');\n};\nmodule.exports = validateOptions;","map":{"version":3,"names":["validateOptions","options","TypeError","event","path","scriptShell","env","stdio","args","cmd","undefined","Array","isArray","some","a","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/run-script/lib/validate-options.js"],"sourcesContent":["const validateOptions = options => {\n  if (typeof options !== 'object' || !options)\n    throw new TypeError('invalid options object provided to runScript')\n\n  const {\n    event,\n    path,\n    scriptShell,\n    env = {},\n    stdio = 'pipe',\n    args = [],\n    cmd,\n  } = options\n\n  if (!event || typeof event !== 'string')\n    throw new TypeError('valid event not provided to runScript')\n  if (!path || typeof path !== 'string')\n    throw new TypeError('valid path not provided to runScript')\n  if (scriptShell !== undefined && typeof scriptShell !== 'string')\n    throw new TypeError('invalid scriptShell option provided to runScript')\n  if (typeof env !== 'object' || !env)\n    throw new TypeError('invalid env option provided to runScript')\n  if (typeof stdio !== 'string' && !Array.isArray(stdio))\n    throw new TypeError('invalid stdio option provided to runScript')\n  if (!Array.isArray(args) || args.some(a => typeof a !== 'string'))\n    throw new TypeError('invalid args option provided to runScript')\n  if (cmd !== undefined && typeof cmd !== 'string')\n    throw new TypeError('invalid cmd option provided to runScript')\n}\n\nmodule.exports = validateOptions\n"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,IAAI;EACjC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAI,CAACA,OAAO,EACzC,MAAM,IAAIC,SAAS,CAAC,8CAA8C,CAAC;EAErE,MAAM;IACJC,KAAK;IACLC,IAAI;IACJC,WAAW;IACXC,GAAG,GAAG,CAAC,CAAC;IACRC,KAAK,GAAG,MAAM;IACdC,IAAI,GAAG,EAAE;IACTC;EACF,CAAC,GAAGR,OAAO;EAEX,IAAI,CAACE,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EACrC,MAAM,IAAID,SAAS,CAAC,uCAAuC,CAAC;EAC9D,IAAI,CAACE,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EACnC,MAAM,IAAIF,SAAS,CAAC,sCAAsC,CAAC;EAC7D,IAAIG,WAAW,KAAKK,SAAS,IAAI,OAAOL,WAAW,KAAK,QAAQ,EAC9D,MAAM,IAAIH,SAAS,CAAC,kDAAkD,CAAC;EACzE,IAAI,OAAOI,GAAG,KAAK,QAAQ,IAAI,CAACA,GAAG,EACjC,MAAM,IAAIJ,SAAS,CAAC,0CAA0C,CAAC;EACjE,IAAI,OAAOK,KAAK,KAAK,QAAQ,IAAI,CAACI,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,EACpD,MAAM,IAAIL,SAAS,CAAC,4CAA4C,CAAC;EACnE,IAAI,CAACS,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,IAAIA,IAAI,CAACK,IAAI,CAACC,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,CAAC,EAC/D,MAAM,IAAIZ,SAAS,CAAC,2CAA2C,CAAC;EAClE,IAAIO,GAAG,KAAKC,SAAS,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAC9C,MAAM,IAAIP,SAAS,CAAC,0CAA0C,CAAC;AACnE,CAAC;AAEDa,MAAM,CAACC,OAAO,GAAGhB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
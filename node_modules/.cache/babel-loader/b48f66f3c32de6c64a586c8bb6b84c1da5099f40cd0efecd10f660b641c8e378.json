{"ast":null,"code":"const {\n  resolve\n} = require('path');\nconst chalk = require('chalk');\nconst runScript = require('@npmcli/run-script');\nconst {\n  isServerPackage\n} = runScript;\nconst rpj = require('read-package-json-fast');\nconst log = require('npmlog');\nconst didYouMean = require('./utils/did-you-mean.js');\nconst isWindowsShell = require('./utils/is-windows-shell.js');\nconst cmdList = ['publish', 'install', 'uninstall', 'test', 'stop', 'start', 'restart', 'version'].reduce((l, p) => l.concat(['pre' + p, p, 'post' + p]), []);\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s,\n  blue: s => s,\n  green: s => s\n};\nconst BaseCommand = require('./base-command.js');\nclass RunScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Run arbitrary package scripts';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['workspace', 'workspaces', 'if-present', 'ignore-scripts', 'script-shell'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'run-script';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['<command> [-- <args>]'];\n  }\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json');\n      const {\n        scripts = {}\n      } = await rpj(json).catch(er => ({}));\n      return Object.keys(scripts);\n    }\n  }\n  exec(args, cb) {\n    if (args.length) this.run(args).then(() => cb()).catch(cb);else this.list(args).then(() => cb()).catch(cb);\n  }\n  execWorkspaces(args, filters, cb) {\n    if (args.length) this.runWorkspaces(args, filters).then(() => cb()).catch(cb);else this.listWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n  async run([event, ...args], {\n    path = this.npm.localPrefix,\n    pkg\n  } = {}) {\n    // this || undefined is because runScript will be unhappy with the default\n    // null value\n    const scriptShell = this.npm.config.get('script-shell') || undefined;\n    pkg = pkg || (await rpj(`${path}/package.json`));\n    const {\n      scripts = {}\n    } = pkg;\n    if (event === 'restart' && !scripts.restart) scripts.restart = 'npm stop --if-present && npm start';else if (event === 'env' && !scripts.env) scripts.env = isWindowsShell ? 'SET' : 'env';\n    pkg.scripts = scripts;\n    if (!Object.prototype.hasOwnProperty.call(scripts, event) && !(event === 'start' && (await isServerPackage(path)))) {\n      if (this.npm.config.get('if-present')) return;\n      const suggestions = await didYouMean(this.npm, path, event);\n      throw new Error(`Missing script: \"${event}\"${suggestions}\\n\\nTo see a list of scripts, run:\\n  npm run`);\n    }\n\n    // positional args only added to the main event, not pre/post\n    const events = [[event, args]];\n    if (!this.npm.config.get('ignore-scripts')) {\n      if (scripts[`pre${event}`]) events.unshift([`pre${event}`, []]);\n      if (scripts[`post${event}`]) events.push([`post${event}`, []]);\n    }\n    const opts = {\n      path,\n      args,\n      scriptShell,\n      stdio: 'inherit',\n      stdioString: true,\n      pkg,\n      banner: log.level !== 'silent'\n    };\n    for (const [event, args] of events) {\n      await runScript({\n        ...opts,\n        event,\n        args\n      });\n    }\n  }\n  async list(args, path) {\n    path = path || this.npm.localPrefix;\n    const {\n      scripts,\n      name,\n      _id\n    } = await rpj(`${path}/package.json`);\n    const pkgid = _id || name;\n    const color = this.npm.color;\n    if (!scripts) return [];\n    const allScripts = Object.keys(scripts);\n    if (log.level === 'silent') return allScripts;\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(scripts, null, 2));\n      return allScripts;\n    }\n    if (this.npm.config.get('parseable')) {\n      for (const [script, cmd] of Object.entries(scripts)) this.npm.output(`${script}:${cmd}`);\n      return allScripts;\n    }\n    const indent = '\\n    ';\n    const prefix = '  ';\n    const cmds = [];\n    const runScripts = [];\n    for (const script of allScripts) {\n      const list = cmdList.includes(script) ? cmds : runScripts;\n      list.push(script);\n    }\n    const colorize = color ? chalk : nocolor;\n    if (cmds.length) {\n      this.npm.output(`${colorize.reset(colorize.bold('Lifecycle scripts'))} included in ${colorize.green(pkgid)}:`);\n    }\n    for (const script of cmds) this.npm.output(prefix + script + indent + colorize.dim(scripts[script]));\n    if (!cmds.length && runScripts.length) {\n      this.npm.output(`${colorize.bold('Scripts')} available in ${colorize.green(pkgid)} via \\`${colorize.blue('npm run-script')}\\`:`);\n    } else if (runScripts.length) this.npm.output(`\\navailable via \\`${colorize.blue('npm run-script')}\\`:`);\n    for (const script of runScripts) this.npm.output(prefix + script + indent + colorize.dim(scripts[script]));\n    this.npm.output('');\n    return allScripts;\n  }\n  async runWorkspaces(args, filters) {\n    const res = [];\n    await this.setWorkspaces(filters);\n    for (const workspacePath of this.workspacePaths) {\n      const pkg = await rpj(`${workspacePath}/package.json`);\n      const runResult = await this.run(args, {\n        path: workspacePath,\n        pkg\n      }).catch(err => {\n        log.error(`Lifecycle script \\`${args[0]}\\` failed with error:`);\n        log.error(err);\n        log.error(`  in workspace: ${pkg._id || pkg.name}`);\n        log.error(`  at location: ${workspacePath}`);\n        const scriptMissing = err.message.startsWith('Missing script');\n\n        // avoids exiting with error code in case there's scripts missing\n        // in some workspaces since other scripts might have succeeded\n        if (!scriptMissing) process.exitCode = 1;\n        return scriptMissing;\n      });\n      res.push(runResult);\n    }\n\n    // in case **all** tests are missing, then it should exit with error code\n    if (res.every(Boolean)) throw new Error(`Missing script: ${args[0]}`);\n  }\n  async listWorkspaces(args, filters) {\n    await this.setWorkspaces(filters);\n    if (log.level === 'silent') return;\n    if (this.npm.config.get('json')) {\n      const res = {};\n      for (const workspacePath of this.workspacePaths) {\n        const {\n          scripts,\n          name\n        } = await rpj(`${workspacePath}/package.json`);\n        res[name] = {\n          ...scripts\n        };\n      }\n      this.npm.output(JSON.stringify(res, null, 2));\n      return;\n    }\n    if (this.npm.config.get('parseable')) {\n      for (const workspacePath of this.workspacePaths) {\n        const {\n          scripts,\n          name\n        } = await rpj(`${workspacePath}/package.json`);\n        for (const [script, cmd] of Object.entries(scripts || {})) this.npm.output(`${name}:${script}:${cmd}`);\n      }\n      return;\n    }\n    for (const workspacePath of this.workspacePaths) await this.list(args, workspacePath);\n  }\n}\nmodule.exports = RunScript;","map":{"version":3,"names":["resolve","require","chalk","runScript","isServerPackage","rpj","log","didYouMean","isWindowsShell","cmdList","reduce","l","p","concat","nocolor","reset","s","bold","dim","blue","green","BaseCommand","RunScript","description","params","name","usage","completion","opts","argv","conf","remain","length","json","npm","localPrefix","scripts","catch","er","Object","keys","exec","args","cb","run","then","list","execWorkspaces","filters","runWorkspaces","listWorkspaces","event","path","pkg","scriptShell","config","get","undefined","restart","env","prototype","hasOwnProperty","call","suggestions","Error","events","unshift","push","stdio","stdioString","banner","level","_id","pkgid","color","allScripts","output","JSON","stringify","script","cmd","entries","indent","prefix","cmds","runScripts","includes","colorize","res","setWorkspaces","workspacePath","workspacePaths","runResult","err","error","scriptMissing","message","startsWith","process","exitCode","every","Boolean","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/run-script.js"],"sourcesContent":["const { resolve } = require('path')\nconst chalk = require('chalk')\nconst runScript = require('@npmcli/run-script')\nconst { isServerPackage } = runScript\nconst rpj = require('read-package-json-fast')\nconst log = require('npmlog')\nconst didYouMean = require('./utils/did-you-mean.js')\nconst isWindowsShell = require('./utils/is-windows-shell.js')\n\nconst cmdList = [\n  'publish',\n  'install',\n  'uninstall',\n  'test',\n  'stop',\n  'start',\n  'restart',\n  'version',\n].reduce((l, p) => l.concat(['pre' + p, p, 'post' + p]), [])\n\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s,\n  blue: s => s,\n  green: s => s,\n}\n\nconst BaseCommand = require('./base-command.js')\nclass RunScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Run arbitrary package scripts'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'workspace',\n      'workspaces',\n      'if-present',\n      'ignore-scripts',\n      'script-shell',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'run-script'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<command> [-- <args>]']\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json')\n      const { scripts = {} } = await rpj(json).catch(er => ({}))\n      return Object.keys(scripts)\n    }\n  }\n\n  exec (args, cb) {\n    if (args.length)\n      this.run(args).then(() => cb()).catch(cb)\n    else\n      this.list(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    if (args.length)\n      this.runWorkspaces(args, filters).then(() => cb()).catch(cb)\n    else\n      this.listWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async run ([event, ...args], { path = this.npm.localPrefix, pkg } = {}) {\n    // this || undefined is because runScript will be unhappy with the default\n    // null value\n    const scriptShell = this.npm.config.get('script-shell') || undefined\n\n    pkg = pkg || (await rpj(`${path}/package.json`))\n    const { scripts = {} } = pkg\n\n    if (event === 'restart' && !scripts.restart)\n      scripts.restart = 'npm stop --if-present && npm start'\n    else if (event === 'env' && !scripts.env)\n      scripts.env = isWindowsShell ? 'SET' : 'env'\n\n    pkg.scripts = scripts\n\n    if (\n      !Object.prototype.hasOwnProperty.call(scripts, event) &&\n      !(event === 'start' && await isServerPackage(path))\n    ) {\n      if (this.npm.config.get('if-present'))\n        return\n\n      const suggestions = await didYouMean(this.npm, path, event)\n      throw new Error(`Missing script: \"${event}\"${suggestions}\\n\\nTo see a list of scripts, run:\\n  npm run`)\n    }\n\n    // positional args only added to the main event, not pre/post\n    const events = [[event, args]]\n    if (!this.npm.config.get('ignore-scripts')) {\n      if (scripts[`pre${event}`])\n        events.unshift([`pre${event}`, []])\n\n      if (scripts[`post${event}`])\n        events.push([`post${event}`, []])\n    }\n\n    const opts = {\n      path,\n      args,\n      scriptShell,\n      stdio: 'inherit',\n      stdioString: true,\n      pkg,\n      banner: log.level !== 'silent',\n    }\n\n    for (const [event, args] of events) {\n      await runScript({\n        ...opts,\n        event,\n        args,\n      })\n    }\n  }\n\n  async list (args, path) {\n    path = path || this.npm.localPrefix\n    const { scripts, name, _id } = await rpj(`${path}/package.json`)\n    const pkgid = _id || name\n    const color = this.npm.color\n\n    if (!scripts)\n      return []\n\n    const allScripts = Object.keys(scripts)\n    if (log.level === 'silent')\n      return allScripts\n\n    if (this.npm.config.get('json')) {\n      this.npm.output(JSON.stringify(scripts, null, 2))\n      return allScripts\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const [script, cmd] of Object.entries(scripts))\n        this.npm.output(`${script}:${cmd}`)\n\n      return allScripts\n    }\n\n    const indent = '\\n    '\n    const prefix = '  '\n    const cmds = []\n    const runScripts = []\n    for (const script of allScripts) {\n      const list = cmdList.includes(script) ? cmds : runScripts\n      list.push(script)\n    }\n    const colorize = color ? chalk : nocolor\n\n    if (cmds.length) {\n      this.npm.output(`${\n        colorize.reset(colorize.bold('Lifecycle scripts'))} included in ${\n        colorize.green(pkgid)}:`)\n    }\n\n    for (const script of cmds)\n      this.npm.output(prefix + script + indent + colorize.dim(scripts[script]))\n\n    if (!cmds.length && runScripts.length) {\n      this.npm.output(`${\n        colorize.bold('Scripts')\n      } available in ${colorize.green(pkgid)} via \\`${\n        colorize.blue('npm run-script')}\\`:`)\n    } else if (runScripts.length)\n      this.npm.output(`\\navailable via \\`${colorize.blue('npm run-script')}\\`:`)\n\n    for (const script of runScripts)\n      this.npm.output(prefix + script + indent + colorize.dim(scripts[script]))\n\n    this.npm.output('')\n    return allScripts\n  }\n\n  async runWorkspaces (args, filters) {\n    const res = []\n    await this.setWorkspaces(filters)\n\n    for (const workspacePath of this.workspacePaths) {\n      const pkg = await rpj(`${workspacePath}/package.json`)\n      const runResult = await this.run(args, {\n        path: workspacePath,\n        pkg,\n      }).catch(err => {\n        log.error(`Lifecycle script \\`${args[0]}\\` failed with error:`)\n        log.error(err)\n        log.error(`  in workspace: ${pkg._id || pkg.name}`)\n        log.error(`  at location: ${workspacePath}`)\n\n        const scriptMissing = err.message.startsWith('Missing script')\n\n        // avoids exiting with error code in case there's scripts missing\n        // in some workspaces since other scripts might have succeeded\n        if (!scriptMissing)\n          process.exitCode = 1\n\n        return scriptMissing\n      })\n      res.push(runResult)\n    }\n\n    // in case **all** tests are missing, then it should exit with error code\n    if (res.every(Boolean))\n      throw new Error(`Missing script: ${args[0]}`)\n  }\n\n  async listWorkspaces (args, filters) {\n    await this.setWorkspaces(filters)\n\n    if (log.level === 'silent')\n      return\n\n    if (this.npm.config.get('json')) {\n      const res = {}\n      for (const workspacePath of this.workspacePaths) {\n        const { scripts, name } = await rpj(`${workspacePath}/package.json`)\n        res[name] = { ...scripts }\n      }\n      this.npm.output(JSON.stringify(res, null, 2))\n      return\n    }\n\n    if (this.npm.config.get('parseable')) {\n      for (const workspacePath of this.workspacePaths) {\n        const { scripts, name } = await rpj(`${workspacePath}/package.json`)\n        for (const [script, cmd] of Object.entries(scripts || {}))\n          this.npm.output(`${name}:${script}:${cmd}`)\n      }\n      return\n    }\n\n    for (const workspacePath of this.workspacePaths)\n      await this.list(args, workspacePath)\n  }\n}\n\nmodule.exports = RunScript\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"// make sure that bins are executable, and that they don't have\n// windows line-endings on the hashbang line.\nconst fs = require('fs');\nconst {\n  promisify\n} = require('util');\nconst execMode = 0o777 & ~process.umask();\nconst writeFileAtomic = require('write-file-atomic');\nconst open = promisify(fs.open);\nconst close = promisify(fs.close);\nconst read = promisify(fs.read);\nconst chmod = promisify(fs.chmod);\nconst readFile = promisify(fs.readFile);\nconst isWindowsHashBang = buf => buf[0] === '#'.charCodeAt(0) && buf[1] === '!'.charCodeAt(0) && /^#![^\\n]+\\r\\n/.test(buf.toString());\nconst isWindowsHashbangFile = file => {\n  const FALSE = () => false;\n  return open(file, 'r').then(fd => {\n    const buf = Buffer.alloc(2048);\n    return read(fd, buf, 0, 2048, 0).then(() => {\n      const isWHB = isWindowsHashBang(buf);\n      return close(fd).then(() => isWHB, () => isWHB);\n    },\n    // don't leak FD if read() fails\n    () => close(fd).then(FALSE, FALSE));\n  }, FALSE);\n};\nconst dos2Unix = file => readFile(file, 'utf8').then(content => writeFileAtomic(file, content.replace(/^(#![^\\n]+)\\r\\n/, '$1\\n')));\nconst fixBin = file => chmod(file, execMode).then(() => isWindowsHashbangFile(file)).then(isWHB => isWHB ? dos2Unix(file) : null);\nmodule.exports = fixBin;","map":{"version":3,"names":["fs","require","promisify","execMode","process","umask","writeFileAtomic","open","close","read","chmod","readFile","isWindowsHashBang","buf","charCodeAt","test","toString","isWindowsHashbangFile","file","FALSE","then","fd","Buffer","alloc","isWHB","dos2Unix","content","replace","fixBin","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/bin-links/lib/fix-bin.js"],"sourcesContent":["// make sure that bins are executable, and that they don't have\n// windows line-endings on the hashbang line.\nconst fs = require('fs')\nconst { promisify } = require('util')\n\nconst execMode = 0o777 & (~process.umask())\n\nconst writeFileAtomic = require('write-file-atomic')\nconst open = promisify(fs.open)\nconst close = promisify(fs.close)\nconst read = promisify(fs.read)\nconst chmod = promisify(fs.chmod)\nconst readFile = promisify(fs.readFile)\n\nconst isWindowsHashBang = buf =>\n  buf[0] === '#'.charCodeAt(0) &&\n  buf[1] === '!'.charCodeAt(0) &&\n  /^#![^\\n]+\\r\\n/.test(buf.toString())\n\nconst isWindowsHashbangFile = file => {\n  const FALSE = () => false\n  return open(file, 'r').then(fd => {\n    const buf = Buffer.alloc(2048)\n    return read(fd, buf, 0, 2048, 0)\n      .then(\n        () => {\n          const isWHB = isWindowsHashBang(buf)\n          return close(fd).then(() => isWHB, () => isWHB)\n        },\n        // don't leak FD if read() fails\n        () => close(fd).then(FALSE, FALSE)\n      )\n  }, FALSE)\n}\n\nconst dos2Unix = file =>\n  readFile(file, 'utf8').then(content =>\n    writeFileAtomic(file, content.replace(/^(#![^\\n]+)\\r\\n/, '$1\\n')))\n\nconst fixBin = file => chmod(file, execMode)\n  .then(() => isWindowsHashbangFile(file))\n  .then(isWHB => isWHB ? dos2Unix(file) : null)\n\nmodule.exports = fixBin\n"],"mappings":"AAAA;AACA;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,MAAM,CAAC;AAErC,MAAME,QAAQ,GAAG,KAAK,GAAI,CAACC,OAAO,CAACC,KAAK,CAAC,CAAE;AAE3C,MAAMC,eAAe,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAMM,IAAI,GAAGL,SAAS,CAACF,EAAE,CAACO,IAAI,CAAC;AAC/B,MAAMC,KAAK,GAAGN,SAAS,CAACF,EAAE,CAACQ,KAAK,CAAC;AACjC,MAAMC,IAAI,GAAGP,SAAS,CAACF,EAAE,CAACS,IAAI,CAAC;AAC/B,MAAMC,KAAK,GAAGR,SAAS,CAACF,EAAE,CAACU,KAAK,CAAC;AACjC,MAAMC,QAAQ,GAAGT,SAAS,CAACF,EAAE,CAACW,QAAQ,CAAC;AAEvC,MAAMC,iBAAiB,GAAGC,GAAG,IAC3BA,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,IAC5BD,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,IAC5B,eAAe,CAACC,IAAI,CAACF,GAAG,CAACG,QAAQ,CAAC,CAAC,CAAC;AAEtC,MAAMC,qBAAqB,GAAGC,IAAI,IAAI;EACpC,MAAMC,KAAK,GAAGA,CAAA,KAAM,KAAK;EACzB,OAAOZ,IAAI,CAACW,IAAI,EAAE,GAAG,CAAC,CAACE,IAAI,CAACC,EAAE,IAAI;IAChC,MAAMR,GAAG,GAAGS,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;IAC9B,OAAOd,IAAI,CAACY,EAAE,EAAER,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAC7BO,IAAI,CACH,MAAM;MACJ,MAAMI,KAAK,GAAGZ,iBAAiB,CAACC,GAAG,CAAC;MACpC,OAAOL,KAAK,CAACa,EAAE,CAAC,CAACD,IAAI,CAAC,MAAMI,KAAK,EAAE,MAAMA,KAAK,CAAC;IACjD,CAAC;IACD;IACA,MAAMhB,KAAK,CAACa,EAAE,CAAC,CAACD,IAAI,CAACD,KAAK,EAAEA,KAAK,CACnC,CAAC;EACL,CAAC,EAAEA,KAAK,CAAC;AACX,CAAC;AAED,MAAMM,QAAQ,GAAGP,IAAI,IACnBP,QAAQ,CAACO,IAAI,EAAE,MAAM,CAAC,CAACE,IAAI,CAACM,OAAO,IACjCpB,eAAe,CAACY,IAAI,EAAEQ,OAAO,CAACC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;AAEtE,MAAMC,MAAM,GAAGV,IAAI,IAAIR,KAAK,CAACQ,IAAI,EAAEf,QAAQ,CAAC,CACzCiB,IAAI,CAAC,MAAMH,qBAAqB,CAACC,IAAI,CAAC,CAAC,CACvCE,IAAI,CAACI,KAAK,IAAIA,KAAK,GAAGC,QAAQ,CAACP,IAAI,CAAC,GAAG,IAAI,CAAC;AAE/CW,MAAM,CAACC,OAAO,GAAGF,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"// Get the actual nodes corresponding to a root node's child workspaces,\n// given a list of workspace names.\nconst relpath = require('./relpath.js');\nconst getWorkspaceNodes = (tree, workspaces, log) => {\n  const wsMap = tree.workspaces;\n  if (!wsMap) {\n    log.warn('workspaces', 'filter set, but no workspaces present');\n    return [];\n  }\n  const nodes = [];\n  for (const name of workspaces) {\n    const path = wsMap.get(name);\n    if (!path) {\n      log.warn('workspaces', `${name} in filter set, but not in workspaces`);\n      continue;\n    }\n    const loc = relpath(tree.realpath, path);\n    const node = tree.inventory.get(loc);\n    if (!node) {\n      log.warn('workspaces', `${name} in filter set, but no workspace folder present`);\n      continue;\n    }\n    nodes.push(node);\n  }\n  return nodes;\n};\nmodule.exports = getWorkspaceNodes;","map":{"version":3,"names":["relpath","require","getWorkspaceNodes","tree","workspaces","log","wsMap","warn","nodes","name","path","get","loc","realpath","node","inventory","push","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/get-workspace-nodes.js"],"sourcesContent":["// Get the actual nodes corresponding to a root node's child workspaces,\n// given a list of workspace names.\nconst relpath = require('./relpath.js')\nconst getWorkspaceNodes = (tree, workspaces, log) => {\n  const wsMap = tree.workspaces\n  if (!wsMap) {\n    log.warn('workspaces', 'filter set, but no workspaces present')\n    return []\n  }\n\n  const nodes = []\n  for (const name of workspaces) {\n    const path = wsMap.get(name)\n    if (!path) {\n      log.warn('workspaces', `${name} in filter set, but not in workspaces`)\n      continue\n    }\n\n    const loc = relpath(tree.realpath, path)\n    const node = tree.inventory.get(loc)\n\n    if (!node) {\n      log.warn('workspaces', `${name} in filter set, but no workspace folder present`)\n      continue\n    }\n\n    nodes.push(node)\n  }\n\n  return nodes\n}\n\nmodule.exports = getWorkspaceNodes\n"],"mappings":"AAAA;AACA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AACvC,MAAMC,iBAAiB,GAAGA,CAACC,IAAI,EAAEC,UAAU,EAAEC,GAAG,KAAK;EACnD,MAAMC,KAAK,GAAGH,IAAI,CAACC,UAAU;EAC7B,IAAI,CAACE,KAAK,EAAE;IACVD,GAAG,CAACE,IAAI,CAAC,YAAY,EAAE,uCAAuC,CAAC;IAC/D,OAAO,EAAE;EACX;EAEA,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,MAAMC,IAAI,IAAIL,UAAU,EAAE;IAC7B,MAAMM,IAAI,GAAGJ,KAAK,CAACK,GAAG,CAACF,IAAI,CAAC;IAC5B,IAAI,CAACC,IAAI,EAAE;MACTL,GAAG,CAACE,IAAI,CAAC,YAAY,EAAE,GAAGE,IAAI,uCAAuC,CAAC;MACtE;IACF;IAEA,MAAMG,GAAG,GAAGZ,OAAO,CAACG,IAAI,CAACU,QAAQ,EAAEH,IAAI,CAAC;IACxC,MAAMI,IAAI,GAAGX,IAAI,CAACY,SAAS,CAACJ,GAAG,CAACC,GAAG,CAAC;IAEpC,IAAI,CAACE,IAAI,EAAE;MACTT,GAAG,CAACE,IAAI,CAAC,YAAY,EAAE,GAAGE,IAAI,iDAAiD,CAAC;MAChF;IACF;IAEAD,KAAK,CAACQ,IAAI,CAACF,IAAI,CAAC;EAClB;EAEA,OAAON,KAAK;AACd,CAAC;AAEDS,MAAM,CAACC,OAAO,GAAGhB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
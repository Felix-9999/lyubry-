{"ast":null,"code":"const updateWorkspaces = ({\n  content,\n  originalContent = {}\n}) => {\n  const newWorkspaces = content.workspaces;\n  if (!newWorkspaces) return originalContent;\n\n  // validate workspaces content being appended\n  const hasInvalidWorkspaces = () => newWorkspaces.some(w => !(typeof w === 'string'));\n  if (!newWorkspaces.length || hasInvalidWorkspaces()) {\n    throw Object.assign(new TypeError('workspaces should be an array of strings.'), {\n      code: 'EWORKSPACESINVALID'\n    });\n  }\n  return {\n    ...originalContent,\n    workspaces: [...newWorkspaces]\n  };\n};\nmodule.exports = updateWorkspaces;","map":{"version":3,"names":["updateWorkspaces","content","originalContent","newWorkspaces","workspaces","hasInvalidWorkspaces","some","w","length","Object","assign","TypeError","code","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/package-json/lib/update-workspaces.js"],"sourcesContent":["const updateWorkspaces = ({ content, originalContent = {} }) => {\n  const newWorkspaces = content.workspaces\n\n  if (!newWorkspaces)\n    return originalContent\n\n  // validate workspaces content being appended\n  const hasInvalidWorkspaces = () =>\n    newWorkspaces.some(w => !(typeof w === 'string'))\n  if (!newWorkspaces.length || hasInvalidWorkspaces()) {\n    throw Object.assign(\n      new TypeError('workspaces should be an array of strings.'),\n      { code: 'EWORKSPACESINVALID' }\n    )\n  }\n\n  return {\n    ...originalContent,\n    workspaces: [\n      ...newWorkspaces,\n    ],\n  }\n}\n\nmodule.exports = updateWorkspaces\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGA,CAAC;EAAEC,OAAO;EAAEC,eAAe,GAAG,CAAC;AAAE,CAAC,KAAK;EAC9D,MAAMC,aAAa,GAAGF,OAAO,CAACG,UAAU;EAExC,IAAI,CAACD,aAAa,EAChB,OAAOD,eAAe;;EAExB;EACA,MAAMG,oBAAoB,GAAGA,CAAA,KAC3BF,aAAa,CAACG,IAAI,CAACC,CAAC,IAAI,EAAE,OAAOA,CAAC,KAAK,QAAQ,CAAC,CAAC;EACnD,IAAI,CAACJ,aAAa,CAACK,MAAM,IAAIH,oBAAoB,CAAC,CAAC,EAAE;IACnD,MAAMI,MAAM,CAACC,MAAM,CACjB,IAAIC,SAAS,CAAC,2CAA2C,CAAC,EAC1D;MAAEC,IAAI,EAAE;IAAqB,CAC/B,CAAC;EACH;EAEA,OAAO;IACL,GAAGV,eAAe;IAClBE,UAAU,EAAE,CACV,GAAGD,aAAa;EAEpB,CAAC;AACH,CAAC;AAEDU,MAAM,CAACC,OAAO,GAAGd,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
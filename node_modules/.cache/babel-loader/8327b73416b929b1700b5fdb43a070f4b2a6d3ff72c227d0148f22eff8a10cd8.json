{"ast":null,"code":"// prune extraneous packages\nconst Arborist = require('@npmcli/arborist');\nconst reifyFinish = require('./utils/reify-finish.js');\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\nclass Prune extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Remove extraneous packages';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'prune';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['omit', 'dry-run', 'json', ...super.params];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[[<@scope>/]<pkg>...]'];\n  }\n  exec(args, cb) {\n    this.prune().then(() => cb()).catch(cb);\n  }\n  async prune() {\n    const where = this.npm.prefix;\n    const opts = {\n      ...this.npm.flatOptions,\n      path: where,\n      log: this.npm.log,\n      workspaces: this.workspaceNames\n    };\n    const arb = new Arborist(opts);\n    await arb.prune(opts);\n    await reifyFinish(this.npm, arb);\n  }\n}\nmodule.exports = Prune;","map":{"version":3,"names":["Arborist","require","reifyFinish","ArboristWorkspaceCmd","Prune","description","name","params","usage","exec","args","cb","prune","then","catch","where","npm","prefix","opts","flatOptions","path","log","workspaces","workspaceNames","arb","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/prune.js"],"sourcesContent":["// prune extraneous packages\nconst Arborist = require('@npmcli/arborist')\nconst reifyFinish = require('./utils/reify-finish.js')\n\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\nclass Prune extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Remove extraneous packages'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'prune'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['omit', 'dry-run', 'json', ...super.params]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[[<@scope>/]<pkg>...]']\n  }\n\n  exec (args, cb) {\n    this.prune().then(() => cb()).catch(cb)\n  }\n\n  async prune () {\n    const where = this.npm.prefix\n    const opts = {\n      ...this.npm.flatOptions,\n      path: where,\n      log: this.npm.log,\n      workspaces: this.workspaceNames,\n    }\n    const arb = new Arborist(opts)\n    await arb.prune(opts)\n    await reifyFinish(this.npm, arb)\n  }\n}\nmodule.exports = Prune\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAMC,WAAW,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAEtD,MAAME,oBAAoB,GAAGF,OAAO,CAAC,8BAA8B,CAAC;AACpE,MAAMG,KAAK,SAASD,oBAAoB,CAAC;EACvC;EACA,WAAWE,WAAWA,CAAA,EAAI;IACxB,OAAO,4BAA4B;EACrC;;EAEA;EACA,WAAWC,IAAIA,CAAA,EAAI;IACjB,OAAO,OAAO;EAChB;;EAEA;EACA,WAAWC,MAAMA,CAAA,EAAI;IACnB,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,KAAK,CAACA,MAAM,CAAC;EACrD;;EAEA;EACA,WAAWC,KAAKA,CAAA,EAAI;IAClB,OAAO,CAAC,uBAAuB,CAAC;EAClC;EAEAC,IAAIA,CAAEC,IAAI,EAAEC,EAAE,EAAE;IACd,IAAI,CAACC,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,MAAMF,EAAE,CAAC,CAAC,CAAC,CAACG,KAAK,CAACH,EAAE,CAAC;EACzC;EAEA,MAAMC,KAAKA,CAAA,EAAI;IACb,MAAMG,KAAK,GAAG,IAAI,CAACC,GAAG,CAACC,MAAM;IAC7B,MAAMC,IAAI,GAAG;MACX,GAAG,IAAI,CAACF,GAAG,CAACG,WAAW;MACvBC,IAAI,EAAEL,KAAK;MACXM,GAAG,EAAE,IAAI,CAACL,GAAG,CAACK,GAAG;MACjBC,UAAU,EAAE,IAAI,CAACC;IACnB,CAAC;IACD,MAAMC,GAAG,GAAG,IAAIxB,QAAQ,CAACkB,IAAI,CAAC;IAC9B,MAAMM,GAAG,CAACZ,KAAK,CAACM,IAAI,CAAC;IACrB,MAAMhB,WAAW,CAAC,IAAI,CAACc,GAAG,EAAEQ,GAAG,CAAC;EAClC;AACF;AACAC,MAAM,CAACC,OAAO,GAAGtB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
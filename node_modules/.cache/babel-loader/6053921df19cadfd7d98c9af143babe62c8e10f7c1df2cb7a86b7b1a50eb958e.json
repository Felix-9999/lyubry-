{"ast":null,"code":"// this is called when an ERESOLVE error is caught in the exit-handler,\n// or when there's a log.warn('eresolve', msg, explanation), to turn it\n// into a human-intelligible explanation of what's wrong and how to fix.\nconst {\n  writeFileSync\n} = require('fs');\nconst {\n  explainEdge,\n  explainNode,\n  printNode\n} = require('./explain-dep.js');\n\n// expl is an explanation object that comes from Arborist.  It looks like:\n// Depth is how far we want to want to descend into the object making a report.\n// The full report (ie, depth=Infinity) is always written to the cache folder\n// at ${cache}/eresolve-report.txt along with full json.\nconst explain = (expl, color, depth) => {\n  const {\n    edge,\n    dep,\n    current,\n    peerConflict,\n    currentEdge\n  } = expl;\n  const out = [];\n  const whileInstalling = dep && dep.whileInstalling || current && current.whileInstalling || edge && edge.from && edge.from.whileInstalling;\n  if (whileInstalling) out.push('While resolving: ' + printNode(whileInstalling, color));\n\n  // it \"should\" be impossible for an ERESOLVE explanation to lack both\n  // current and currentEdge, but better to have a less helpful error\n  // than a crashing failure.\n  if (current) out.push('Found: ' + explainNode(current, depth, color));else if (peerConflict && peerConflict.current) out.push('Found: ' + explainNode(peerConflict.current, depth, color));else if (currentEdge) out.push('Found: ' + explainEdge(currentEdge, depth, color));else /* istanbul ignore else - should always have one */if (edge) out.push('Found: ' + explainEdge(edge, depth, color));\n  out.push('\\nCould not resolve dependency:\\n' + explainEdge(edge, depth, color));\n  if (peerConflict) {\n    const heading = '\\nConflicting peer dependency:';\n    const pc = explainNode(peerConflict.peer, depth, color);\n    out.push(heading + ' ' + pc);\n  }\n  return out.join('\\n');\n};\n\n// generate a full verbose report and tell the user how to fix it\nconst report = (expl, color, fullReport) => {\n  const orNoStrict = expl.strictPeerDeps ? '--no-strict-peer-deps, ' : '';\n  const fix = `Fix the upstream dependency conflict, or retry\nthis command with ${orNoStrict}--force, or --legacy-peer-deps\nto accept an incorrect (and potentially broken) dependency resolution.`;\n  writeFileSync(fullReport, `# npm resolution error report\n\n${new Date().toISOString()}\n\n${explain(expl, false, Infinity)}\n\n${fix}\n\nRaw JSON explanation object:\n\n${JSON.stringify(expl, null, 2)}\n`, 'utf8');\n  return explain(expl, color, 4) + `\\n\\n${fix}\\n\\nSee ${fullReport} for a full report.`;\n};\nmodule.exports = {\n  explain,\n  report\n};","map":{"version":3,"names":["writeFileSync","require","explainEdge","explainNode","printNode","explain","expl","color","depth","edge","dep","current","peerConflict","currentEdge","out","whileInstalling","from","push","heading","pc","peer","join","report","fullReport","orNoStrict","strictPeerDeps","fix","Date","toISOString","Infinity","JSON","stringify","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/explain-eresolve.js"],"sourcesContent":["// this is called when an ERESOLVE error is caught in the exit-handler,\n// or when there's a log.warn('eresolve', msg, explanation), to turn it\n// into a human-intelligible explanation of what's wrong and how to fix.\nconst { writeFileSync } = require('fs')\nconst { explainEdge, explainNode, printNode } = require('./explain-dep.js')\n\n// expl is an explanation object that comes from Arborist.  It looks like:\n// Depth is how far we want to want to descend into the object making a report.\n// The full report (ie, depth=Infinity) is always written to the cache folder\n// at ${cache}/eresolve-report.txt along with full json.\nconst explain = (expl, color, depth) => {\n  const { edge, dep, current, peerConflict, currentEdge } = expl\n\n  const out = []\n  const whileInstalling = dep && dep.whileInstalling ||\n    current && current.whileInstalling ||\n    edge && edge.from && edge.from.whileInstalling\n  if (whileInstalling)\n    out.push('While resolving: ' + printNode(whileInstalling, color))\n\n  // it \"should\" be impossible for an ERESOLVE explanation to lack both\n  // current and currentEdge, but better to have a less helpful error\n  // than a crashing failure.\n  if (current)\n    out.push('Found: ' + explainNode(current, depth, color))\n  else if (peerConflict && peerConflict.current)\n    out.push('Found: ' + explainNode(peerConflict.current, depth, color))\n  else if (currentEdge)\n    out.push('Found: ' + explainEdge(currentEdge, depth, color))\n  else /* istanbul ignore else - should always have one */ if (edge)\n    out.push('Found: ' + explainEdge(edge, depth, color))\n\n  out.push('\\nCould not resolve dependency:\\n' +\n    explainEdge(edge, depth, color))\n\n  if (peerConflict) {\n    const heading = '\\nConflicting peer dependency:'\n    const pc = explainNode(peerConflict.peer, depth, color)\n    out.push(heading + ' ' + pc)\n  }\n\n  return out.join('\\n')\n}\n\n// generate a full verbose report and tell the user how to fix it\nconst report = (expl, color, fullReport) => {\n  const orNoStrict = expl.strictPeerDeps ? '--no-strict-peer-deps, ' : ''\n  const fix = `Fix the upstream dependency conflict, or retry\nthis command with ${orNoStrict}--force, or --legacy-peer-deps\nto accept an incorrect (and potentially broken) dependency resolution.`\n\n  writeFileSync(fullReport, `# npm resolution error report\n\n${new Date().toISOString()}\n\n${explain(expl, false, Infinity)}\n\n${fix}\n\nRaw JSON explanation object:\n\n${JSON.stringify(expl, null, 2)}\n`, 'utf8')\n\n  return explain(expl, color, 4) +\n    `\\n\\n${fix}\\n\\nSee ${fullReport} for a full report.`\n}\n\nmodule.exports = {\n  explain,\n  report,\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAM;EAAEA;AAAc,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC;AACvC,MAAM;EAAEC,WAAW;EAAEC,WAAW;EAAEC;AAAU,CAAC,GAAGH,OAAO,CAAC,kBAAkB,CAAC;;AAE3E;AACA;AACA;AACA;AACA,MAAMI,OAAO,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACtC,MAAM;IAAEC,IAAI;IAAEC,GAAG;IAAEC,OAAO;IAAEC,YAAY;IAAEC;EAAY,CAAC,GAAGP,IAAI;EAE9D,MAAMQ,GAAG,GAAG,EAAE;EACd,MAAMC,eAAe,GAAGL,GAAG,IAAIA,GAAG,CAACK,eAAe,IAChDJ,OAAO,IAAIA,OAAO,CAACI,eAAe,IAClCN,IAAI,IAAIA,IAAI,CAACO,IAAI,IAAIP,IAAI,CAACO,IAAI,CAACD,eAAe;EAChD,IAAIA,eAAe,EACjBD,GAAG,CAACG,IAAI,CAAC,mBAAmB,GAAGb,SAAS,CAACW,eAAe,EAAER,KAAK,CAAC,CAAC;;EAEnE;EACA;EACA;EACA,IAAII,OAAO,EACTG,GAAG,CAACG,IAAI,CAAC,SAAS,GAAGd,WAAW,CAACQ,OAAO,EAAEH,KAAK,EAAED,KAAK,CAAC,CAAC,MACrD,IAAIK,YAAY,IAAIA,YAAY,CAACD,OAAO,EAC3CG,GAAG,CAACG,IAAI,CAAC,SAAS,GAAGd,WAAW,CAACS,YAAY,CAACD,OAAO,EAAEH,KAAK,EAAED,KAAK,CAAC,CAAC,MAClE,IAAIM,WAAW,EAClBC,GAAG,CAACG,IAAI,CAAC,SAAS,GAAGf,WAAW,CAACW,WAAW,EAAEL,KAAK,EAAED,KAAK,CAAC,CAAC,MACzD,mDAAoD,IAAIE,IAAI,EAC/DK,GAAG,CAACG,IAAI,CAAC,SAAS,GAAGf,WAAW,CAACO,IAAI,EAAED,KAAK,EAAED,KAAK,CAAC,CAAC;EAEvDO,GAAG,CAACG,IAAI,CAAC,mCAAmC,GAC1Cf,WAAW,CAACO,IAAI,EAAED,KAAK,EAAED,KAAK,CAAC,CAAC;EAElC,IAAIK,YAAY,EAAE;IAChB,MAAMM,OAAO,GAAG,gCAAgC;IAChD,MAAMC,EAAE,GAAGhB,WAAW,CAACS,YAAY,CAACQ,IAAI,EAAEZ,KAAK,EAAED,KAAK,CAAC;IACvDO,GAAG,CAACG,IAAI,CAACC,OAAO,GAAG,GAAG,GAAGC,EAAE,CAAC;EAC9B;EAEA,OAAOL,GAAG,CAACO,IAAI,CAAC,IAAI,CAAC;AACvB,CAAC;;AAED;AACA,MAAMC,MAAM,GAAGA,CAAChB,IAAI,EAAEC,KAAK,EAAEgB,UAAU,KAAK;EAC1C,MAAMC,UAAU,GAAGlB,IAAI,CAACmB,cAAc,GAAG,yBAAyB,GAAG,EAAE;EACvE,MAAMC,GAAG,GAAG;AACd,oBAAoBF,UAAU;AAC9B,uEAAuE;EAErExB,aAAa,CAACuB,UAAU,EAAE;AAC5B;AACA,EAAE,IAAII,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;AAC1B;AACA,EAAEvB,OAAO,CAACC,IAAI,EAAE,KAAK,EAAEuB,QAAQ,CAAC;AAChC;AACA,EAAEH,GAAG;AACL;AACA;AACA;AACA,EAAEI,IAAI,CAACC,SAAS,CAACzB,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC/B,CAAC,EAAE,MAAM,CAAC;EAER,OAAOD,OAAO,CAACC,IAAI,EAAEC,KAAK,EAAE,CAAC,CAAC,GAC5B,OAAOmB,GAAG,WAAWH,UAAU,qBAAqB;AACxD,CAAC;AAEDS,MAAM,CAACC,OAAO,GAAG;EACf5B,OAAO;EACPiB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
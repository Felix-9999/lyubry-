{"ast":null,"code":"module.exports = {\n  diff: diff,\n  jsonPatchPathConverter: jsonPatchPathConverter\n};\n\n/*\n  const obj1 = {a: 4, b: 5};\n  const obj2 = {a: 3, b: 5};\n  const obj3 = {a: 4, c: 5};\n\n  diff(obj1, obj2);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n  ]\n\n  diff(obj2, obj3);\n  [\n    { \"op\": \"remove\", \"path\": ['b'] },\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n  ]\n\n  // using converter to generate jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  diff(obj1, obj2, jsonPatchPathConverter);\n  [\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 3 }\n  ]\n\n  diff(obj2, obj3, jsonPatchPathConverter);\n  [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ]\n\n  // arrays\n  const obj4 = {a: 4, b: [1, 2, 3]};\n  const obj5 = {a: 3, b: [1, 2, 4]};\n  const obj6 = {a: 3, b: [1, 2, 4, 5]};\n\n  diff(obj4, obj5);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n  ]\n\n  diff(obj5, obj6);\n  [\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 5 }\n  ]\n\n  // nested paths\n  const obj7 = {a: 4, b: {c: 3}};\n  const obj8 = {a: 4, b: {c: 4}};\n  const obj9 = {a: 5, b: {d: 4}};\n\n  diff(obj7, obj8);\n  [\n    { \"op\": \"replace\", \"path\": ['b', 'c'], \"value\": 4 }\n  ]\n\n  diff(obj8, obj9);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]\n*/\n\nfunction diff(obj1, obj2, pathConverter) {\n  if (!obj1 || typeof obj1 != 'object' || !obj2 || typeof obj2 != 'object') {\n    throw new Error('both arguments must be objects or arrays');\n  }\n  pathConverter || (pathConverter = function (arr) {\n    return arr;\n  });\n  function getDiff(obj1, obj2, basePath, diffs) {\n    var obj1Keys = Object.keys(obj1);\n    var obj1KeysLength = obj1Keys.length;\n    var obj2Keys = Object.keys(obj2);\n    var obj2KeysLength = obj2Keys.length;\n    var path;\n    for (var i = 0; i < obj1KeysLength; i++) {\n      var key = Array.isArray(obj1) ? Number(obj1Keys[i]) : obj1Keys[i];\n      if (!(key in obj2)) {\n        path = basePath.concat(key);\n        diffs.remove.push({\n          op: 'remove',\n          path: pathConverter(path)\n        });\n      }\n    }\n    for (var i = 0; i < obj2KeysLength; i++) {\n      var key = Array.isArray(obj2) ? Number(obj2Keys[i]) : obj2Keys[i];\n      var obj1AtKey = obj1[key];\n      var obj2AtKey = obj2[key];\n      if (!(key in obj1)) {\n        path = basePath.concat(key);\n        var obj2Value = obj2[key];\n        diffs.add.push({\n          op: 'add',\n          path: pathConverter(path),\n          value: obj2Value\n        });\n      } else if (obj1AtKey !== obj2AtKey) {\n        if (Object(obj1AtKey) !== obj1AtKey || Object(obj2AtKey) !== obj2AtKey) {\n          path = pushReplace(path, basePath, key, diffs, pathConverter, obj2);\n        } else {\n          if (!Object.keys(obj1AtKey).length && !Object.keys(obj2AtKey).length && String(obj1AtKey) != String(obj2AtKey)) {\n            path = pushReplace(path, basePath, key, diffs, pathConverter, obj2);\n          } else {\n            getDiff(obj1[key], obj2[key], basePath.concat(key), diffs);\n          }\n        }\n      }\n    }\n    return diffs.remove.reverse().concat(diffs.replace).concat(diffs.add);\n  }\n  return getDiff(obj1, obj2, [], {\n    remove: [],\n    replace: [],\n    add: []\n  });\n}\nfunction pushReplace(path, basePath, key, diffs, pathConverter, obj2) {\n  path = basePath.concat(key);\n  diffs.replace.push({\n    op: 'replace',\n    path: pathConverter(path),\n    value: obj2[key]\n  });\n  return path;\n}\nfunction jsonPatchPathConverter(arrayPath) {\n  return [''].concat(arrayPath).join('/');\n}","map":{"version":3,"names":["module","exports","diff","jsonPatchPathConverter","obj1","obj2","pathConverter","Error","arr","getDiff","basePath","diffs","obj1Keys","Object","keys","obj1KeysLength","length","obj2Keys","obj2KeysLength","path","i","key","Array","isArray","Number","concat","remove","push","op","obj1AtKey","obj2AtKey","obj2Value","add","value","pushReplace","String","reverse","replace","arrayPath","join"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/just-diff/index.js"],"sourcesContent":["module.exports = {\n  diff: diff,\n  jsonPatchPathConverter: jsonPatchPathConverter,\n};\n\n/*\n  const obj1 = {a: 4, b: 5};\n  const obj2 = {a: 3, b: 5};\n  const obj3 = {a: 4, c: 5};\n\n  diff(obj1, obj2);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n  ]\n\n  diff(obj2, obj3);\n  [\n    { \"op\": \"remove\", \"path\": ['b'] },\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n  ]\n\n  // using converter to generate jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  diff(obj1, obj2, jsonPatchPathConverter);\n  [\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 3 }\n  ]\n\n  diff(obj2, obj3, jsonPatchPathConverter);\n  [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ]\n\n  // arrays\n  const obj4 = {a: 4, b: [1, 2, 3]};\n  const obj5 = {a: 3, b: [1, 2, 4]};\n  const obj6 = {a: 3, b: [1, 2, 4, 5]};\n\n  diff(obj4, obj5);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n  ]\n\n  diff(obj5, obj6);\n  [\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 5 }\n  ]\n\n  // nested paths\n  const obj7 = {a: 4, b: {c: 3}};\n  const obj8 = {a: 4, b: {c: 4}};\n  const obj9 = {a: 5, b: {d: 4}};\n\n  diff(obj7, obj8);\n  [\n    { \"op\": \"replace\", \"path\": ['b', 'c'], \"value\": 4 }\n  ]\n\n  diff(obj8, obj9);\n  [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]\n*/\n\nfunction diff(obj1, obj2, pathConverter) {\n  if (!obj1 || typeof obj1 != 'object' || !obj2 || typeof obj2 != 'object') {\n    throw new Error('both arguments must be objects or arrays');\n  }\n\n  pathConverter ||\n    (pathConverter = function(arr) {\n      return arr;\n    });\n\n  function getDiff(obj1, obj2, basePath, diffs) {\n    var obj1Keys = Object.keys(obj1);\n    var obj1KeysLength = obj1Keys.length;\n    var obj2Keys = Object.keys(obj2);\n    var obj2KeysLength = obj2Keys.length;\n    var path;\n\n    for (var i = 0; i < obj1KeysLength; i++) {\n      var key = Array.isArray(obj1) ? Number(obj1Keys[i]) : obj1Keys[i];\n      if (!(key in obj2)) {\n        path = basePath.concat(key);\n        diffs.remove.push({\n          op: 'remove',\n          path: pathConverter(path),\n        });\n      }\n    }\n\n    for (var i = 0; i < obj2KeysLength; i++) {\n      var key = Array.isArray(obj2) ? Number(obj2Keys[i]) : obj2Keys[i];\n      var obj1AtKey = obj1[key];\n      var obj2AtKey = obj2[key];\n      if (!(key in obj1)) {\n        path = basePath.concat(key);\n        var obj2Value = obj2[key];\n        diffs.add.push({\n          op: 'add',\n          path: pathConverter(path),\n          value: obj2Value,\n        });\n      } else if (obj1AtKey !== obj2AtKey) {\n        if (\n          Object(obj1AtKey) !== obj1AtKey ||\n          Object(obj2AtKey) !== obj2AtKey\n        ) {\n          path = pushReplace(path, basePath, key, diffs, pathConverter, obj2);\n        } else {\n          if (\n            !Object.keys(obj1AtKey).length &&\n            !Object.keys(obj2AtKey).length &&\n            String(obj1AtKey) != String(obj2AtKey)\n          ) {\n            path = pushReplace(path, basePath, key, diffs, pathConverter, obj2);\n          } else {\n            getDiff(obj1[key], obj2[key], basePath.concat(key), diffs);\n          }\n        }\n      }\n    }\n\n    return diffs.remove\n      .reverse()\n      .concat(diffs.replace)\n      .concat(diffs.add);\n  }\n  return getDiff(obj1, obj2, [], {remove: [], replace: [], add: []});\n}\n\nfunction pushReplace(path, basePath, key, diffs, pathConverter, obj2) {\n  path = basePath.concat(key);\n  diffs.replace.push({\n    op: 'replace',\n    path: pathConverter(path),\n    value: obj2[key],\n  });\n  return path;\n}\n\nfunction jsonPatchPathConverter(arrayPath) {\n  return [''].concat(arrayPath).join('/');\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAG;EACfC,IAAI,EAAEA,IAAI;EACVC,sBAAsB,EAAEA;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,IAAIA,CAACE,IAAI,EAAEC,IAAI,EAAEC,aAAa,EAAE;EACvC,IAAI,CAACF,IAAI,IAAI,OAAOA,IAAI,IAAI,QAAQ,IAAI,CAACC,IAAI,IAAI,OAAOA,IAAI,IAAI,QAAQ,EAAE;IACxE,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EAEAD,aAAa,KACVA,aAAa,GAAG,SAAAA,CAASE,GAAG,EAAE;IAC7B,OAAOA,GAAG;EACZ,CAAC,CAAC;EAEJ,SAASC,OAAOA,CAACL,IAAI,EAAEC,IAAI,EAAEK,QAAQ,EAAEC,KAAK,EAAE;IAC5C,IAAIC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACV,IAAI,CAAC;IAChC,IAAIW,cAAc,GAAGH,QAAQ,CAACI,MAAM;IACpC,IAAIC,QAAQ,GAAGJ,MAAM,CAACC,IAAI,CAACT,IAAI,CAAC;IAChC,IAAIa,cAAc,GAAGD,QAAQ,CAACD,MAAM;IACpC,IAAIG,IAAI;IAER,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,EAAEK,CAAC,EAAE,EAAE;MACvC,IAAIC,GAAG,GAAGC,KAAK,CAACC,OAAO,CAACnB,IAAI,CAAC,GAAGoB,MAAM,CAACZ,QAAQ,CAACQ,CAAC,CAAC,CAAC,GAAGR,QAAQ,CAACQ,CAAC,CAAC;MACjE,IAAI,EAAEC,GAAG,IAAIhB,IAAI,CAAC,EAAE;QAClBc,IAAI,GAAGT,QAAQ,CAACe,MAAM,CAACJ,GAAG,CAAC;QAC3BV,KAAK,CAACe,MAAM,CAACC,IAAI,CAAC;UAChBC,EAAE,EAAE,QAAQ;UACZT,IAAI,EAAEb,aAAa,CAACa,IAAI;QAC1B,CAAC,CAAC;MACJ;IACF;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,cAAc,EAAEE,CAAC,EAAE,EAAE;MACvC,IAAIC,GAAG,GAAGC,KAAK,CAACC,OAAO,CAAClB,IAAI,CAAC,GAAGmB,MAAM,CAACP,QAAQ,CAACG,CAAC,CAAC,CAAC,GAAGH,QAAQ,CAACG,CAAC,CAAC;MACjE,IAAIS,SAAS,GAAGzB,IAAI,CAACiB,GAAG,CAAC;MACzB,IAAIS,SAAS,GAAGzB,IAAI,CAACgB,GAAG,CAAC;MACzB,IAAI,EAAEA,GAAG,IAAIjB,IAAI,CAAC,EAAE;QAClBe,IAAI,GAAGT,QAAQ,CAACe,MAAM,CAACJ,GAAG,CAAC;QAC3B,IAAIU,SAAS,GAAG1B,IAAI,CAACgB,GAAG,CAAC;QACzBV,KAAK,CAACqB,GAAG,CAACL,IAAI,CAAC;UACbC,EAAE,EAAE,KAAK;UACTT,IAAI,EAAEb,aAAa,CAACa,IAAI,CAAC;UACzBc,KAAK,EAAEF;QACT,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIF,SAAS,KAAKC,SAAS,EAAE;QAClC,IACEjB,MAAM,CAACgB,SAAS,CAAC,KAAKA,SAAS,IAC/BhB,MAAM,CAACiB,SAAS,CAAC,KAAKA,SAAS,EAC/B;UACAX,IAAI,GAAGe,WAAW,CAACf,IAAI,EAAET,QAAQ,EAAEW,GAAG,EAAEV,KAAK,EAAEL,aAAa,EAAED,IAAI,CAAC;QACrE,CAAC,MAAM;UACL,IACE,CAACQ,MAAM,CAACC,IAAI,CAACe,SAAS,CAAC,CAACb,MAAM,IAC9B,CAACH,MAAM,CAACC,IAAI,CAACgB,SAAS,CAAC,CAACd,MAAM,IAC9BmB,MAAM,CAACN,SAAS,CAAC,IAAIM,MAAM,CAACL,SAAS,CAAC,EACtC;YACAX,IAAI,GAAGe,WAAW,CAACf,IAAI,EAAET,QAAQ,EAAEW,GAAG,EAAEV,KAAK,EAAEL,aAAa,EAAED,IAAI,CAAC;UACrE,CAAC,MAAM;YACLI,OAAO,CAACL,IAAI,CAACiB,GAAG,CAAC,EAAEhB,IAAI,CAACgB,GAAG,CAAC,EAAEX,QAAQ,CAACe,MAAM,CAACJ,GAAG,CAAC,EAAEV,KAAK,CAAC;UAC5D;QACF;MACF;IACF;IAEA,OAAOA,KAAK,CAACe,MAAM,CAChBU,OAAO,CAAC,CAAC,CACTX,MAAM,CAACd,KAAK,CAAC0B,OAAO,CAAC,CACrBZ,MAAM,CAACd,KAAK,CAACqB,GAAG,CAAC;EACtB;EACA,OAAOvB,OAAO,CAACL,IAAI,EAAEC,IAAI,EAAE,EAAE,EAAE;IAACqB,MAAM,EAAE,EAAE;IAAEW,OAAO,EAAE,EAAE;IAAEL,GAAG,EAAE;EAAE,CAAC,CAAC;AACpE;AAEA,SAASE,WAAWA,CAACf,IAAI,EAAET,QAAQ,EAAEW,GAAG,EAAEV,KAAK,EAAEL,aAAa,EAAED,IAAI,EAAE;EACpEc,IAAI,GAAGT,QAAQ,CAACe,MAAM,CAACJ,GAAG,CAAC;EAC3BV,KAAK,CAAC0B,OAAO,CAACV,IAAI,CAAC;IACjBC,EAAE,EAAE,SAAS;IACbT,IAAI,EAAEb,aAAa,CAACa,IAAI,CAAC;IACzBc,KAAK,EAAE5B,IAAI,CAACgB,GAAG;EACjB,CAAC,CAAC;EACF,OAAOF,IAAI;AACb;AAEA,SAAShB,sBAAsBA,CAACmC,SAAS,EAAE;EACzC,OAAO,CAAC,EAAE,CAAC,CAACb,MAAM,CAACa,SAAS,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
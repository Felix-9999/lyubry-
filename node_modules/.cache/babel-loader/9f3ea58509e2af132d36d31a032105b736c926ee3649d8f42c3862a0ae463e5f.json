{"ast":null,"code":"// write the json back, preserving the line breaks and indent\nconst {\n  promisify\n} = require('util');\nconst writeFile = promisify(require('fs').writeFile);\nconst kIndent = Symbol.for('indent');\nconst kNewline = Symbol.for('newline');\nmodule.exports = async (path, pkg) => {\n  const {\n    [kIndent]: indent = 2,\n    [kNewline]: newline = '\\n'\n  } = pkg;\n  delete pkg._id;\n  const raw = JSON.stringify(pkg, null, indent) + '\\n';\n  const data = newline === '\\n' ? raw : raw.split('\\n').join(newline);\n  return writeFile(path, data);\n};","map":{"version":3,"names":["promisify","require","writeFile","kIndent","Symbol","for","kNewline","module","exports","path","pkg","indent","newline","_id","raw","JSON","stringify","data","split","join"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmversion/lib/write-json.js"],"sourcesContent":["// write the json back, preserving the line breaks and indent\nconst { promisify } = require('util')\nconst writeFile = promisify(require('fs').writeFile)\nconst kIndent = Symbol.for('indent')\nconst kNewline = Symbol.for('newline')\n\nmodule.exports = async (path, pkg) => {\n  const {\n    [kIndent]: indent = 2,\n    [kNewline]: newline = '\\n'\n  } = pkg\n  delete pkg._id\n  const raw = JSON.stringify(pkg, null, indent) + '\\n'\n  const data = newline === '\\n' ? raw : raw.split('\\n').join(newline)\n  return writeFile(path, data)\n}\n"],"mappings":"AAAA;AACA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACrC,MAAMC,SAAS,GAAGF,SAAS,CAACC,OAAO,CAAC,IAAI,CAAC,CAACC,SAAS,CAAC;AACpD,MAAMC,OAAO,GAAGC,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC;AACpC,MAAMC,QAAQ,GAAGF,MAAM,CAACC,GAAG,CAAC,SAAS,CAAC;AAEtCE,MAAM,CAACC,OAAO,GAAG,OAAOC,IAAI,EAAEC,GAAG,KAAK;EACpC,MAAM;IACJ,CAACP,OAAO,GAAGQ,MAAM,GAAG,CAAC;IACrB,CAACL,QAAQ,GAAGM,OAAO,GAAG;EACxB,CAAC,GAAGF,GAAG;EACP,OAAOA,GAAG,CAACG,GAAG;EACd,MAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACN,GAAG,EAAE,IAAI,EAAEC,MAAM,CAAC,GAAG,IAAI;EACpD,MAAMM,IAAI,GAAGL,OAAO,KAAK,IAAI,GAAGE,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAACP,OAAO,CAAC;EACnE,OAAOV,SAAS,CAACO,IAAI,EAAEQ,IAAI,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
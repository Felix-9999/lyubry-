{"ast":null,"code":"const {\n  fixer\n} = require('normalize-package-data');\nconst npmFetch = require('npm-registry-fetch');\nconst npa = require('npm-package-arg');\nconst semver = require('semver');\nconst {\n  URL\n} = require('url');\nconst ssri = require('ssri');\nconst publish = async (manifest, tarballData, opts) => {\n  if (manifest.private) {\n    throw Object.assign(new Error(`This package has been marked as private\nRemove the 'private' field from the package.json to publish it.`), {\n      code: 'EPRIVATE'\n    });\n  }\n\n  // spec is used to pick the appropriate registry/auth combo\n  const spec = npa.resolve(manifest.name, manifest.version);\n  opts = {\n    defaultTag: 'latest',\n    // if scoped, restricted by default\n    access: spec.scope ? 'restricted' : 'public',\n    algorithms: ['sha512'],\n    ...opts,\n    spec\n  };\n  const reg = npmFetch.pickRegistry(spec, opts);\n  const pubManifest = patchManifest(manifest, opts);\n\n  // registry-frontdoor cares about the access level,\n  // which is only configurable for scoped packages\n  if (!spec.scope && opts.access === 'restricted') {\n    throw Object.assign(new Error(\"Can't restrict access to unscoped packages.\"), {\n      code: 'EUNSCOPED'\n    });\n  }\n  const metadata = buildMetadata(reg, pubManifest, tarballData, opts);\n  try {\n    return await npmFetch(spec.escapedName, {\n      ...opts,\n      method: 'PUT',\n      body: metadata,\n      ignoreBody: true\n    });\n  } catch (err) {\n    if (err.code !== 'E409') throw err;\n    // if E409, we attempt exactly ONE retry, to protect us\n    // against malicious activity like trying to publish\n    // a bunch of new versions of a package at the same time\n    // and/or spamming the registry\n    const current = await npmFetch.json(spec.escapedName, {\n      ...opts,\n      query: {\n        write: true\n      }\n    });\n    const newMetadata = patchMetadata(current, metadata, opts);\n    return npmFetch(spec.escapedName, {\n      ...opts,\n      method: 'PUT',\n      body: newMetadata,\n      ignoreBody: true\n    });\n  }\n};\nconst patchManifest = (_manifest, opts) => {\n  const {\n    npmVersion\n  } = opts;\n  // we only update top-level fields, so a shallow clone is fine\n  const manifest = {\n    ..._manifest\n  };\n  manifest._nodeVersion = process.versions.node;\n  if (npmVersion) manifest._npmVersion = npmVersion;\n  fixer.fixNameField(manifest, {\n    strict: true,\n    allowLegacyCase: true\n  });\n  const version = semver.clean(manifest.version);\n  if (!version) {\n    throw Object.assign(new Error('invalid semver: ' + manifest.version), {\n      code: 'EBADSEMVER'\n    });\n  }\n  manifest.version = version;\n  return manifest;\n};\nconst buildMetadata = (registry, manifest, tarballData, opts) => {\n  const {\n    access,\n    defaultTag,\n    algorithms\n  } = opts;\n  const root = {\n    _id: manifest.name,\n    name: manifest.name,\n    description: manifest.description,\n    'dist-tags': {},\n    versions: {},\n    access\n  };\n  root.versions[manifest.version] = manifest;\n  const tag = manifest.tag || defaultTag;\n  root['dist-tags'][tag] = manifest.version;\n  const tarballName = `${manifest.name}-${manifest.version}.tgz`;\n  const tarballURI = `${manifest.name}/-/${tarballName}`;\n  const integrity = ssri.fromData(tarballData, {\n    algorithms: [...new Set(['sha1'].concat(algorithms))]\n  });\n  manifest._id = `${manifest.name}@${manifest.version}`;\n  manifest.dist = {\n    ...manifest.dist\n  };\n  // Don't bother having sha1 in the actual integrity field\n  manifest.dist.integrity = integrity.sha512[0].toString();\n  // Legacy shasum support\n  manifest.dist.shasum = integrity.sha1[0].hexDigest();\n\n  // NB: the CLI always fetches via HTTPS if the registry is HTTPS,\n  // regardless of what's here.  This makes it so that installing\n  // from an HTTP-only mirror doesn't cause problems, though.\n  manifest.dist.tarball = new URL(tarballURI, registry).href.replace(/^https:\\/\\//, 'http://');\n  root._attachments = {};\n  root._attachments[tarballName] = {\n    content_type: 'application/octet-stream',\n    data: tarballData.toString('base64'),\n    length: tarballData.length\n  };\n  return root;\n};\nconst patchMetadata = (current, newData) => {\n  const curVers = Object.keys(current.versions || {}).map(v => semver.clean(v, true)).concat(Object.keys(current.time || {}).map(v => semver.valid(v, true) && semver.clean(v, true)).filter(v => v));\n  const newVersion = Object.keys(newData.versions)[0];\n  if (curVers.indexOf(newVersion) !== -1) {\n    const {\n      name: pkgid,\n      version\n    } = newData;\n    throw Object.assign(new Error(`Cannot publish ${pkgid}@${version} over existing version.`), {\n      code: 'EPUBLISHCONFLICT',\n      pkgid,\n      version\n    });\n  }\n  current.versions = current.versions || {};\n  current.versions[newVersion] = newData.versions[newVersion];\n  for (const i in newData) {\n    switch (i) {\n      // objects that copy over the new stuffs\n      case 'dist-tags':\n      case 'versions':\n      case '_attachments':\n        for (const j in newData[i]) {\n          current[i] = current[i] || {};\n          current[i][j] = newData[i][j];\n        }\n        break;\n\n      // copy\n      default:\n        current[i] = newData[i];\n        break;\n    }\n  }\n  return current;\n};\nmodule.exports = publish;","map":{"version":3,"names":["fixer","require","npmFetch","npa","semver","URL","ssri","publish","manifest","tarballData","opts","private","Object","assign","Error","code","spec","resolve","name","version","defaultTag","access","scope","algorithms","reg","pickRegistry","pubManifest","patchManifest","metadata","buildMetadata","escapedName","method","body","ignoreBody","err","current","json","query","write","newMetadata","patchMetadata","_manifest","npmVersion","_nodeVersion","process","versions","node","_npmVersion","fixNameField","strict","allowLegacyCase","clean","registry","root","_id","description","tag","tarballName","tarballURI","integrity","fromData","Set","concat","dist","sha512","toString","shasum","sha1","hexDigest","tarball","href","replace","_attachments","content_type","data","length","newData","curVers","keys","map","v","time","valid","filter","newVersion","indexOf","pkgid","i","j","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmpublish/publish.js"],"sourcesContent":["const { fixer } = require('normalize-package-data')\nconst npmFetch = require('npm-registry-fetch')\nconst npa = require('npm-package-arg')\nconst semver = require('semver')\nconst { URL } = require('url')\nconst ssri = require('ssri')\n\nconst publish = async (manifest, tarballData, opts) => {\n  if (manifest.private) {\n    throw Object.assign(\n      new Error(`This package has been marked as private\nRemove the 'private' field from the package.json to publish it.`),\n      { code: 'EPRIVATE' }\n    )\n  }\n\n  // spec is used to pick the appropriate registry/auth combo\n  const spec = npa.resolve(manifest.name, manifest.version)\n  opts = {\n    defaultTag: 'latest',\n    // if scoped, restricted by default\n    access: spec.scope ? 'restricted' : 'public',\n    algorithms: ['sha512'],\n    ...opts,\n    spec,\n  }\n\n  const reg = npmFetch.pickRegistry(spec, opts)\n  const pubManifest = patchManifest(manifest, opts)\n\n  // registry-frontdoor cares about the access level,\n  // which is only configurable for scoped packages\n  if (!spec.scope && opts.access === 'restricted') {\n    throw Object.assign(\n      new Error(\"Can't restrict access to unscoped packages.\"),\n      { code: 'EUNSCOPED' }\n    )\n  }\n\n  const metadata = buildMetadata(reg, pubManifest, tarballData, opts)\n\n  try {\n    return await npmFetch(spec.escapedName, {\n      ...opts,\n      method: 'PUT',\n      body: metadata,\n      ignoreBody: true,\n    })\n  } catch (err) {\n    if (err.code !== 'E409')\n      throw err\n    // if E409, we attempt exactly ONE retry, to protect us\n    // against malicious activity like trying to publish\n    // a bunch of new versions of a package at the same time\n    // and/or spamming the registry\n    const current = await npmFetch.json(spec.escapedName, {\n      ...opts,\n      query: { write: true },\n    })\n    const newMetadata = patchMetadata(current, metadata, opts)\n    return npmFetch(spec.escapedName, {\n      ...opts,\n      method: 'PUT',\n      body: newMetadata,\n      ignoreBody: true,\n    })\n  }\n}\n\nconst patchManifest = (_manifest, opts) => {\n  const { npmVersion } = opts\n  // we only update top-level fields, so a shallow clone is fine\n  const manifest = { ..._manifest }\n\n  manifest._nodeVersion = process.versions.node\n  if (npmVersion)\n    manifest._npmVersion = npmVersion\n\n  fixer.fixNameField(manifest, { strict: true, allowLegacyCase: true })\n  const version = semver.clean(manifest.version)\n  if (!version) {\n    throw Object.assign(\n      new Error('invalid semver: ' + manifest.version),\n      { code: 'EBADSEMVER' }\n    )\n  }\n  manifest.version = version\n  return manifest\n}\n\nconst buildMetadata = (registry, manifest, tarballData, opts) => {\n  const { access, defaultTag, algorithms } = opts\n  const root = {\n    _id: manifest.name,\n    name: manifest.name,\n    description: manifest.description,\n    'dist-tags': {},\n    versions: {},\n    access,\n  }\n\n  root.versions[manifest.version] = manifest\n  const tag = manifest.tag || defaultTag\n  root['dist-tags'][tag] = manifest.version\n\n  const tarballName = `${manifest.name}-${manifest.version}.tgz`\n  const tarballURI = `${manifest.name}/-/${tarballName}`\n  const integrity = ssri.fromData(tarballData, {\n    algorithms: [...new Set(['sha1'].concat(algorithms))],\n  })\n\n  manifest._id = `${manifest.name}@${manifest.version}`\n  manifest.dist = { ...manifest.dist }\n  // Don't bother having sha1 in the actual integrity field\n  manifest.dist.integrity = integrity.sha512[0].toString()\n  // Legacy shasum support\n  manifest.dist.shasum = integrity.sha1[0].hexDigest()\n\n  // NB: the CLI always fetches via HTTPS if the registry is HTTPS,\n  // regardless of what's here.  This makes it so that installing\n  // from an HTTP-only mirror doesn't cause problems, though.\n  manifest.dist.tarball = new URL(tarballURI, registry).href\n    .replace(/^https:\\/\\//, 'http://')\n\n  root._attachments = {}\n  root._attachments[tarballName] = {\n    content_type: 'application/octet-stream',\n    data: tarballData.toString('base64'),\n    length: tarballData.length,\n  }\n\n  return root\n}\n\nconst patchMetadata = (current, newData) => {\n  const curVers = Object.keys(current.versions || {})\n    .map(v => semver.clean(v, true))\n    .concat(Object.keys(current.time || {})\n      .map(v => semver.valid(v, true) && semver.clean(v, true))\n      .filter(v => v))\n\n  const newVersion = Object.keys(newData.versions)[0]\n\n  if (curVers.indexOf(newVersion) !== -1) {\n    const { name: pkgid, version } = newData\n    throw Object.assign(\n      new Error(\n        `Cannot publish ${pkgid}@${version} over existing version.`\n      ), {\n        code: 'EPUBLISHCONFLICT',\n        pkgid,\n        version,\n      })\n  }\n\n  current.versions = current.versions || {}\n  current.versions[newVersion] = newData.versions[newVersion]\n  for (const i in newData) {\n    switch (i) {\n      // objects that copy over the new stuffs\n      case 'dist-tags':\n      case 'versions':\n      case '_attachments':\n        for (const j in newData[i]) {\n          current[i] = current[i] || {}\n          current[i][j] = newData[i][j]\n        }\n        break\n\n      // copy\n      default:\n        current[i] = newData[i]\n        break\n    }\n  }\n\n  return current\n}\n\nmodule.exports = publish\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
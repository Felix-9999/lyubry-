{"ast":null,"code":"// certain assertions we should do only when testing arborist itself, because\n// they are too expensive or aggressive and would break user programs if we\n// miss a situation where they are actually valid.\n//\n// call like this:\n//\n// /* istanbul ignore next - debug check */\n// debug(() => {\n//   if (someExpensiveCheck)\n//     throw new Error('expensive check should have returned false')\n// })\n\n// run in debug mode if explicitly requested, running arborist tests,\n// or working in the arborist project directory.\n\nconst debug = process.env.ARBORIST_DEBUG !== '0' && (process.env.ARBORIST_DEBUG === '1' || /\\barborist\\b/.test(process.env.NODE_DEBUG || '') || process.env.npm_package_name === '@npmcli/arborist' && ['test', 'snap'].includes(process.env.npm_lifecycle_event) || process.cwd() === require('path').resolve(__dirname, '..'));\nmodule.exports = debug ? fn => fn() : () => {};\nconst red = process.stderr.isTTY ? msg => `\\x1B[31m${msg}\\x1B[39m` : m => m;\nmodule.exports.log = (...msg) => module.exports(() => {\n  const {\n    format\n  } = require('util');\n  const prefix = `\\n${process.pid} ${red(format(msg.shift()))} `;\n  msg = (prefix + format(...msg).trim().split('\\n').join(prefix)).trim();\n  console.error(msg);\n});","map":{"version":3,"names":["debug","process","env","ARBORIST_DEBUG","test","NODE_DEBUG","npm_package_name","includes","npm_lifecycle_event","cwd","require","resolve","__dirname","module","exports","fn","red","stderr","isTTY","msg","m","log","format","prefix","pid","shift","trim","split","join","console","error"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/debug.js"],"sourcesContent":["// certain assertions we should do only when testing arborist itself, because\n// they are too expensive or aggressive and would break user programs if we\n// miss a situation where they are actually valid.\n//\n// call like this:\n//\n// /* istanbul ignore next - debug check */\n// debug(() => {\n//   if (someExpensiveCheck)\n//     throw new Error('expensive check should have returned false')\n// })\n\n// run in debug mode if explicitly requested, running arborist tests,\n// or working in the arborist project directory.\n\nconst debug = process.env.ARBORIST_DEBUG !== '0' && (\n  process.env.ARBORIST_DEBUG === '1' ||\n  /\\barborist\\b/.test(process.env.NODE_DEBUG || '') ||\n  process.env.npm_package_name === '@npmcli/arborist' &&\n  ['test', 'snap'].includes(process.env.npm_lifecycle_event) ||\n  process.cwd() === require('path').resolve(__dirname, '..')\n)\n\nmodule.exports = debug ? fn => fn() : () => {}\nconst red = process.stderr.isTTY ? msg => `\\x1B[31m${msg}\\x1B[39m` : m => m\nmodule.exports.log = (...msg) => module.exports(() => {\n  const { format } = require('util')\n  const prefix = `\\n${process.pid} ${red(format(msg.shift()))} `\n  msg = (prefix + format(...msg).trim().split('\\n').join(prefix)).trim()\n  console.error(msg)\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,cAAc,KAAK,GAAG,KAC9CF,OAAO,CAACC,GAAG,CAACC,cAAc,KAAK,GAAG,IAClC,cAAc,CAACC,IAAI,CAACH,OAAO,CAACC,GAAG,CAACG,UAAU,IAAI,EAAE,CAAC,IACjDJ,OAAO,CAACC,GAAG,CAACI,gBAAgB,KAAK,kBAAkB,IACnD,CAAC,MAAM,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACN,OAAO,CAACC,GAAG,CAACM,mBAAmB,CAAC,IAC1DP,OAAO,CAACQ,GAAG,CAAC,CAAC,KAAKC,OAAO,CAAC,MAAM,CAAC,CAACC,OAAO,CAACC,SAAS,EAAE,IAAI,CAAC,CAC3D;AAEDC,MAAM,CAACC,OAAO,GAAGd,KAAK,GAAGe,EAAE,IAAIA,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;AAC9C,MAAMC,GAAG,GAAGf,OAAO,CAACgB,MAAM,CAACC,KAAK,GAAGC,GAAG,IAAI,WAAWA,GAAG,UAAU,GAAGC,CAAC,IAAIA,CAAC;AAC3EP,MAAM,CAACC,OAAO,CAACO,GAAG,GAAG,CAAC,GAAGF,GAAG,KAAKN,MAAM,CAACC,OAAO,CAAC,MAAM;EACpD,MAAM;IAAEQ;EAAO,CAAC,GAAGZ,OAAO,CAAC,MAAM,CAAC;EAClC,MAAMa,MAAM,GAAG,KAAKtB,OAAO,CAACuB,GAAG,IAAIR,GAAG,CAACM,MAAM,CAACH,GAAG,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG;EAC9DN,GAAG,GAAG,CAACI,MAAM,GAAGD,MAAM,CAAC,GAAGH,GAAG,CAAC,CAACO,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAACL,MAAM,CAAC,EAAEG,IAAI,CAAC,CAAC;EACtEG,OAAO,CAACC,KAAK,CAACX,GAAG,CAAC;AACpB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
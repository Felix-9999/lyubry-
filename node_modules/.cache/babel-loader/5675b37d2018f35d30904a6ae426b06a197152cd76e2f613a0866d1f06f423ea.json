{"ast":null,"code":"// this is the public class that is used by consumers.\n// the Advisory class handles all the calculation, and this\n// class handles all the IO with the registry and cache.\nconst pacote = require('pacote');\nconst cacache = require('cacache');\nconst Advisory = require('./advisory.js');\nconst {\n  homedir\n} = require('os');\nconst jsonParse = require('json-parse-even-better-errors');\nconst _packument = Symbol('packument');\nconst _cachePut = Symbol('cachePut');\nconst _cacheGet = Symbol('cacheGet');\nconst _cacheData = Symbol('cacheData');\nconst _packuments = Symbol('packuments');\nconst _cache = Symbol('cache');\nconst _options = Symbol('options');\nconst _advisories = Symbol('advisories');\nconst _calculate = Symbol('calculate');\nclass Calculator {\n  constructor(options = {}) {\n    this[_options] = {\n      ...options\n    };\n    this[_cache] = this[_options].cache || homedir() + '/.npm/_cacache';\n    this[_options].cache = this[_cache];\n    this[_packuments] = new Map();\n    this[_cacheData] = new Map();\n    this[_advisories] = new Map();\n  }\n  get cache() {\n    return this[_cache];\n  }\n  get options() {\n    return {\n      ...this[_options]\n    };\n  }\n  async calculate(name, source) {\n    const k = `security-advisory:${name}:${source.id}`;\n    if (this[_advisories].has(k)) return this[_advisories].get(k);\n    const p = this[_calculate](name, source);\n    this[_advisories].set(k, p);\n    return p;\n  }\n  async [_calculate](name, source) {\n    const k = `security-advisory:${name}:${source.id}`;\n    const t = `metavuln:calculate:${k}`;\n    process.emit('time', t);\n    const advisory = new Advisory(name, source, this[_options]);\n    // load packument and cached advisory\n    const [cached, packument] = await Promise.all([this[_cacheGet](advisory), this[_packument](name)]);\n    process.emit('time', `metavuln:load:${k}`);\n    advisory.load(cached, packument);\n    process.emit('timeEnd', `metavuln:load:${k}`);\n    if (advisory.updated) await this[_cachePut](advisory);\n    this[_advisories].set(k, advisory);\n    process.emit('timeEnd', t);\n    return advisory;\n  }\n  async [_cachePut](advisory) {\n    const {\n      name,\n      id\n    } = advisory;\n    const key = `security-advisory:${name}:${id}`;\n    process.emit('time', `metavuln:cache:put:${key}`);\n    const data = JSON.stringify(advisory);\n    const options = {\n      ...this[_options]\n    };\n    this[_cacheData].set(key, jsonParse(data));\n    await cacache.put(this[_cache], key, data, options).catch(() => {});\n    process.emit('timeEnd', `metavuln:cache:put:${key}`);\n  }\n  async [_cacheGet](advisory) {\n    const {\n      name,\n      id\n    } = advisory;\n    const key = `security-advisory:${name}:${id}`;\n    /* istanbul ignore if - should be impossible, since we memoize the\n     * advisory object itself using the same key, just being cautious */\n    if (this[_cacheData].has(key)) return this[_cacheData].get(key);\n    process.emit('time', `metavuln:cache:get:${key}`);\n    const p = cacache.get(this[_cache], key, {\n      ...this[_options]\n    }).catch(() => ({\n      data: '{}'\n    })).then(({\n      data\n    }) => {\n      data = jsonParse(data);\n      process.emit('timeEnd', `metavuln:cache:get:${key}`);\n      this[_cacheData].set(key, data);\n      return data;\n    });\n    this[_cacheData].set(key, p);\n    return p;\n  }\n  async [_packument](name) {\n    if (this[_packuments].has(name)) return this[_packuments].get(name);\n    process.emit('time', `metavuln:packument:${name}`);\n    const p = pacote.packument(name, {\n      ...this[_options]\n    }).catch(er => {\n      // presumably not something from the registry.\n      // an empty packument will have an effective range of *\n      return {\n        name,\n        versions: {}\n      };\n    }).then(paku => {\n      process.emit('timeEnd', `metavuln:packument:${name}`);\n      this[_packuments].set(name, paku);\n      return paku;\n    });\n    this[_packuments].set(name, p);\n    return p;\n  }\n}\nmodule.exports = Calculator;","map":{"version":3,"names":["pacote","require","cacache","Advisory","homedir","jsonParse","_packument","Symbol","_cachePut","_cacheGet","_cacheData","_packuments","_cache","_options","_advisories","_calculate","Calculator","constructor","options","cache","Map","calculate","name","source","k","id","has","get","p","set","t","process","emit","advisory","cached","packument","Promise","all","load","updated","key","data","JSON","stringify","put","catch","then","er","versions","paku","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/metavuln-calculator/lib/index.js"],"sourcesContent":["// this is the public class that is used by consumers.\n// the Advisory class handles all the calculation, and this\n// class handles all the IO with the registry and cache.\nconst pacote = require('pacote')\nconst cacache = require('cacache')\nconst Advisory = require('./advisory.js')\nconst {homedir} = require('os')\nconst jsonParse = require('json-parse-even-better-errors')\n\nconst _packument = Symbol('packument')\nconst _cachePut = Symbol('cachePut')\nconst _cacheGet = Symbol('cacheGet')\nconst _cacheData = Symbol('cacheData')\nconst _packuments = Symbol('packuments')\nconst _cache = Symbol('cache')\nconst _options = Symbol('options')\nconst _advisories = Symbol('advisories')\nconst _calculate = Symbol('calculate')\n\nclass Calculator {\n  constructor (options = {}) {\n    this[_options] = { ...options }\n    this[_cache] = this[_options].cache || (homedir() + '/.npm/_cacache')\n    this[_options].cache = this[_cache]\n    this[_packuments] = new Map()\n    this[_cacheData] = new Map()\n    this[_advisories] = new Map()\n  }\n\n  get cache () {\n    return this[_cache]\n  }\n\n  get options () {\n    return { ...this[_options] }\n  }\n\n  async calculate (name, source) {\n    const k = `security-advisory:${name}:${source.id}`\n    if (this[_advisories].has(k))\n      return this[_advisories].get(k)\n\n    const p = this[_calculate](name, source)\n    this[_advisories].set(k, p)\n    return p\n  }\n\n  async [_calculate] (name, source) {\n    const k = `security-advisory:${name}:${source.id}`\n    const t = `metavuln:calculate:${k}`\n    process.emit('time', t)\n    const advisory = new Advisory(name, source, this[_options])\n    // load packument and cached advisory\n    const [cached, packument] = await Promise.all([\n      this[_cacheGet](advisory),\n      this[_packument](name),\n    ])\n    process.emit('time', `metavuln:load:${k}`)\n    advisory.load(cached, packument)\n    process.emit('timeEnd', `metavuln:load:${k}`)\n    if (advisory.updated)\n      await this[_cachePut](advisory)\n    this[_advisories].set(k, advisory)\n    process.emit('timeEnd', t)\n    return advisory\n  }\n\n  async [_cachePut] (advisory) {\n    const { name, id } = advisory\n    const key = `security-advisory:${name}:${id}`\n    process.emit('time', `metavuln:cache:put:${key}`)\n    const data = JSON.stringify(advisory)\n    const options = { ...this[_options] }\n    this[_cacheData].set(key, jsonParse(data))\n    await cacache.put(this[_cache], key, data, options).catch(() => {})\n    process.emit('timeEnd', `metavuln:cache:put:${key}`)\n  }\n\n  async [_cacheGet] (advisory) {\n    const { name, id } = advisory\n    const key = `security-advisory:${name}:${id}`\n    /* istanbul ignore if - should be impossible, since we memoize the\n     * advisory object itself using the same key, just being cautious */\n    if (this[_cacheData].has(key))\n      return this[_cacheData].get(key)\n\n    process.emit('time', `metavuln:cache:get:${key}`)\n    const p = cacache.get(this[_cache], key, { ...this[_options] })\n      .catch(() => ({ data: '{}' }))\n      .then(({ data }) => {\n        data = jsonParse(data)\n        process.emit('timeEnd', `metavuln:cache:get:${key}`)\n        this[_cacheData].set(key, data)\n        return data\n      })\n    this[_cacheData].set(key, p)\n    return p\n  }\n\n  async [_packument] (name) {\n    if (this[_packuments].has(name))\n      return this[_packuments].get(name)\n\n    process.emit('time', `metavuln:packument:${name}`)\n    const p = pacote.packument(name, { ...this[_options] })\n      .catch((er) => {\n        // presumably not something from the registry.\n        // an empty packument will have an effective range of *\n        return {\n          name,\n          versions: {},\n        }\n      })\n      .then(paku => {\n        process.emit('timeEnd', `metavuln:packument:${name}`)\n        this[_packuments].set(name, paku)\n        return paku\n      })\n    this[_packuments].set(name, p)\n    return p\n  }\n}\n\nmodule.exports = Calculator\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
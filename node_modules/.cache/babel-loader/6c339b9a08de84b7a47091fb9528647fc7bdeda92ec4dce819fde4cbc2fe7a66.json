{"ast":null,"code":"const cacache = require('cacache');\nconst chalk = require('chalk');\nconst fs = require('fs');\nconst fetch = require('make-fetch-happen');\nconst table = require('text-table');\nconst which = require('which');\nconst pacote = require('pacote');\nconst {\n  resolve\n} = require('path');\nconst semver = require('semver');\nconst {\n  promisify\n} = require('util');\nconst ansiTrim = require('./utils/ansi-trim.js');\nconst isWindows = require('./utils/is-windows.js');\nconst ping = require('./utils/ping.js');\nconst {\n  registry: {\n    default: defaultRegistry\n  }\n} = require('./utils/config/definitions.js');\nconst lstat = promisify(fs.lstat);\nconst readdir = promisify(fs.readdir);\nconst access = promisify(fs.access);\nconst {\n  R_OK,\n  W_OK,\n  X_OK\n} = fs.constants;\nconst maskLabel = mask => {\n  const label = [];\n  if (mask & R_OK) label.push('readable');\n  if (mask & W_OK) label.push('writable');\n  if (mask & X_OK) label.push('executable');\n  return label.join(', ');\n};\nconst BaseCommand = require('./base-command.js');\nclass Doctor extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Check your npm environment';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'doctor';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['registry'];\n  }\n  exec(args, cb) {\n    this.doctor(args).then(() => cb()).catch(cb);\n  }\n  async doctor(args) {\n    this.npm.log.info('Running checkup');\n\n    // each message is [title, ok, message]\n    const messages = [];\n    const actions = [['npm ping', 'checkPing', []], ['npm -v', 'getLatestNpmVersion', []], ['node -v', 'getLatestNodejsVersion', []], ['npm config get registry', 'checkNpmRegistry', []], ['which git', 'getGitPath', []], ...(isWindows ? [] : [['Perms check on cached files', 'checkFilesPermission', [this.npm.cache, true, R_OK]], ['Perms check on local node_modules', 'checkFilesPermission', [this.npm.localDir, true]], ['Perms check on global node_modules', 'checkFilesPermission', [this.npm.globalDir, false]], ['Perms check on local bin folder', 'checkFilesPermission', [this.npm.localBin, false, R_OK | W_OK | X_OK]], ['Perms check on global bin folder', 'checkFilesPermission', [this.npm.globalBin, false, X_OK]]]), ['Verify cache contents', 'verifyCachedFiles', [this.npm.flatOptions.cache]]\n    // TODO:\n    // - ensure arborist.loadActual() runs without errors and no invalid edges\n    // - ensure package-lock.json matches loadActual()\n    // - verify loadActual without hidden lock file matches hidden lockfile\n    // - verify all local packages have bins linked\n    ];\n\n    // Do the actual work\n    for (const [msg, fn, args] of actions) {\n      const line = [msg];\n      try {\n        line.push(true, await this[fn](...args));\n      } catch (er) {\n        line.push(false, er);\n      }\n      messages.push(line);\n    }\n    const outHead = ['Check', 'Value', 'Recommendation/Notes'].map(!this.npm.color ? h => h : h => chalk.underline(h));\n    let allOk = true;\n    const outBody = messages.map(!this.npm.color ? item => {\n      allOk = allOk && item[1];\n      item[1] = item[1] ? 'ok' : 'not ok';\n      item[2] = String(item[2]);\n      return item;\n    } : item => {\n      allOk = allOk && item[1];\n      if (!item[1]) {\n        item[0] = chalk.red(item[0]);\n        item[2] = chalk.magenta(String(item[2]));\n      }\n      item[1] = item[1] ? chalk.green('ok') : chalk.red('not ok');\n      return item;\n    });\n    const outTable = [outHead, ...outBody];\n    const tableOpts = {\n      stringLength: s => ansiTrim(s).length\n    };\n    const silent = this.npm.log.levels[this.npm.log.level] > this.npm.log.levels.error;\n    if (!silent) {\n      this.npm.output(table(outTable, tableOpts));\n      if (!allOk) console.error('');\n    }\n    if (!allOk) throw 'Some problems found. See above for recommendations.';\n  }\n  async checkPing() {\n    const tracker = this.npm.log.newItem('checkPing', 1);\n    tracker.info('checkPing', 'Pinging registry');\n    try {\n      await ping(this.npm.flatOptions);\n      return '';\n    } catch (er) {\n      if (/^E\\d{3}$/.test(er.code || '')) throw er.code.substr(1) + ' ' + er.message;else throw er.message;\n    } finally {\n      tracker.finish();\n    }\n  }\n  async getLatestNpmVersion() {\n    const tracker = this.npm.log.newItem('getLatestNpmVersion', 1);\n    tracker.info('getLatestNpmVersion', 'Getting npm package information');\n    try {\n      const latest = (await pacote.manifest('npm@latest', this.npm.flatOptions)).version;\n      if (semver.gte(this.npm.version, latest)) return `current: v${this.npm.version}, latest: v${latest}`;else throw `Use npm v${latest}`;\n    } finally {\n      tracker.finish();\n    }\n  }\n  async getLatestNodejsVersion() {\n    // XXX get the latest in the current major as well\n    const current = process.version;\n    const currentRange = `^${current}`;\n    const url = 'https://nodejs.org/dist/index.json';\n    const tracker = this.npm.log.newItem('getLatestNodejsVersion', 1);\n    tracker.info('getLatestNodejsVersion', 'Getting Node.js release information');\n    try {\n      const res = await fetch(url, {\n        method: 'GET',\n        ...this.npm.flatOptions\n      });\n      const data = await res.json();\n      let maxCurrent = '0.0.0';\n      let maxLTS = '0.0.0';\n      for (const {\n        lts,\n        version\n      } of data) {\n        if (lts && semver.gt(version, maxLTS)) maxLTS = version;\n        if (semver.satisfies(version, currentRange) && semver.gt(version, maxCurrent)) maxCurrent = version;\n      }\n      const recommended = semver.gt(maxCurrent, maxLTS) ? maxCurrent : maxLTS;\n      if (semver.gte(process.version, recommended)) return `current: ${current}, recommended: ${recommended}`;else throw `Use node ${recommended} (current: ${current})`;\n    } finally {\n      tracker.finish();\n    }\n  }\n  async checkFilesPermission(root, shouldOwn, mask = null) {\n    if (mask === null) mask = shouldOwn ? R_OK | W_OK : R_OK;\n    let ok = true;\n    const tracker = this.npm.log.newItem(root, 1);\n    try {\n      const uid = process.getuid();\n      const gid = process.getgid();\n      const files = new Set([root]);\n      for (const f of files) {\n        tracker.silly('checkFilesPermission', f.substr(root.length + 1));\n        const st = await lstat(f).catch(er => {\n          ok = false;\n          tracker.warn('checkFilesPermission', 'error getting info for ' + f);\n        });\n        tracker.completeWork(1);\n        if (!st) continue;\n        if (shouldOwn && (uid !== st.uid || gid !== st.gid)) {\n          tracker.warn('checkFilesPermission', 'should be owner of ' + f);\n          ok = false;\n        }\n        if (!st.isDirectory() && !st.isFile()) continue;\n        try {\n          await access(f, mask);\n        } catch (er) {\n          ok = false;\n          const msg = `Missing permissions on ${f} (expect: ${maskLabel(mask)})`;\n          tracker.error('checkFilesPermission', msg);\n          continue;\n        }\n        if (st.isDirectory()) {\n          const entries = await readdir(f).catch(er => {\n            ok = false;\n            tracker.warn('checkFilesPermission', 'error reading directory ' + f);\n            return [];\n          });\n          for (const entry of entries) files.add(resolve(f, entry));\n        }\n      }\n    } finally {\n      tracker.finish();\n      if (!ok) {\n        throw `Check the permissions of files in ${root}` + (shouldOwn ? ' (should be owned by current user)' : '');\n      } else return '';\n    }\n  }\n  async getGitPath() {\n    const tracker = this.npm.log.newItem('getGitPath', 1);\n    tracker.info('getGitPath', 'Finding git in your PATH');\n    try {\n      return await which('git').catch(er => {\n        tracker.warn(er);\n        throw \"Install git and ensure it's in your PATH.\";\n      });\n    } finally {\n      tracker.finish();\n    }\n  }\n  async verifyCachedFiles() {\n    const tracker = this.npm.log.newItem('verifyCachedFiles', 1);\n    tracker.info('verifyCachedFiles', 'Verifying the npm cache');\n    try {\n      const stats = await cacache.verify(this.npm.flatOptions.cache);\n      const {\n        badContentCount,\n        reclaimedCount,\n        missingContent,\n        reclaimedSize\n      } = stats;\n      if (badContentCount || reclaimedCount || missingContent) {\n        if (badContentCount) tracker.warn('verifyCachedFiles', `Corrupted content removed: ${badContentCount}`);\n        if (reclaimedCount) tracker.warn('verifyCachedFiles', `Content garbage-collected: ${reclaimedCount} (${reclaimedSize} bytes)`);\n        if (missingContent) tracker.warn('verifyCachedFiles', `Missing content: ${missingContent}`);\n        tracker.warn('verifyCachedFiles', 'Cache issues have been fixed');\n      }\n      tracker.info('verifyCachedFiles', `Verification complete. Stats: ${JSON.stringify(stats, null, 2)}`);\n      return `verified ${stats.verifiedContent} tarballs`;\n    } finally {\n      tracker.finish();\n    }\n  }\n  async checkNpmRegistry() {\n    if (this.npm.flatOptions.registry !== defaultRegistry) throw `Try \\`npm config set registry=${defaultRegistry}\\``;else return `using default registry (${defaultRegistry})`;\n  }\n}\nmodule.exports = Doctor;","map":{"version":3,"names":["cacache","require","chalk","fs","fetch","table","which","pacote","resolve","semver","promisify","ansiTrim","isWindows","ping","registry","default","defaultRegistry","lstat","readdir","access","R_OK","W_OK","X_OK","constants","maskLabel","mask","label","push","join","BaseCommand","Doctor","description","name","params","exec","args","cb","doctor","then","catch","npm","log","info","messages","actions","cache","localDir","globalDir","localBin","globalBin","flatOptions","msg","fn","line","er","outHead","map","color","h","underline","allOk","outBody","item","String","red","magenta","green","outTable","tableOpts","stringLength","s","length","silent","levels","level","error","output","console","checkPing","tracker","newItem","test","code","substr","message","finish","getLatestNpmVersion","latest","manifest","version","gte","getLatestNodejsVersion","current","process","currentRange","url","res","method","data","json","maxCurrent","maxLTS","lts","gt","satisfies","recommended","checkFilesPermission","root","shouldOwn","ok","uid","getuid","gid","getgid","files","Set","f","silly","st","warn","completeWork","isDirectory","isFile","entries","entry","add","getGitPath","verifyCachedFiles","stats","verify","badContentCount","reclaimedCount","missingContent","reclaimedSize","JSON","stringify","verifiedContent","checkNpmRegistry","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/doctor.js"],"sourcesContent":["const cacache = require('cacache')\nconst chalk = require('chalk')\nconst fs = require('fs')\nconst fetch = require('make-fetch-happen')\nconst table = require('text-table')\nconst which = require('which')\nconst pacote = require('pacote')\nconst { resolve } = require('path')\nconst semver = require('semver')\nconst { promisify } = require('util')\nconst ansiTrim = require('./utils/ansi-trim.js')\nconst isWindows = require('./utils/is-windows.js')\nconst ping = require('./utils/ping.js')\nconst { registry: { default: defaultRegistry } } = require('./utils/config/definitions.js')\nconst lstat = promisify(fs.lstat)\nconst readdir = promisify(fs.readdir)\nconst access = promisify(fs.access)\nconst { R_OK, W_OK, X_OK } = fs.constants\nconst maskLabel = mask => {\n  const label = []\n  if (mask & R_OK)\n    label.push('readable')\n\n  if (mask & W_OK)\n    label.push('writable')\n\n  if (mask & X_OK)\n    label.push('executable')\n\n  return label.join(', ')\n}\n\nconst BaseCommand = require('./base-command.js')\nclass Doctor extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Check your npm environment'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'doctor'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['registry']\n  }\n\n  exec (args, cb) {\n    this.doctor(args).then(() => cb()).catch(cb)\n  }\n\n  async doctor (args) {\n    this.npm.log.info('Running checkup')\n\n    // each message is [title, ok, message]\n    const messages = []\n\n    const actions = [\n      ['npm ping', 'checkPing', []],\n      ['npm -v', 'getLatestNpmVersion', []],\n      ['node -v', 'getLatestNodejsVersion', []],\n      ['npm config get registry', 'checkNpmRegistry', []],\n      ['which git', 'getGitPath', []],\n      ...(isWindows ? [] : [\n        ['Perms check on cached files', 'checkFilesPermission', [this.npm.cache, true, R_OK]],\n        ['Perms check on local node_modules', 'checkFilesPermission', [this.npm.localDir, true]],\n        ['Perms check on global node_modules', 'checkFilesPermission', [this.npm.globalDir, false]],\n        ['Perms check on local bin folder', 'checkFilesPermission', [this.npm.localBin, false, R_OK | W_OK | X_OK]],\n        ['Perms check on global bin folder', 'checkFilesPermission', [this.npm.globalBin, false, X_OK]],\n      ]),\n      ['Verify cache contents', 'verifyCachedFiles', [this.npm.flatOptions.cache]],\n      // TODO:\n      // - ensure arborist.loadActual() runs without errors and no invalid edges\n      // - ensure package-lock.json matches loadActual()\n      // - verify loadActual without hidden lock file matches hidden lockfile\n      // - verify all local packages have bins linked\n    ]\n\n    // Do the actual work\n    for (const [msg, fn, args] of actions) {\n      const line = [msg]\n      try {\n        line.push(true, await this[fn](...args))\n      } catch (er) {\n        line.push(false, er)\n      }\n      messages.push(line)\n    }\n\n    const outHead = ['Check', 'Value', 'Recommendation/Notes']\n      .map(!this.npm.color ? h => h : h => chalk.underline(h))\n    let allOk = true\n    const outBody = messages.map(!this.npm.color\n      ? item => {\n        allOk = allOk && item[1]\n        item[1] = item[1] ? 'ok' : 'not ok'\n        item[2] = String(item[2])\n        return item\n      }\n      : item => {\n        allOk = allOk && item[1]\n        if (!item[1]) {\n          item[0] = chalk.red(item[0])\n          item[2] = chalk.magenta(String(item[2]))\n        }\n        item[1] = item[1] ? chalk.green('ok') : chalk.red('not ok')\n        return item\n      })\n    const outTable = [outHead, ...outBody]\n    const tableOpts = {\n      stringLength: s => ansiTrim(s).length,\n    }\n\n    const silent = this.npm.log.levels[this.npm.log.level] >\n      this.npm.log.levels.error\n    if (!silent) {\n      this.npm.output(table(outTable, tableOpts))\n      if (!allOk)\n        console.error('')\n    }\n    if (!allOk)\n      throw 'Some problems found. See above for recommendations.'\n  }\n\n  async checkPing () {\n    const tracker = this.npm.log.newItem('checkPing', 1)\n    tracker.info('checkPing', 'Pinging registry')\n    try {\n      await ping(this.npm.flatOptions)\n      return ''\n    } catch (er) {\n      if (/^E\\d{3}$/.test(er.code || ''))\n        throw er.code.substr(1) + ' ' + er.message\n      else\n        throw er.message\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async getLatestNpmVersion () {\n    const tracker = this.npm.log.newItem('getLatestNpmVersion', 1)\n    tracker.info('getLatestNpmVersion', 'Getting npm package information')\n    try {\n      const latest = (await pacote.manifest('npm@latest', this.npm.flatOptions)).version\n      if (semver.gte(this.npm.version, latest))\n        return `current: v${this.npm.version}, latest: v${latest}`\n      else\n        throw `Use npm v${latest}`\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async getLatestNodejsVersion () {\n    // XXX get the latest in the current major as well\n    const current = process.version\n    const currentRange = `^${current}`\n    const url = 'https://nodejs.org/dist/index.json'\n    const tracker = this.npm.log.newItem('getLatestNodejsVersion', 1)\n    tracker.info('getLatestNodejsVersion', 'Getting Node.js release information')\n    try {\n      const res = await fetch(url, { method: 'GET', ...this.npm.flatOptions })\n      const data = await res.json()\n      let maxCurrent = '0.0.0'\n      let maxLTS = '0.0.0'\n      for (const { lts, version } of data) {\n        if (lts && semver.gt(version, maxLTS))\n          maxLTS = version\n\n        if (semver.satisfies(version, currentRange) &&\n          semver.gt(version, maxCurrent))\n          maxCurrent = version\n      }\n      const recommended = semver.gt(maxCurrent, maxLTS) ? maxCurrent : maxLTS\n      if (semver.gte(process.version, recommended))\n        return `current: ${current}, recommended: ${recommended}`\n      else\n        throw `Use node ${recommended} (current: ${current})`\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async checkFilesPermission (root, shouldOwn, mask = null) {\n    if (mask === null)\n      mask = shouldOwn ? R_OK | W_OK : R_OK\n\n    let ok = true\n\n    const tracker = this.npm.log.newItem(root, 1)\n\n    try {\n      const uid = process.getuid()\n      const gid = process.getgid()\n      const files = new Set([root])\n      for (const f of files) {\n        tracker.silly('checkFilesPermission', f.substr(root.length + 1))\n        const st = await lstat(f)\n          .catch(er => {\n            ok = false\n            tracker.warn('checkFilesPermission', 'error getting info for ' + f)\n          })\n\n        tracker.completeWork(1)\n\n        if (!st)\n          continue\n\n        if (shouldOwn && (uid !== st.uid || gid !== st.gid)) {\n          tracker.warn('checkFilesPermission', 'should be owner of ' + f)\n          ok = false\n        }\n\n        if (!st.isDirectory() && !st.isFile())\n          continue\n\n        try {\n          await access(f, mask)\n        } catch (er) {\n          ok = false\n          const msg = `Missing permissions on ${f} (expect: ${maskLabel(mask)})`\n          tracker.error('checkFilesPermission', msg)\n          continue\n        }\n\n        if (st.isDirectory()) {\n          const entries = await readdir(f)\n            .catch(er => {\n              ok = false\n              tracker.warn('checkFilesPermission', 'error reading directory ' + f)\n              return []\n            })\n          for (const entry of entries)\n            files.add(resolve(f, entry))\n        }\n      }\n    } finally {\n      tracker.finish()\n      if (!ok) {\n        throw `Check the permissions of files in ${root}` +\n          (shouldOwn ? ' (should be owned by current user)' : '')\n      } else\n        return ''\n    }\n  }\n\n  async getGitPath () {\n    const tracker = this.npm.log.newItem('getGitPath', 1)\n    tracker.info('getGitPath', 'Finding git in your PATH')\n    try {\n      return await which('git').catch(er => {\n        tracker.warn(er)\n        throw \"Install git and ensure it's in your PATH.\"\n      })\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async verifyCachedFiles () {\n    const tracker = this.npm.log.newItem('verifyCachedFiles', 1)\n    tracker.info('verifyCachedFiles', 'Verifying the npm cache')\n    try {\n      const stats = await cacache.verify(this.npm.flatOptions.cache)\n      const {\n        badContentCount,\n        reclaimedCount,\n        missingContent,\n        reclaimedSize,\n      } = stats\n      if (badContentCount || reclaimedCount || missingContent) {\n        if (badContentCount)\n          tracker.warn('verifyCachedFiles', `Corrupted content removed: ${badContentCount}`)\n\n        if (reclaimedCount)\n          tracker.warn('verifyCachedFiles', `Content garbage-collected: ${reclaimedCount} (${reclaimedSize} bytes)`)\n\n        if (missingContent)\n          tracker.warn('verifyCachedFiles', `Missing content: ${missingContent}`)\n\n        tracker.warn('verifyCachedFiles', 'Cache issues have been fixed')\n      }\n      tracker.info('verifyCachedFiles', `Verification complete. Stats: ${\n      JSON.stringify(stats, null, 2)\n    }`)\n      return `verified ${stats.verifiedContent} tarballs`\n    } finally {\n      tracker.finish()\n    }\n  }\n\n  async checkNpmRegistry () {\n    if (this.npm.flatOptions.registry !== defaultRegistry)\n      throw `Try \\`npm config set registry=${defaultRegistry}\\``\n    else\n      return `using default registry (${defaultRegistry})`\n  }\n}\n\nmodule.exports = Doctor\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
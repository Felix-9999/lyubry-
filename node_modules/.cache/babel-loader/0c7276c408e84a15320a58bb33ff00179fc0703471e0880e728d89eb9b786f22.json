{"ast":null,"code":"// Given a set of nodes in a tree, and a filter function to test\n// incoming edges to the dep set that should be ignored otherwise.\n//\n// find the set of deps that are only depended upon by nodes in the set, or\n// their dependencies, or edges that are ignored.\n//\n// Used when figuring out what to prune when replacing a node with a newer\n// version, or when an optional dep fails to install.\n\nconst gatherDepSet = (set, edgeFilter) => {\n  const deps = new Set(set);\n\n  // add the full set of dependencies.  note that this loop will continue\n  // as the deps set increases in size.\n  for (const node of deps) {\n    for (const edge of node.edgesOut.values()) {\n      if (edge.to && edgeFilter(edge)) {\n        deps.add(edge.to);\n      }\n    }\n  }\n\n  // now remove all nodes in the set that have a dependant outside the set\n  // if any change is made, then re-check\n  // continue until no changes made, or deps set evaporates fully.\n  let changed = true;\n  while (changed === true && deps.size > 0) {\n    changed = false;\n    for (const dep of deps) {\n      for (const edge of dep.edgesIn) {\n        if (!deps.has(edge.from) && edgeFilter(edge)) {\n          changed = true;\n          deps.delete(dep);\n          break;\n        }\n      }\n    }\n  }\n  return deps;\n};\nmodule.exports = gatherDepSet;","map":{"version":3,"names":["gatherDepSet","set","edgeFilter","deps","Set","node","edge","edgesOut","values","to","add","changed","size","dep","edgesIn","has","from","delete","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/gather-dep-set.js"],"sourcesContent":["// Given a set of nodes in a tree, and a filter function to test\n// incoming edges to the dep set that should be ignored otherwise.\n//\n// find the set of deps that are only depended upon by nodes in the set, or\n// their dependencies, or edges that are ignored.\n//\n// Used when figuring out what to prune when replacing a node with a newer\n// version, or when an optional dep fails to install.\n\nconst gatherDepSet = (set, edgeFilter) => {\n  const deps = new Set(set)\n\n  // add the full set of dependencies.  note that this loop will continue\n  // as the deps set increases in size.\n  for (const node of deps) {\n    for (const edge of node.edgesOut.values()) {\n      if (edge.to && edgeFilter(edge)) {\n        deps.add(edge.to)\n      }\n    }\n  }\n\n  // now remove all nodes in the set that have a dependant outside the set\n  // if any change is made, then re-check\n  // continue until no changes made, or deps set evaporates fully.\n  let changed = true\n  while (changed === true && deps.size > 0) {\n    changed = false\n    for (const dep of deps) {\n      for (const edge of dep.edgesIn) {\n        if (!deps.has(edge.from) && edgeFilter(edge)) {\n          changed = true\n          deps.delete(dep)\n          break\n        }\n      }\n    }\n  }\n\n  return deps\n}\n\nmodule.exports = gatherDepSet\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGA,CAACC,GAAG,EAAEC,UAAU,KAAK;EACxC,MAAMC,IAAI,GAAG,IAAIC,GAAG,CAACH,GAAG,CAAC;;EAEzB;EACA;EACA,KAAK,MAAMI,IAAI,IAAIF,IAAI,EAAE;IACvB,KAAK,MAAMG,IAAI,IAAID,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;MACzC,IAAIF,IAAI,CAACG,EAAE,IAAIP,UAAU,CAACI,IAAI,CAAC,EAAE;QAC/BH,IAAI,CAACO,GAAG,CAACJ,IAAI,CAACG,EAAE,CAAC;MACnB;IACF;EACF;;EAEA;EACA;EACA;EACA,IAAIE,OAAO,GAAG,IAAI;EAClB,OAAOA,OAAO,KAAK,IAAI,IAAIR,IAAI,CAACS,IAAI,GAAG,CAAC,EAAE;IACxCD,OAAO,GAAG,KAAK;IACf,KAAK,MAAME,GAAG,IAAIV,IAAI,EAAE;MACtB,KAAK,MAAMG,IAAI,IAAIO,GAAG,CAACC,OAAO,EAAE;QAC9B,IAAI,CAACX,IAAI,CAACY,GAAG,CAACT,IAAI,CAACU,IAAI,CAAC,IAAId,UAAU,CAACI,IAAI,CAAC,EAAE;UAC5CK,OAAO,GAAG,IAAI;UACdR,IAAI,CAACc,MAAM,CAACJ,GAAG,CAAC;UAChB;QACF;MACF;IACF;EACF;EAEA,OAAOV,IAAI;AACb,CAAC;AAEDe,MAAM,CAACC,OAAO,GAAGnB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
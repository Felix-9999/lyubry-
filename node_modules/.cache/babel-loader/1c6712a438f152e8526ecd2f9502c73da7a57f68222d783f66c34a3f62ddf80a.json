{"ast":null,"code":"// take a path and a resolved value, and turn it into a resolution from\n// the given new path.  This is used with converting a package.json's\n// relative file: path into one suitable for a lockfile, or between\n// lockfiles, and for converting hosted git repos to a consistent url type.\nconst npa = require('npm-package-arg');\nconst relpath = require('./relpath.js');\nconst consistentResolve = (resolved, fromPath, toPath, relPaths = false) => {\n  if (!resolved) {\n    return null;\n  }\n  try {\n    const hostedOpt = {\n      noCommittish: false\n    };\n    const {\n      fetchSpec,\n      saveSpec,\n      type,\n      hosted,\n      rawSpec,\n      raw\n    } = npa(resolved, fromPath);\n    const isPath = type === 'file' || type === 'directory';\n    return isPath && !relPaths ? `file:${fetchSpec}` : isPath ? 'file:' + (toPath ? relpath(toPath, fetchSpec) : fetchSpec) : hosted ? `git+${hosted.auth ? hosted.https(hostedOpt) : hosted.sshurl(hostedOpt)}` : type === 'git' ? saveSpec\n    // always return something.  'foo' is interpreted as 'foo@' otherwise.\n    : rawSpec === '' && raw.slice(-1) !== '@' ? raw\n    // just strip off the name, but otherwise return as-is\n    : rawSpec;\n  } catch (_) {\n    // whatever we passed in was not acceptable to npa.\n    // leave it 100% untouched.\n    return resolved;\n  }\n};\nmodule.exports = consistentResolve;","map":{"version":3,"names":["npa","require","relpath","consistentResolve","resolved","fromPath","toPath","relPaths","hostedOpt","noCommittish","fetchSpec","saveSpec","type","hosted","rawSpec","raw","isPath","auth","https","sshurl","slice","_","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/consistent-resolve.js"],"sourcesContent":["// take a path and a resolved value, and turn it into a resolution from\n// the given new path.  This is used with converting a package.json's\n// relative file: path into one suitable for a lockfile, or between\n// lockfiles, and for converting hosted git repos to a consistent url type.\nconst npa = require('npm-package-arg')\nconst relpath = require('./relpath.js')\nconst consistentResolve = (resolved, fromPath, toPath, relPaths = false) => {\n  if (!resolved) {\n    return null\n  }\n\n  try {\n    const hostedOpt = { noCommittish: false }\n    const {\n      fetchSpec,\n      saveSpec,\n      type,\n      hosted,\n      rawSpec,\n      raw,\n    } = npa(resolved, fromPath)\n    const isPath = type === 'file' || type === 'directory'\n    return isPath && !relPaths ? `file:${fetchSpec}`\n      : isPath ? 'file:' + (toPath ? relpath(toPath, fetchSpec) : fetchSpec)\n      : hosted ? `git+${\n        hosted.auth ? hosted.https(hostedOpt) : hosted.sshurl(hostedOpt)\n      }`\n      : type === 'git' ? saveSpec\n      // always return something.  'foo' is interpreted as 'foo@' otherwise.\n      : rawSpec === '' && raw.slice(-1) !== '@' ? raw\n      // just strip off the name, but otherwise return as-is\n      : rawSpec\n  } catch (_) {\n    // whatever we passed in was not acceptable to npa.\n    // leave it 100% untouched.\n    return resolved\n  }\n}\nmodule.exports = consistentResolve\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACtC,MAAMC,OAAO,GAAGD,OAAO,CAAC,cAAc,CAAC;AACvC,MAAME,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,GAAG,KAAK,KAAK;EAC1E,IAAI,CAACH,QAAQ,EAAE;IACb,OAAO,IAAI;EACb;EAEA,IAAI;IACF,MAAMI,SAAS,GAAG;MAAEC,YAAY,EAAE;IAAM,CAAC;IACzC,MAAM;MACJC,SAAS;MACTC,QAAQ;MACRC,IAAI;MACJC,MAAM;MACNC,OAAO;MACPC;IACF,CAAC,GAAGf,GAAG,CAACI,QAAQ,EAAEC,QAAQ,CAAC;IAC3B,MAAMW,MAAM,GAAGJ,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,WAAW;IACtD,OAAOI,MAAM,IAAI,CAACT,QAAQ,GAAG,QAAQG,SAAS,EAAE,GAC5CM,MAAM,GAAG,OAAO,IAAIV,MAAM,GAAGJ,OAAO,CAACI,MAAM,EAAEI,SAAS,CAAC,GAAGA,SAAS,CAAC,GACpEG,MAAM,GAAG,OACTA,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACK,KAAK,CAACV,SAAS,CAAC,GAAGK,MAAM,CAACM,MAAM,CAACX,SAAS,CAAC,EAChE,GACAI,IAAI,KAAK,KAAK,GAAGD;IACnB;IAAA,EACEG,OAAO,KAAK,EAAE,IAAIC,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGL;IAC5C;IAAA,EACED,OAAO;EACb,CAAC,CAAC,OAAOO,CAAC,EAAE;IACV;IACA;IACA,OAAOjB,QAAQ;EACjB;AACF,CAAC;AACDkB,MAAM,CAACC,OAAO,GAAGpB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const liborg = require('libnpmorg');\nconst otplease = require('./utils/otplease.js');\nconst Table = require('cli-table3');\nconst BaseCommand = require('./base-command.js');\nclass Org extends BaseCommand {\n  static get description() {\n    return 'Manage orgs';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'org';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['set orgname username [developer | admin | owner]', 'rm orgname username', 'ls orgname [<username>]'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['registry', 'otp', 'json', 'parseable'];\n  }\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n    if (argv.length === 2) return ['set', 'rm', 'ls'];\n    switch (argv[2]) {\n      case 'ls':\n      case 'add':\n      case 'rm':\n      case 'set':\n        return [];\n      default:\n        throw new Error(argv[2] + ' not recognized');\n    }\n  }\n  exec(args, cb) {\n    this.org(args).then(x => cb(null, x)).catch(err => err.code === 'EUSAGE' ? cb(err.message) : cb(err));\n  }\n  async org([cmd, orgname, username, role], cb) {\n    return otplease(this.npm.flatOptions, opts => {\n      switch (cmd) {\n        case 'add':\n        case 'set':\n          return this.set(orgname, username, role, opts);\n        case 'rm':\n          return this.rm(orgname, username, opts);\n        case 'ls':\n          return this.ls(orgname, username, opts);\n        default:\n          throw Object.assign(new Error(this.usage), {\n            code: 'EUSAGE'\n          });\n      }\n    });\n  }\n  set(org, user, role, opts) {\n    role = role || 'developer';\n    if (!org) throw new Error('First argument `orgname` is required.');\n    if (!user) throw new Error('Second argument `username` is required.');\n    if (!['owner', 'admin', 'developer'].find(x => x === role)) throw new Error('Third argument `role` must be one of `owner`, `admin`, or `developer`, with `developer` being the default value if omitted.');\n    return liborg.set(org, user, role, opts).then(memDeets => {\n      if (opts.json) this.npm.output(JSON.stringify(memDeets, null, 2));else if (opts.parseable) {\n        this.npm.output(['org', 'orgsize', 'user', 'role'].join('\\t'));\n        this.npm.output([memDeets.org.name, memDeets.org.size, memDeets.user, memDeets.role].join('\\t'));\n      } else if (!opts.silent && opts.loglevel !== 'silent') this.npm.output(`Added ${memDeets.user} as ${memDeets.role} to ${memDeets.org.name}. You now have ${memDeets.org.size} member${memDeets.org.size === 1 ? '' : 's'} in this org.`);\n      return memDeets;\n    });\n  }\n  rm(org, user, opts) {\n    if (!org) throw new Error('First argument `orgname` is required.');\n    if (!user) throw new Error('Second argument `username` is required.');\n    return liborg.rm(org, user, opts).then(() => {\n      return liborg.ls(org, opts);\n    }).then(roster => {\n      user = user.replace(/^[~@]?/, '');\n      org = org.replace(/^[~@]?/, '');\n      const userCount = Object.keys(roster).length;\n      if (opts.json) {\n        this.npm.output(JSON.stringify({\n          user,\n          org,\n          userCount,\n          deleted: true\n        }));\n      } else if (opts.parseable) {\n        this.npm.output(['user', 'org', 'userCount', 'deleted'].join('\\t'));\n        this.npm.output([user, org, userCount, true].join('\\t'));\n      } else if (!opts.silent && opts.loglevel !== 'silent') this.npm.output(`Successfully removed ${user} from ${org}. You now have ${userCount} member${userCount === 1 ? '' : 's'} in this org.`);\n    });\n  }\n  ls(org, user, opts) {\n    if (!org) throw new Error('First argument `orgname` is required.');\n    return liborg.ls(org, opts).then(roster => {\n      if (user) {\n        const newRoster = {};\n        if (roster[user]) newRoster[user] = roster[user];\n        roster = newRoster;\n      }\n      if (opts.json) this.npm.output(JSON.stringify(roster, null, 2));else if (opts.parseable) {\n        this.npm.output(['user', 'role'].join('\\t'));\n        Object.keys(roster).forEach(user => {\n          this.npm.output([user, roster[user]].join('\\t'));\n        });\n      } else if (!opts.silent && opts.loglevel !== 'silent') {\n        const table = new Table({\n          head: ['user', 'role']\n        });\n        Object.keys(roster).sort().forEach(user => {\n          table.push([user, roster[user]]);\n        });\n        this.npm.output(table.toString());\n      }\n    });\n  }\n}\nmodule.exports = Org;","map":{"version":3,"names":["liborg","require","otplease","Table","BaseCommand","Org","description","name","usage","params","completion","opts","argv","conf","remain","length","Error","exec","args","cb","org","then","x","catch","err","code","message","cmd","orgname","username","role","npm","flatOptions","set","rm","ls","Object","assign","user","find","memDeets","json","output","JSON","stringify","parseable","join","size","silent","loglevel","roster","replace","userCount","keys","deleted","newRoster","forEach","table","head","sort","push","toString","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/org.js"],"sourcesContent":["const liborg = require('libnpmorg')\nconst otplease = require('./utils/otplease.js')\nconst Table = require('cli-table3')\nconst BaseCommand = require('./base-command.js')\n\nclass Org extends BaseCommand {\n  static get description () {\n    return 'Manage orgs'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'org'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      'set orgname username [developer | admin | owner]',\n      'rm orgname username',\n      'ls orgname [<username>]',\n    ]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'registry',\n      'otp',\n      'json',\n      'parseable',\n    ]\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2)\n      return ['set', 'rm', 'ls']\n\n    switch (argv[2]) {\n      case 'ls':\n      case 'add':\n      case 'rm':\n      case 'set':\n        return []\n      default:\n        throw new Error(argv[2] + ' not recognized')\n    }\n  }\n\n  exec (args, cb) {\n    this.org(args)\n      .then(x => cb(null, x))\n      .catch(err => err.code === 'EUSAGE'\n        ? cb(err.message)\n        : cb(err)\n      )\n  }\n\n  async org ([cmd, orgname, username, role], cb) {\n    return otplease(this.npm.flatOptions, opts => {\n      switch (cmd) {\n        case 'add':\n        case 'set':\n          return this.set(orgname, username, role, opts)\n        case 'rm':\n          return this.rm(orgname, username, opts)\n        case 'ls':\n          return this.ls(orgname, username, opts)\n        default:\n          throw Object.assign(new Error(this.usage), { code: 'EUSAGE' })\n      }\n    })\n  }\n\n  set (org, user, role, opts) {\n    role = role || 'developer'\n    if (!org)\n      throw new Error('First argument `orgname` is required.')\n\n    if (!user)\n      throw new Error('Second argument `username` is required.')\n\n    if (!['owner', 'admin', 'developer'].find(x => x === role))\n      throw new Error('Third argument `role` must be one of `owner`, `admin`, or `developer`, with `developer` being the default value if omitted.')\n\n    return liborg.set(org, user, role, opts).then(memDeets => {\n      if (opts.json)\n        this.npm.output(JSON.stringify(memDeets, null, 2))\n      else if (opts.parseable) {\n        this.npm.output(['org', 'orgsize', 'user', 'role'].join('\\t'))\n        this.npm.output([\n          memDeets.org.name,\n          memDeets.org.size,\n          memDeets.user,\n          memDeets.role,\n        ].join('\\t'))\n      } else if (!opts.silent && opts.loglevel !== 'silent')\n        this.npm.output(`Added ${memDeets.user} as ${memDeets.role} to ${memDeets.org.name}. You now have ${memDeets.org.size} member${memDeets.org.size === 1 ? '' : 's'} in this org.`)\n\n      return memDeets\n    })\n  }\n\n  rm (org, user, opts) {\n    if (!org)\n      throw new Error('First argument `orgname` is required.')\n\n    if (!user)\n      throw new Error('Second argument `username` is required.')\n\n    return liborg.rm(org, user, opts).then(() => {\n      return liborg.ls(org, opts)\n    }).then(roster => {\n      user = user.replace(/^[~@]?/, '')\n      org = org.replace(/^[~@]?/, '')\n      const userCount = Object.keys(roster).length\n      if (opts.json) {\n        this.npm.output(JSON.stringify({\n          user,\n          org,\n          userCount,\n          deleted: true,\n        }))\n      } else if (opts.parseable) {\n        this.npm.output(['user', 'org', 'userCount', 'deleted'].join('\\t'))\n        this.npm.output([user, org, userCount, true].join('\\t'))\n      } else if (!opts.silent && opts.loglevel !== 'silent')\n        this.npm.output(`Successfully removed ${user} from ${org}. You now have ${userCount} member${userCount === 1 ? '' : 's'} in this org.`)\n    })\n  }\n\n  ls (org, user, opts) {\n    if (!org)\n      throw new Error('First argument `orgname` is required.')\n\n    return liborg.ls(org, opts).then(roster => {\n      if (user) {\n        const newRoster = {}\n        if (roster[user])\n          newRoster[user] = roster[user]\n\n        roster = newRoster\n      }\n      if (opts.json)\n        this.npm.output(JSON.stringify(roster, null, 2))\n      else if (opts.parseable) {\n        this.npm.output(['user', 'role'].join('\\t'))\n        Object.keys(roster).forEach(user => {\n          this.npm.output([user, roster[user]].join('\\t'))\n        })\n      } else if (!opts.silent && opts.loglevel !== 'silent') {\n        const table = new Table({ head: ['user', 'role'] })\n        Object.keys(roster).sort().forEach(user => {\n          table.push([user, roster[user]])\n        })\n        this.npm.output(table.toString())\n      }\n    })\n  }\n}\nmodule.exports = Org\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
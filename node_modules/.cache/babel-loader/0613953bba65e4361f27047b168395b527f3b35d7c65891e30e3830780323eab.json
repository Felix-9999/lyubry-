{"ast":null,"code":"const {\n  promisify\n} = require('util');\nconst readAsync = promisify(require('read'));\nconst userValidate = require('npm-user-validate');\nconst log = require('npmlog');\nexports.otp = readOTP;\nexports.password = readPassword;\nexports.username = readUsername;\nexports.email = readEmail;\nconst otpPrompt = `This command requires a one-time password (OTP) from your authenticator app.\nEnter one below. You can also pass one on the command line by appending --otp=123456.\nFor more information, see:\nhttps://docs.npmjs.com/getting-started/using-two-factor-authentication\nEnter OTP: `;\nconst passwordPrompt = 'npm password: ';\nconst usernamePrompt = 'npm username: ';\nconst emailPrompt = 'email (this IS public): ';\nfunction read(opts) {\n  log.clearProgress();\n  return readAsync(opts).finally(() => log.showProgress());\n}\nfunction readOTP(msg = otpPrompt, otp, isRetry) {\n  if (isRetry && otp && /^[\\d ]+$|^[A-Fa-f0-9]{64,64}$/.test(otp)) return otp.replace(/\\s+/g, '');\n  return read({\n    prompt: msg,\n    default: otp || ''\n  }).then(otp => readOTP(msg, otp, true));\n}\nfunction readPassword(msg = passwordPrompt, password, isRetry) {\n  if (isRetry && password) return password;\n  return read({\n    prompt: msg,\n    silent: true,\n    default: password || ''\n  }).then(password => readPassword(msg, password, true));\n}\nfunction readUsername(msg = usernamePrompt, username, opts = {}, isRetry) {\n  if (isRetry && username) {\n    const error = userValidate.username(username);\n    if (error) opts.log && opts.log.warn(error.message);else return Promise.resolve(username.trim());\n  }\n  return read({\n    prompt: msg,\n    default: username || ''\n  }).then(username => readUsername(msg, username, opts, true));\n}\nfunction readEmail(msg = emailPrompt, email, opts = {}, isRetry) {\n  if (isRetry && email) {\n    const error = userValidate.email(email);\n    if (error) opts.log && opts.log.warn(error.message);else return email.trim();\n  }\n  return read({\n    prompt: msg,\n    default: email || ''\n  }).then(username => readEmail(msg, username, opts, true));\n}","map":{"version":3,"names":["promisify","require","readAsync","userValidate","log","exports","otp","readOTP","password","readPassword","username","readUsername","email","readEmail","otpPrompt","passwordPrompt","usernamePrompt","emailPrompt","read","opts","clearProgress","finally","showProgress","msg","isRetry","test","replace","prompt","default","then","silent","error","warn","message","Promise","resolve","trim"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/read-user-info.js"],"sourcesContent":["const { promisify } = require('util')\nconst readAsync = promisify(require('read'))\nconst userValidate = require('npm-user-validate')\nconst log = require('npmlog')\n\nexports.otp = readOTP\nexports.password = readPassword\nexports.username = readUsername\nexports.email = readEmail\n\nconst otpPrompt = `This command requires a one-time password (OTP) from your authenticator app.\nEnter one below. You can also pass one on the command line by appending --otp=123456.\nFor more information, see:\nhttps://docs.npmjs.com/getting-started/using-two-factor-authentication\nEnter OTP: `\nconst passwordPrompt = 'npm password: '\nconst usernamePrompt = 'npm username: '\nconst emailPrompt = 'email (this IS public): '\n\nfunction read (opts) {\n  log.clearProgress()\n  return readAsync(opts).finally(() => log.showProgress())\n}\n\nfunction readOTP (msg = otpPrompt, otp, isRetry) {\n  if (isRetry && otp && /^[\\d ]+$|^[A-Fa-f0-9]{64,64}$/.test(otp))\n    return otp.replace(/\\s+/g, '')\n\n  return read({ prompt: msg, default: otp || '' })\n    .then((otp) => readOTP(msg, otp, true))\n}\n\nfunction readPassword (msg = passwordPrompt, password, isRetry) {\n  if (isRetry && password)\n    return password\n\n  return read({ prompt: msg, silent: true, default: password || '' })\n    .then((password) => readPassword(msg, password, true))\n}\n\nfunction readUsername (msg = usernamePrompt, username, opts = {}, isRetry) {\n  if (isRetry && username) {\n    const error = userValidate.username(username)\n    if (error)\n      opts.log && opts.log.warn(error.message)\n    else\n      return Promise.resolve(username.trim())\n  }\n\n  return read({ prompt: msg, default: username || '' })\n    .then((username) => readUsername(msg, username, opts, true))\n}\n\nfunction readEmail (msg = emailPrompt, email, opts = {}, isRetry) {\n  if (isRetry && email) {\n    const error = userValidate.email(email)\n    if (error)\n      opts.log && opts.log.warn(error.message)\n    else\n      return email.trim()\n  }\n\n  return read({ prompt: msg, default: email || '' })\n    .then((username) => readEmail(msg, username, opts, true))\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
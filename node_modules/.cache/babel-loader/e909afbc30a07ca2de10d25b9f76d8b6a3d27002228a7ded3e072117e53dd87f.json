{"ast":null,"code":"const tar = require('tar');\nconst minimatch = require('minimatch');\nconst normalizeMatch = str => str.replace(/\\\\+/g, '/').replace(/^\\.\\/|^\\./, '');\n\n// files and refs are mutating params\n// filterFiles, item, prefix and opts are read-only options\nconst untar = ({\n  files,\n  refs\n}, {\n  filterFiles,\n  item,\n  prefix\n}) => {\n  tar.list({\n    filter: (path, entry) => {\n      const fileMatch = () => !filterFiles.length || filterFiles.some(f => {\n        const pattern = normalizeMatch(f);\n        return minimatch(normalizeMatch(path), `{package/,}${pattern}`, {\n          matchBase: pattern.startsWith('*')\n        });\n      });\n\n      // expands usage of simple path filters, e.g: lib or src/\n      const folderMatch = () => filterFiles.some(f => normalizeMatch(path).startsWith(normalizeMatch(f)) || normalizeMatch(path).startsWith(`package/${normalizeMatch(f)}`));\n      if (entry.type === 'File' && (fileMatch() || folderMatch())) {\n        const key = path.replace(/^[^/]+\\/?/, '');\n        files.add(key);\n\n        // should skip reading file when using --name-only option\n        let content;\n        try {\n          entry.setEncoding('utf8');\n          content = entry.concat();\n        } catch (e) {\n          /* istanbul ignore next */\n          throw Object.assign(new Error('failed to read files'), {\n            code: 'EDIFFUNTAR'\n          });\n        }\n        refs.set(`${prefix}${key}`, {\n          content,\n          mode: `100${entry.mode.toString(8)}`\n        });\n        return true;\n      }\n    }\n  }).on('error', /* istanbul ignore next */e => {\n    throw e;\n  }).end(item);\n};\nconst readTarballs = async (tarballs, opts = {}) => {\n  const files = new Set();\n  const refs = new Map();\n  const arr = [].concat(tarballs);\n  const filterFiles = opts.diffFiles || [];\n  for (const i of arr) {\n    untar({\n      files,\n      refs\n    }, {\n      item: i.item,\n      prefix: i.prefix,\n      filterFiles\n    });\n  }\n\n  // await to read all content from included files\n  const allRefs = [...refs.values()];\n  const contents = await Promise.all(allRefs.map(async ref => ref.content));\n  contents.forEach((content, index) => {\n    allRefs[index].content = content;\n  });\n  return {\n    files,\n    refs\n  };\n};\nmodule.exports = readTarballs;","map":{"version":3,"names":["tar","require","minimatch","normalizeMatch","str","replace","untar","files","refs","filterFiles","item","prefix","list","filter","path","entry","fileMatch","length","some","f","pattern","matchBase","startsWith","folderMatch","type","key","add","content","setEncoding","concat","e","Object","assign","Error","code","set","mode","toString","on","end","readTarballs","tarballs","opts","Set","Map","arr","diffFiles","i","allRefs","values","contents","Promise","all","map","ref","forEach","index","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmdiff/lib/untar.js"],"sourcesContent":["const tar = require('tar')\nconst minimatch = require('minimatch')\n\nconst normalizeMatch = str => str\n  .replace(/\\\\+/g, '/')\n  .replace(/^\\.\\/|^\\./, '')\n\n// files and refs are mutating params\n// filterFiles, item, prefix and opts are read-only options\nconst untar = ({ files, refs }, { filterFiles, item, prefix }) => {\n  tar.list({\n    filter: (path, entry) => {\n      const fileMatch = () =>\n        (!filterFiles.length ||\n          filterFiles.some(f => {\n            const pattern = normalizeMatch(f)\n            return minimatch(\n              normalizeMatch(path),\n              `{package/,}${pattern}`,\n              { matchBase: pattern.startsWith('*') }\n            )\n          }))\n\n      // expands usage of simple path filters, e.g: lib or src/\n      const folderMatch = () =>\n        filterFiles.some(f =>\n          normalizeMatch(path).startsWith(normalizeMatch(f)) ||\n          normalizeMatch(path).startsWith(`package/${normalizeMatch(f)}`))\n\n      if (\n        entry.type === 'File' &&\n        (fileMatch() || folderMatch())\n      ) {\n        const key = path.replace(/^[^/]+\\/?/, '')\n        files.add(key)\n\n        // should skip reading file when using --name-only option\n        let content\n        try {\n          entry.setEncoding('utf8')\n          content = entry.concat()\n        } catch (e) {\n          /* istanbul ignore next */\n          throw Object.assign(\n            new Error('failed to read files'),\n            { code: 'EDIFFUNTAR' }\n          )\n        }\n\n        refs.set(`${prefix}${key}`, {\n          content,\n          mode: `100${entry.mode.toString(8)}`,\n        })\n        return true\n      }\n    },\n  })\n    .on('error', /* istanbul ignore next */ e => {\n      throw e\n    })\n    .end(item)\n}\n\nconst readTarballs = async (tarballs, opts = {}) => {\n  const files = new Set()\n  const refs = new Map()\n  const arr = [].concat(tarballs)\n\n  const filterFiles = opts.diffFiles || []\n\n  for (const i of arr) {\n    untar({\n      files,\n      refs,\n    }, {\n      item: i.item,\n      prefix: i.prefix,\n      filterFiles,\n    })\n  }\n\n  // await to read all content from included files\n  const allRefs = [...refs.values()]\n  const contents = await Promise.all(allRefs.map(async ref => ref.content))\n\n  contents.forEach((content, index) => {\n    allRefs[index].content = content\n  })\n\n  return {\n    files,\n    refs,\n  }\n}\n\nmodule.exports = readTarballs\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
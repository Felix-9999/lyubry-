{"ast":null,"code":"const fetch = require('npm-registry-fetch');\nconst log = require('npmlog');\nconst npa = require('npm-package-arg');\nconst getIdentity = require('./utils/get-identity');\nconst BaseCommand = require('./base-command.js');\nclass Star extends BaseCommand {\n  static get description() {\n    return 'Mark your favorite packages';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'star';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[<pkg>...]'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['registry', 'unicode'];\n  }\n  exec(args, cb) {\n    this.star(args).then(() => cb()).catch(cb);\n  }\n  async star(args) {\n    if (!args.length) throw new Error(this.usage);\n\n    // if we're unstarring, then show an empty star image\n    // otherwise, show the full star image\n    const unicode = this.npm.config.get('unicode');\n    const unstar = this.npm.config.get('star.unstar');\n    const full = unicode ? '\\u2605 ' : '(*)';\n    const empty = unicode ? '\\u2606 ' : '( )';\n    const show = unstar ? empty : full;\n    const pkgs = args.map(npa);\n    for (const pkg of pkgs) {\n      const [username, fullData] = await Promise.all([getIdentity(this.npm, this.npm.flatOptions), fetch.json(pkg.escapedName, {\n        ...this.npm.flatOptions,\n        spec: pkg,\n        query: {\n          write: true\n        },\n        preferOnline: true\n      })]);\n      if (!username) throw new Error('You need to be logged in!');\n      const body = {\n        _id: fullData._id,\n        _rev: fullData._rev,\n        users: fullData.users || {}\n      };\n      if (!unstar) {\n        log.info('star', 'starring', body._id);\n        body.users[username] = true;\n        log.verbose('star', 'starring', body);\n      } else {\n        delete body.users[username];\n        log.info('unstar', 'unstarring', body._id);\n        log.verbose('unstar', 'unstarring', body);\n      }\n      const data = await fetch.json(pkg.escapedName, {\n        ...this.npm.flatOptions,\n        spec: pkg,\n        method: 'PUT',\n        body\n      });\n      this.npm.output(show + ' ' + pkg.name);\n      log.verbose('star', data);\n      return data;\n    }\n  }\n}\nmodule.exports = Star;","map":{"version":3,"names":["fetch","require","log","npa","getIdentity","BaseCommand","Star","description","name","usage","params","exec","args","cb","star","then","catch","length","Error","unicode","npm","config","get","unstar","full","empty","show","pkgs","map","pkg","username","fullData","Promise","all","flatOptions","json","escapedName","spec","query","write","preferOnline","body","_id","_rev","users","info","verbose","data","method","output","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/star.js"],"sourcesContent":["const fetch = require('npm-registry-fetch')\nconst log = require('npmlog')\nconst npa = require('npm-package-arg')\n\nconst getIdentity = require('./utils/get-identity')\n\nconst BaseCommand = require('./base-command.js')\nclass Star extends BaseCommand {\n  static get description () {\n    return 'Mark your favorite packages'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'star'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<pkg>...]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'registry',\n      'unicode',\n    ]\n  }\n\n  exec (args, cb) {\n    this.star(args).then(() => cb()).catch(cb)\n  }\n\n  async star (args) {\n    if (!args.length)\n      throw new Error(this.usage)\n\n    // if we're unstarring, then show an empty star image\n    // otherwise, show the full star image\n    const unicode = this.npm.config.get('unicode')\n    const unstar = this.npm.config.get('star.unstar')\n    const full = unicode ? '\\u2605 ' : '(*)'\n    const empty = unicode ? '\\u2606 ' : '( )'\n    const show = unstar ? empty : full\n\n    const pkgs = args.map(npa)\n    for (const pkg of pkgs) {\n      const [username, fullData] = await Promise.all([\n        getIdentity(this.npm, this.npm.flatOptions),\n        fetch.json(pkg.escapedName, {\n          ...this.npm.flatOptions,\n          spec: pkg,\n          query: { write: true },\n          preferOnline: true,\n        }),\n      ])\n\n      if (!username)\n        throw new Error('You need to be logged in!')\n\n      const body = {\n        _id: fullData._id,\n        _rev: fullData._rev,\n        users: fullData.users || {},\n      }\n\n      if (!unstar) {\n        log.info('star', 'starring', body._id)\n        body.users[username] = true\n        log.verbose('star', 'starring', body)\n      } else {\n        delete body.users[username]\n        log.info('unstar', 'unstarring', body._id)\n        log.verbose('unstar', 'unstarring', body)\n      }\n\n      const data = await fetch.json(pkg.escapedName, {\n        ...this.npm.flatOptions,\n        spec: pkg,\n        method: 'PUT',\n        body,\n      })\n\n      this.npm.output(show + ' ' + pkg.name)\n      log.verbose('star', data)\n      return data\n    }\n  }\n}\nmodule.exports = Star\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
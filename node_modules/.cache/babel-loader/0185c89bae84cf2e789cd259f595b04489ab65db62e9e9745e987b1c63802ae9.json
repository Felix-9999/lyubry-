{"ast":null,"code":"const ansi = require('ansi-styles');\nconst colors = {\n  removed: ansi.red,\n  added: ansi.green,\n  header: ansi.yellow,\n  section: ansi.magenta\n};\nfunction colorize(str, opts) {\n  let headerLength = (opts || {}).headerLength;\n  if (typeof headerLength !== 'number' || Number.isNaN(headerLength)) {\n    headerLength = 2;\n  }\n  const color = (str, colorId) => {\n    const {\n      open,\n      close\n    } = colors[colorId];\n    // avoid highlighting the \"\\n\" (would highlight till the end of the line)\n    return str.replace(/[^\\n\\r]+/g, open + '$&' + close);\n  };\n\n  // this RegExp will include all the `\\n` chars into the lines, easier to join\n  const lines = (typeof str === 'string' && str || '').split(/^/m);\n  const start = color(lines.slice(0, headerLength).join(''), 'header');\n  const end = lines.slice(headerLength).join('').replace(/^-.*/gm, color('$&', 'removed')).replace(/^\\+.*/gm, color('$&', 'added')).replace(/^@@.+@@/gm, color('$&', 'section'));\n  return start + end;\n}\nmodule.exports = colorize;","map":{"version":3,"names":["ansi","require","colors","removed","red","added","green","header","yellow","section","magenta","colorize","str","opts","headerLength","Number","isNaN","color","colorId","open","close","replace","lines","split","start","slice","join","end","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/disparity-colors/index.js"],"sourcesContent":["const ansi = require('ansi-styles')\n\nconst colors = {\n  removed: ansi.red,\n  added: ansi.green,\n  header: ansi.yellow,\n  section: ansi.magenta\n}\n\nfunction colorize (str, opts) {\n  let headerLength = (opts || {}).headerLength\n  if (typeof headerLength !== 'number' || Number.isNaN(headerLength)) {\n    headerLength = 2\n  }\n\n  const color = (str, colorId) => {\n    const { open, close } = colors[colorId]\n    // avoid highlighting the \"\\n\" (would highlight till the end of the line)\n    return str.replace(/[^\\n\\r]+/g, open + '$&' + close)\n  }\n\n  // this RegExp will include all the `\\n` chars into the lines, easier to join\n  const lines = ((typeof str === 'string' && str) || '').split(/^/m)\n\n  const start = color(lines.slice(0, headerLength).join(''), 'header')\n  const end = lines.slice(headerLength).join('')\n    .replace(/^-.*/gm, color('$&', 'removed'))\n    .replace(/^\\+.*/gm, color('$&', 'added'))\n    .replace(/^@@.+@@/gm, color('$&', 'section'))\n\n  return start + end\n}\n\nmodule.exports = colorize\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEnC,MAAMC,MAAM,GAAG;EACbC,OAAO,EAAEH,IAAI,CAACI,GAAG;EACjBC,KAAK,EAAEL,IAAI,CAACM,KAAK;EACjBC,MAAM,EAAEP,IAAI,CAACQ,MAAM;EACnBC,OAAO,EAAET,IAAI,CAACU;AAChB,CAAC;AAED,SAASC,QAAQA,CAAEC,GAAG,EAAEC,IAAI,EAAE;EAC5B,IAAIC,YAAY,GAAG,CAACD,IAAI,IAAI,CAAC,CAAC,EAAEC,YAAY;EAC5C,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAIC,MAAM,CAACC,KAAK,CAACF,YAAY,CAAC,EAAE;IAClEA,YAAY,GAAG,CAAC;EAClB;EAEA,MAAMG,KAAK,GAAGA,CAACL,GAAG,EAAEM,OAAO,KAAK;IAC9B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGlB,MAAM,CAACgB,OAAO,CAAC;IACvC;IACA,OAAON,GAAG,CAACS,OAAO,CAAC,WAAW,EAAEF,IAAI,GAAG,IAAI,GAAGC,KAAK,CAAC;EACtD,CAAC;;EAED;EACA,MAAME,KAAK,GAAG,CAAE,OAAOV,GAAG,KAAK,QAAQ,IAAIA,GAAG,IAAK,EAAE,EAAEW,KAAK,CAAC,IAAI,CAAC;EAElE,MAAMC,KAAK,GAAGP,KAAK,CAACK,KAAK,CAACG,KAAK,CAAC,CAAC,EAAEX,YAAY,CAAC,CAACY,IAAI,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC;EACpE,MAAMC,GAAG,GAAGL,KAAK,CAACG,KAAK,CAACX,YAAY,CAAC,CAACY,IAAI,CAAC,EAAE,CAAC,CAC3CL,OAAO,CAAC,QAAQ,EAAEJ,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CACzCI,OAAO,CAAC,SAAS,EAAEJ,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CACxCI,OAAO,CAAC,WAAW,EAAEJ,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;EAE/C,OAAOO,KAAK,GAAGG,GAAG;AACpB;AAEAC,MAAM,CAACC,OAAO,GAAGlB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
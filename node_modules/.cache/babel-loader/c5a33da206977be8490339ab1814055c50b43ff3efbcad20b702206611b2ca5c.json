{"ast":null,"code":"const {\n  delimiter\n} = require('path');\nconst chalk = require('chalk');\nconst ciDetect = require('@npmcli/ci-detect');\nconst runScript = require('@npmcli/run-script');\nconst readPackageJson = require('read-package-json-fast');\nconst noTTY = require('./no-tty.js');\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s\n};\nconst run = async ({\n  args,\n  call,\n  color,\n  flatOptions,\n  locationMsg,\n  log,\n  output = () => {},\n  path,\n  pathArr,\n  runPath,\n  scriptShell\n}) => {\n  // turn list of args into command string\n  const script = call || args.shift() || scriptShell;\n  const colorize = color ? chalk : nocolor;\n\n  // do the fakey runScript dance\n  // still should work if no package.json in cwd\n  const realPkg = await readPackageJson(`${path}/package.json`).catch(() => ({}));\n  const pkg = {\n    ...realPkg,\n    scripts: {\n      ...(realPkg.scripts || {}),\n      npx: script\n    }\n  };\n  if (log && log.disableProgress) log.disableProgress();\n  try {\n    if (script === scriptShell) {\n      const isTTY = !noTTY();\n      if (isTTY) {\n        if (ciDetect()) return log.warn('exec', 'Interactive mode disabled in CI environment');\n        locationMsg = locationMsg || ` at location:\\n${colorize.dim(runPath)}`;\n        output(`${colorize.reset('\\nEntering npm script environment')}${colorize.reset(locationMsg)}${colorize.bold('\\nType \\'exit\\' or ^D when finished\\n')}`);\n      }\n    }\n    return await runScript({\n      ...flatOptions,\n      pkg,\n      banner: false,\n      // we always run in cwd, not --prefix\n      path: runPath,\n      stdioString: true,\n      event: 'npx',\n      args,\n      env: {\n        PATH: pathArr.join(delimiter)\n      },\n      stdio: 'inherit'\n    });\n  } finally {\n    if (log && log.enableProgress) log.enableProgress();\n  }\n};\nmodule.exports = run;","map":{"version":3,"names":["delimiter","require","chalk","ciDetect","runScript","readPackageJson","noTTY","nocolor","reset","s","bold","dim","run","args","call","color","flatOptions","locationMsg","log","output","path","pathArr","runPath","scriptShell","script","shift","colorize","realPkg","catch","pkg","scripts","npx","disableProgress","isTTY","warn","banner","stdioString","event","env","PATH","join","stdio","enableProgress","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmexec/lib/run-script.js"],"sourcesContent":["const { delimiter } = require('path')\n\nconst chalk = require('chalk')\nconst ciDetect = require('@npmcli/ci-detect')\nconst runScript = require('@npmcli/run-script')\nconst readPackageJson = require('read-package-json-fast')\nconst noTTY = require('./no-tty.js')\n\nconst nocolor = {\n  reset: s => s,\n  bold: s => s,\n  dim: s => s,\n}\n\nconst run = async ({\n  args,\n  call,\n  color,\n  flatOptions,\n  locationMsg,\n  log,\n  output = () => {},\n  path,\n  pathArr,\n  runPath,\n  scriptShell,\n}) => {\n  // turn list of args into command string\n  const script = call || args.shift() || scriptShell\n  const colorize = color ? chalk : nocolor\n\n  // do the fakey runScript dance\n  // still should work if no package.json in cwd\n  const realPkg = await readPackageJson(`${path}/package.json`)\n    .catch(() => ({}))\n  const pkg = {\n    ...realPkg,\n    scripts: {\n      ...(realPkg.scripts || {}),\n      npx: script,\n    },\n  }\n\n  if (log && log.disableProgress)\n    log.disableProgress()\n\n  try {\n    if (script === scriptShell) {\n      const isTTY = !noTTY()\n\n      if (isTTY) {\n        if (ciDetect())\n          return log.warn('exec', 'Interactive mode disabled in CI environment')\n\n        locationMsg = locationMsg || ` at location:\\n${colorize.dim(runPath)}`\n\n        output(`${\n          colorize.reset('\\nEntering npm script environment')\n        }${\n          colorize.reset(locationMsg)\n        }${\n          colorize.bold('\\nType \\'exit\\' or ^D when finished\\n')\n        }`)\n      }\n    }\n    return await runScript({\n      ...flatOptions,\n      pkg,\n      banner: false,\n      // we always run in cwd, not --prefix\n      path: runPath,\n      stdioString: true,\n      event: 'npx',\n      args,\n      env: {\n        PATH: pathArr.join(delimiter),\n      },\n      stdio: 'inherit',\n    })\n  } finally {\n    if (log && log.enableProgress)\n      log.enableProgress()\n  }\n}\n\nmodule.exports = run\n"],"mappings":"AAAA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAErC,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAME,QAAQ,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAC7C,MAAMG,SAAS,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAC/C,MAAMI,eAAe,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AACzD,MAAMK,KAAK,GAAGL,OAAO,CAAC,aAAa,CAAC;AAEpC,MAAMM,OAAO,GAAG;EACdC,KAAK,EAAEC,CAAC,IAAIA,CAAC;EACbC,IAAI,EAAED,CAAC,IAAIA,CAAC;EACZE,GAAG,EAAEF,CAAC,IAAIA;AACZ,CAAC;AAED,MAAMG,GAAG,GAAG,MAAAA,CAAO;EACjBC,IAAI;EACJC,IAAI;EACJC,KAAK;EACLC,WAAW;EACXC,WAAW;EACXC,GAAG;EACHC,MAAM,GAAGA,CAAA,KAAM,CAAC,CAAC;EACjBC,IAAI;EACJC,OAAO;EACPC,OAAO;EACPC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,MAAM,GAAGV,IAAI,IAAID,IAAI,CAACY,KAAK,CAAC,CAAC,IAAIF,WAAW;EAClD,MAAMG,QAAQ,GAAGX,KAAK,GAAGb,KAAK,GAAGK,OAAO;;EAExC;EACA;EACA,MAAMoB,OAAO,GAAG,MAAMtB,eAAe,CAAC,GAAGe,IAAI,eAAe,CAAC,CAC1DQ,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EACpB,MAAMC,GAAG,GAAG;IACV,GAAGF,OAAO;IACVG,OAAO,EAAE;MACP,IAAIH,OAAO,CAACG,OAAO,IAAI,CAAC,CAAC,CAAC;MAC1BC,GAAG,EAAEP;IACP;EACF,CAAC;EAED,IAAIN,GAAG,IAAIA,GAAG,CAACc,eAAe,EAC5Bd,GAAG,CAACc,eAAe,CAAC,CAAC;EAEvB,IAAI;IACF,IAAIR,MAAM,KAAKD,WAAW,EAAE;MAC1B,MAAMU,KAAK,GAAG,CAAC3B,KAAK,CAAC,CAAC;MAEtB,IAAI2B,KAAK,EAAE;QACT,IAAI9B,QAAQ,CAAC,CAAC,EACZ,OAAOe,GAAG,CAACgB,IAAI,CAAC,MAAM,EAAE,6CAA6C,CAAC;QAExEjB,WAAW,GAAGA,WAAW,IAAI,kBAAkBS,QAAQ,CAACf,GAAG,CAACW,OAAO,CAAC,EAAE;QAEtEH,MAAM,CAAC,GACLO,QAAQ,CAAClB,KAAK,CAAC,mCAAmC,CAAC,GAEnDkB,QAAQ,CAAClB,KAAK,CAACS,WAAW,CAAC,GAE3BS,QAAQ,CAAChB,IAAI,CAAC,uCAAuC,CAAC,EACtD,CAAC;MACL;IACF;IACA,OAAO,MAAMN,SAAS,CAAC;MACrB,GAAGY,WAAW;MACda,GAAG;MACHM,MAAM,EAAE,KAAK;MACb;MACAf,IAAI,EAAEE,OAAO;MACbc,WAAW,EAAE,IAAI;MACjBC,KAAK,EAAE,KAAK;MACZxB,IAAI;MACJyB,GAAG,EAAE;QACHC,IAAI,EAAElB,OAAO,CAACmB,IAAI,CAACxC,SAAS;MAC9B,CAAC;MACDyC,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC,SAAS;IACR,IAAIvB,GAAG,IAAIA,GAAG,CAACwB,cAAc,EAC3BxB,GAAG,CAACwB,cAAc,CAAC,CAAC;EACxB;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGhC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nvar childProcess = require(\"child_process\");\nvar os = require(\"os\");\nmodule.exports = function opener(args, options, callback) {\n  var platform = process.platform;\n\n  // Attempt to detect Windows Subystem for Linux (WSL). WSL  itself as Linux (which works in most cases), but in\n  // this specific case we need to treat it as actually being Windows. The \"Windows-way\" of opening things through\n  // cmd.exe works just fine here, whereas using xdg-open does not, since there is no X Windows in WSL.\n  if (platform === \"linux\" && os.release().indexOf(\"Microsoft\") !== -1) {\n    platform = \"win32\";\n  }\n\n  // http://stackoverflow.com/q/1480971/3191, but see below for Windows.\n  var command;\n  switch (platform) {\n    case \"win32\":\n      {\n        command = \"cmd.exe\";\n        break;\n      }\n    case \"darwin\":\n      {\n        command = \"open\";\n        break;\n      }\n    default:\n      {\n        command = \"xdg-open\";\n        break;\n      }\n  }\n  if (typeof args === \"string\") {\n    args = [args];\n  }\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  if (options && typeof options === \"object\" && options.command) {\n    if (platform === \"win32\") {\n      // *always* use cmd on windows\n      args = [options.command].concat(args);\n    } else {\n      command = options.command;\n    }\n  }\n  if (platform === \"win32\") {\n    // On Windows, we really want to use the \"start\" command. But, the rules regarding arguments with spaces, and\n    // escaping them with quotes, can get really arcane. So the easiest way to deal with this is to pass off the\n    // responsibility to \"cmd /c\", which has that logic built in.\n    //\n    // Furthermore, if \"cmd /c\" double-quoted the first parameter, then \"start\" will interpret it as a window title,\n    // so we need to add a dummy empty-string window title: http://stackoverflow.com/a/154090/3191\n    //\n    // Additionally, on Windows ampersand and caret need to be escaped when passed to \"start\"\n    args = args.map(function (value) {\n      return value.replace(/[&^]/g, \"^$&\");\n    });\n    args = [\"/c\", \"start\", \"\\\"\\\"\"].concat(args);\n  }\n  return childProcess.execFile(command, args, options, callback);\n};","map":{"version":3,"names":["childProcess","require","os","module","exports","opener","args","options","callback","platform","process","release","indexOf","command","concat","map","value","replace","execFile"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/opener/lib/opener.js"],"sourcesContent":["\"use strict\";\nvar childProcess = require(\"child_process\");\nvar os = require(\"os\");\n\nmodule.exports = function opener(args, options, callback) {\n    var platform = process.platform;\n\n    // Attempt to detect Windows Subystem for Linux (WSL). WSL  itself as Linux (which works in most cases), but in\n    // this specific case we need to treat it as actually being Windows. The \"Windows-way\" of opening things through\n    // cmd.exe works just fine here, whereas using xdg-open does not, since there is no X Windows in WSL.\n    if (platform === \"linux\" && os.release().indexOf(\"Microsoft\") !== -1) {\n        platform = \"win32\";\n    }\n\n    // http://stackoverflow.com/q/1480971/3191, but see below for Windows.\n    var command;\n    switch (platform) {\n        case \"win32\": {\n            command = \"cmd.exe\";\n            break;\n        }\n        case \"darwin\": {\n            command = \"open\";\n            break;\n        }\n        default: {\n            command = \"xdg-open\";\n            break;\n        }\n    }\n\n    if (typeof args === \"string\") {\n        args = [args];\n    }\n\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n\n    if (options && typeof options === \"object\" && options.command) {\n        if (platform === \"win32\") {\n            // *always* use cmd on windows\n            args = [options.command].concat(args);\n        } else {\n            command = options.command;\n        }\n    }\n\n    if (platform === \"win32\") {\n        // On Windows, we really want to use the \"start\" command. But, the rules regarding arguments with spaces, and\n        // escaping them with quotes, can get really arcane. So the easiest way to deal with this is to pass off the\n        // responsibility to \"cmd /c\", which has that logic built in.\n        //\n        // Furthermore, if \"cmd /c\" double-quoted the first parameter, then \"start\" will interpret it as a window title,\n        // so we need to add a dummy empty-string window title: http://stackoverflow.com/a/154090/3191\n        //\n        // Additionally, on Windows ampersand and caret need to be escaped when passed to \"start\"\n        args = args.map(function (value) {\n            return value.replace(/[&^]/g, \"^$&\");\n        });\n        args = [\"/c\", \"start\", \"\\\"\\\"\"].concat(args);\n    }\n\n    return childProcess.execFile(command, args, options, callback);\n};\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AAEtBE,MAAM,CAACC,OAAO,GAAG,SAASC,MAAMA,CAACC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACtD,IAAIC,QAAQ,GAAGC,OAAO,CAACD,QAAQ;;EAE/B;EACA;EACA;EACA,IAAIA,QAAQ,KAAK,OAAO,IAAIP,EAAE,CAACS,OAAO,CAAC,CAAC,CAACC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;IAClEH,QAAQ,GAAG,OAAO;EACtB;;EAEA;EACA,IAAII,OAAO;EACX,QAAQJ,QAAQ;IACZ,KAAK,OAAO;MAAE;QACVI,OAAO,GAAG,SAAS;QACnB;MACJ;IACA,KAAK,QAAQ;MAAE;QACXA,OAAO,GAAG,MAAM;QAChB;MACJ;IACA;MAAS;QACLA,OAAO,GAAG,UAAU;QACpB;MACJ;EACJ;EAEA,IAAI,OAAOP,IAAI,KAAK,QAAQ,EAAE;IAC1BA,IAAI,GAAG,CAACA,IAAI,CAAC;EACjB;EAEA,IAAI,OAAOC,OAAO,KAAK,UAAU,EAAE;IAC/BC,QAAQ,GAAGD,OAAO;IAClBA,OAAO,GAAG,CAAC,CAAC;EAChB;EAEA,IAAIA,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACM,OAAO,EAAE;IAC3D,IAAIJ,QAAQ,KAAK,OAAO,EAAE;MACtB;MACAH,IAAI,GAAG,CAACC,OAAO,CAACM,OAAO,CAAC,CAACC,MAAM,CAACR,IAAI,CAAC;IACzC,CAAC,MAAM;MACHO,OAAO,GAAGN,OAAO,CAACM,OAAO;IAC7B;EACJ;EAEA,IAAIJ,QAAQ,KAAK,OAAO,EAAE;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAH,IAAI,GAAGA,IAAI,CAACS,GAAG,CAAC,UAAUC,KAAK,EAAE;MAC7B,OAAOA,KAAK,CAACC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC;IACxC,CAAC,CAAC;IACFX,IAAI,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAACQ,MAAM,CAACR,IAAI,CAAC;EAC/C;EAEA,OAAON,YAAY,CAACkB,QAAQ,CAACL,OAAO,EAAEP,IAAI,EAAEC,OAAO,EAAEC,QAAQ,CAAC;AAClE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
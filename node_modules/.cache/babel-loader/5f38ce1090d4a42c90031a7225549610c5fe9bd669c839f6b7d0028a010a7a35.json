{"ast":null,"code":"const parseJSON = require('json-parse-even-better-errors');\nconst {\n  diff\n} = require('just-diff');\nconst {\n  diffApply\n} = require('just-diff-apply');\nconst stripBOM = content => {\n  content = content.toString();\n  // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n  // because the buffer-to-string conversion in `fs.readFileSync()`\n  // translates it to FEFF, the UTF-16 BOM.\n  if (content.charCodeAt(0) === 0xFEFF) content = content.slice(1);\n  return content;\n};\nconst PARENT_RE = /\\|{7,}/g;\nconst OURS_RE = /<{7,}/g;\nconst THEIRS_RE = /={7,}/g;\nconst END_RE = />{7,}/g;\nconst isDiff = str => str.match(OURS_RE) && str.match(THEIRS_RE) && str.match(END_RE);\nconst parseConflictJSON = (str, reviver, prefer) => {\n  prefer = prefer || 'ours';\n  if (prefer !== 'theirs' && prefer !== 'ours') throw new TypeError('prefer param must be \"ours\" or \"theirs\" if set');\n  str = stripBOM(str);\n  if (!isDiff(str)) return parseJSON(str);\n  const pieces = str.split(/[\\n\\r]+/g).reduce((acc, line) => {\n    if (line.match(PARENT_RE)) acc.state = 'parent';else if (line.match(OURS_RE)) acc.state = 'ours';else if (line.match(THEIRS_RE)) acc.state = 'theirs';else if (line.match(END_RE)) acc.state = 'top';else {\n      if (acc.state === 'top' || acc.state === 'ours') acc.ours += line;\n      if (acc.state === 'top' || acc.state === 'theirs') acc.theirs += line;\n      if (acc.state === 'top' || acc.state === 'parent') acc.parent += line;\n    }\n    return acc;\n  }, {\n    state: 'top',\n    ours: '',\n    theirs: '',\n    parent: ''\n  });\n\n  // this will throw if either piece is not valid JSON, that's intended\n  const parent = parseJSON(pieces.parent, reviver);\n  const ours = parseJSON(pieces.ours, reviver);\n  const theirs = parseJSON(pieces.theirs, reviver);\n  return prefer === 'ours' ? resolve(parent, ours, theirs) : resolve(parent, theirs, ours);\n};\nconst isObj = obj => obj && typeof obj === 'object';\nconst copyPath = (to, from, path, i) => {\n  const p = path[i];\n  if (isObj(to[p]) && isObj(from[p]) && Array.isArray(to[p]) === Array.isArray(from[p])) return copyPath(to[p], from[p], path, i + 1);\n  to[p] = from[p];\n};\n\n// get the diff from parent->ours and applying our changes on top of theirs.\n// If they turned an object into a non-object, then put it back.\nconst resolve = (parent, ours, theirs) => {\n  const dours = diff(parent, ours);\n  for (let i = 0; i < dours.length; i++) {\n    try {\n      diffApply(theirs, [dours[i]]);\n    } catch (e) {\n      copyPath(theirs, ours, dours[i].path, 0);\n    }\n  }\n  return theirs;\n};\nmodule.exports = Object.assign(parseConflictJSON, {\n  isDiff\n});","map":{"version":3,"names":["parseJSON","require","diff","diffApply","stripBOM","content","toString","charCodeAt","slice","PARENT_RE","OURS_RE","THEIRS_RE","END_RE","isDiff","str","match","parseConflictJSON","reviver","prefer","TypeError","pieces","split","reduce","acc","line","state","ours","theirs","parent","resolve","isObj","obj","copyPath","to","from","path","i","p","Array","isArray","dours","length","e","module","exports","Object","assign"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/parse-conflict-json/index.js"],"sourcesContent":["const parseJSON = require('json-parse-even-better-errors')\nconst { diff } = require('just-diff')\nconst { diffApply } = require('just-diff-apply')\n\nconst stripBOM = content => {\n  content = content.toString()\n  // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n  // because the buffer-to-string conversion in `fs.readFileSync()`\n  // translates it to FEFF, the UTF-16 BOM.\n  if (content.charCodeAt(0) === 0xFEFF)\n    content = content.slice(1)\n  return content\n}\n\nconst PARENT_RE = /\\|{7,}/g\nconst OURS_RE = /<{7,}/g\nconst THEIRS_RE = /={7,}/g\nconst END_RE = />{7,}/g\n\nconst isDiff = str =>\n  str.match(OURS_RE) && str.match(THEIRS_RE) && str.match(END_RE)\n\nconst parseConflictJSON = (str, reviver, prefer) => {\n  prefer = prefer || 'ours'\n  if (prefer !== 'theirs' && prefer !== 'ours')\n    throw new TypeError('prefer param must be \"ours\" or \"theirs\" if set')\n\n  str = stripBOM(str)\n\n  if (!isDiff(str))\n    return parseJSON(str)\n\n  const pieces = str.split(/[\\n\\r]+/g).reduce((acc, line) => {\n    if (line.match(PARENT_RE))\n      acc.state = 'parent'\n    else if (line.match(OURS_RE))\n      acc.state = 'ours'\n    else if (line.match(THEIRS_RE))\n      acc.state = 'theirs'\n    else if (line.match(END_RE))\n      acc.state = 'top'\n    else {\n      if (acc.state === 'top' || acc.state === 'ours')\n        acc.ours += line\n      if (acc.state === 'top' || acc.state === 'theirs')\n        acc.theirs += line\n      if (acc.state === 'top' || acc.state === 'parent')\n        acc.parent += line\n    }\n    return acc\n  }, {\n    state: 'top',\n    ours: '',\n    theirs: '',\n    parent: ''\n  })\n\n  // this will throw if either piece is not valid JSON, that's intended\n  const parent = parseJSON(pieces.parent, reviver)\n  const ours = parseJSON(pieces.ours, reviver)\n  const theirs = parseJSON(pieces.theirs, reviver)\n\n  return prefer === 'ours'\n    ? resolve(parent, ours, theirs)\n    : resolve(parent, theirs, ours)\n}\n\nconst isObj = obj => obj && typeof obj === 'object'\n\nconst copyPath = (to, from, path, i) => {\n  const p = path[i]\n  if (isObj(to[p]) && isObj(from[p]) &&\n      Array.isArray(to[p]) === Array.isArray(from[p]))\n    return copyPath(to[p], from[p], path, i + 1)\n  to[p] = from[p]\n}\n\n// get the diff from parent->ours and applying our changes on top of theirs.\n// If they turned an object into a non-object, then put it back.\nconst resolve = (parent, ours, theirs) => {\n  const dours = diff(parent, ours)\n  for (let i = 0; i < dours.length; i++) {\n    try {\n      diffApply(theirs, [dours[i]])\n    } catch (e) {\n      copyPath(theirs, ours, dours[i].path, 0)\n    }\n  }\n  return theirs\n}\n\nmodule.exports = Object.assign(parseConflictJSON, { isDiff })\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
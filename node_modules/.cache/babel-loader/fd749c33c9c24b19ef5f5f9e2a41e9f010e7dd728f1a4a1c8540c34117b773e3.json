{"ast":null,"code":"'use strict';\n\nconst npa = require('npm-package-arg');\n\n// Find the longest registry key that is used for some kind of auth\n// in the options.\nconst regKeyFromURI = (uri, opts) => {\n  const parsed = new URL(uri);\n  // try to find a config key indicating we have auth for this registry\n  // can be one of :_authToken, :_auth, or :_password and :username\n  // We walk up the \"path\" until we're left with just //<host>[:<port>],\n  // stopping when we reach '//'.\n  let regKey = `//${parsed.host}${parsed.pathname}`;\n  while (regKey.length > '//'.length) {\n    // got some auth for this URI\n    if (hasAuth(regKey, opts)) return regKey;\n\n    // can be either //host/some/path/:_auth or //host/some/path:_auth\n    // walk up by removing EITHER what's after the slash OR the slash itself\n    regKey = regKey.replace(/([^/]+|\\/)$/, '');\n  }\n};\nconst hasAuth = (regKey, opts) => opts[`${regKey}:_authToken`] || opts[`${regKey}:_auth`] || opts[`${regKey}:username`] && opts[`${regKey}:_password`];\nconst sameHost = (a, b) => {\n  const parsedA = new URL(a);\n  const parsedB = new URL(b);\n  return parsedA.host === parsedB.host;\n};\nconst getRegistry = opts => {\n  const {\n    spec\n  } = opts;\n  const {\n    scope: specScope,\n    subSpec\n  } = spec ? npa(spec) : {};\n  const subSpecScope = subSpec && subSpec.scope;\n  const scope = subSpec ? subSpecScope : specScope;\n  const scopeReg = scope && opts[`${scope}:registry`];\n  return scopeReg || opts.registry;\n};\nconst getAuth = (uri, opts = {}) => {\n  const {\n    forceAuth\n  } = opts;\n  if (!uri) throw new Error('URI is required');\n  const regKey = regKeyFromURI(uri, forceAuth || opts);\n\n  // we are only allowed to use what's in forceAuth if specified\n  if (forceAuth && !regKey) {\n    return new Auth({\n      scopeAuthKey: null,\n      token: forceAuth._authToken || forceAuth.token,\n      username: forceAuth.username,\n      password: forceAuth._password || forceAuth.password,\n      auth: forceAuth._auth || forceAuth.auth\n    });\n  }\n\n  // no auth for this URI, but might have it for the registry\n  if (!regKey) {\n    const registry = getRegistry(opts);\n    if (registry && uri !== registry && sameHost(uri, registry)) return getAuth(registry, opts);else if (registry !== opts.registry) {\n      // If making a tarball request to a different base URI than the\n      // registry where we logged in, but the same auth SHOULD be sent\n      // to that artifact host, then we track where it was coming in from,\n      // and warn the user if we get a 4xx error on it.\n      const scopeAuthKey = regKeyFromURI(registry, opts);\n      return new Auth({\n        scopeAuthKey\n      });\n    }\n  }\n  const {\n    [`${regKey}:_authToken`]: token,\n    [`${regKey}:username`]: username,\n    [`${regKey}:_password`]: password,\n    [`${regKey}:_auth`]: auth\n  } = opts;\n  return new Auth({\n    scopeAuthKey: null,\n    token,\n    auth,\n    username,\n    password\n  });\n};\nclass Auth {\n  constructor({\n    token,\n    auth,\n    username,\n    password,\n    scopeAuthKey\n  }) {\n    this.scopeAuthKey = scopeAuthKey;\n    this.token = null;\n    this.auth = null;\n    this.isBasicAuth = false;\n    if (token) this.token = token;else if (auth) this.auth = auth;else if (username && password) {\n      const p = Buffer.from(password, 'base64').toString('utf8');\n      this.auth = Buffer.from(`${username}:${p}`, 'utf8').toString('base64');\n      this.isBasicAuth = true;\n    }\n  }\n}\nmodule.exports = getAuth;","map":{"version":3,"names":["npa","require","regKeyFromURI","uri","opts","parsed","URL","regKey","host","pathname","length","hasAuth","replace","sameHost","a","b","parsedA","parsedB","getRegistry","spec","scope","specScope","subSpec","subSpecScope","scopeReg","registry","getAuth","forceAuth","Error","Auth","scopeAuthKey","token","_authToken","username","password","_password","auth","_auth","constructor","isBasicAuth","p","Buffer","from","toString","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/npm-registry-fetch/auth.js"],"sourcesContent":["'use strict'\nconst npa = require('npm-package-arg')\n\n// Find the longest registry key that is used for some kind of auth\n// in the options.\nconst regKeyFromURI = (uri, opts) => {\n  const parsed = new URL(uri)\n  // try to find a config key indicating we have auth for this registry\n  // can be one of :_authToken, :_auth, or :_password and :username\n  // We walk up the \"path\" until we're left with just //<host>[:<port>],\n  // stopping when we reach '//'.\n  let regKey = `//${parsed.host}${parsed.pathname}`\n  while (regKey.length > '//'.length) {\n    // got some auth for this URI\n    if (hasAuth(regKey, opts))\n      return regKey\n\n    // can be either //host/some/path/:_auth or //host/some/path:_auth\n    // walk up by removing EITHER what's after the slash OR the slash itself\n    regKey = regKey.replace(/([^/]+|\\/)$/, '')\n  }\n}\n\nconst hasAuth = (regKey, opts) => (\n  opts[`${regKey}:_authToken`] ||\n  opts[`${regKey}:_auth`] ||\n  opts[`${regKey}:username`] && opts[`${regKey}:_password`]\n)\n\nconst sameHost = (a, b) => {\n  const parsedA = new URL(a)\n  const parsedB = new URL(b)\n  return parsedA.host === parsedB.host\n}\n\nconst getRegistry = opts => {\n  const { spec } = opts\n  const { scope: specScope, subSpec } = spec ? npa(spec) : {}\n  const subSpecScope = subSpec && subSpec.scope\n  const scope = subSpec ? subSpecScope : specScope\n  const scopeReg = scope && opts[`${scope}:registry`]\n  return scopeReg || opts.registry\n}\n\nconst getAuth = (uri, opts = {}) => {\n  const { forceAuth } = opts\n  if (!uri)\n    throw new Error('URI is required')\n  const regKey = regKeyFromURI(uri, forceAuth || opts)\n\n  // we are only allowed to use what's in forceAuth if specified\n  if (forceAuth && !regKey) {\n    return new Auth({\n      scopeAuthKey: null,\n      token: forceAuth._authToken || forceAuth.token,\n      username: forceAuth.username,\n      password: forceAuth._password || forceAuth.password,\n      auth: forceAuth._auth || forceAuth.auth,\n    })\n  }\n\n  // no auth for this URI, but might have it for the registry\n  if (!regKey) {\n    const registry = getRegistry(opts)\n    if (registry && uri !== registry && sameHost(uri, registry))\n      return getAuth(registry, opts)\n    else if (registry !== opts.registry) {\n      // If making a tarball request to a different base URI than the\n      // registry where we logged in, but the same auth SHOULD be sent\n      // to that artifact host, then we track where it was coming in from,\n      // and warn the user if we get a 4xx error on it.\n      const scopeAuthKey = regKeyFromURI(registry, opts)\n      return new Auth({ scopeAuthKey })\n    }\n  }\n\n  const {\n    [`${regKey}:_authToken`]: token,\n    [`${regKey}:username`]: username,\n    [`${regKey}:_password`]: password,\n    [`${regKey}:_auth`]: auth,\n  } = opts\n\n  return new Auth({\n    scopeAuthKey: null,\n    token,\n    auth,\n    username,\n    password,\n  })\n}\n\nclass Auth {\n  constructor ({ token, auth, username, password, scopeAuthKey }) {\n    this.scopeAuthKey = scopeAuthKey\n    this.token = null\n    this.auth = null\n    this.isBasicAuth = false\n    if (token)\n      this.token = token\n    else if (auth)\n      this.auth = auth\n    else if (username && password) {\n      const p = Buffer.from(password, 'base64').toString('utf8')\n      this.auth = Buffer.from(`${username}:${p}`, 'utf8').toString('base64')\n      this.isBasicAuth = true\n    }\n  }\n}\n\nmodule.exports = getAuth\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAEtC;AACA;AACA,MAAMC,aAAa,GAAGA,CAACC,GAAG,EAAEC,IAAI,KAAK;EACnC,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAACH,GAAG,CAAC;EAC3B;EACA;EACA;EACA;EACA,IAAII,MAAM,GAAG,KAAKF,MAAM,CAACG,IAAI,GAAGH,MAAM,CAACI,QAAQ,EAAE;EACjD,OAAOF,MAAM,CAACG,MAAM,GAAG,IAAI,CAACA,MAAM,EAAE;IAClC;IACA,IAAIC,OAAO,CAACJ,MAAM,EAAEH,IAAI,CAAC,EACvB,OAAOG,MAAM;;IAEf;IACA;IACAA,MAAM,GAAGA,MAAM,CAACK,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;EAC5C;AACF,CAAC;AAED,MAAMD,OAAO,GAAGA,CAACJ,MAAM,EAAEH,IAAI,KAC3BA,IAAI,CAAC,GAAGG,MAAM,aAAa,CAAC,IAC5BH,IAAI,CAAC,GAAGG,MAAM,QAAQ,CAAC,IACvBH,IAAI,CAAC,GAAGG,MAAM,WAAW,CAAC,IAAIH,IAAI,CAAC,GAAGG,MAAM,YAAY,CACzD;AAED,MAAMM,QAAQ,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;EACzB,MAAMC,OAAO,GAAG,IAAIV,GAAG,CAACQ,CAAC,CAAC;EAC1B,MAAMG,OAAO,GAAG,IAAIX,GAAG,CAACS,CAAC,CAAC;EAC1B,OAAOC,OAAO,CAACR,IAAI,KAAKS,OAAO,CAACT,IAAI;AACtC,CAAC;AAED,MAAMU,WAAW,GAAGd,IAAI,IAAI;EAC1B,MAAM;IAAEe;EAAK,CAAC,GAAGf,IAAI;EACrB,MAAM;IAAEgB,KAAK,EAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGH,IAAI,GAAGnB,GAAG,CAACmB,IAAI,CAAC,GAAG,CAAC,CAAC;EAC3D,MAAMI,YAAY,GAAGD,OAAO,IAAIA,OAAO,CAACF,KAAK;EAC7C,MAAMA,KAAK,GAAGE,OAAO,GAAGC,YAAY,GAAGF,SAAS;EAChD,MAAMG,QAAQ,GAAGJ,KAAK,IAAIhB,IAAI,CAAC,GAAGgB,KAAK,WAAW,CAAC;EACnD,OAAOI,QAAQ,IAAIpB,IAAI,CAACqB,QAAQ;AAClC,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACvB,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,KAAK;EAClC,MAAM;IAAEuB;EAAU,CAAC,GAAGvB,IAAI;EAC1B,IAAI,CAACD,GAAG,EACN,MAAM,IAAIyB,KAAK,CAAC,iBAAiB,CAAC;EACpC,MAAMrB,MAAM,GAAGL,aAAa,CAACC,GAAG,EAAEwB,SAAS,IAAIvB,IAAI,CAAC;;EAEpD;EACA,IAAIuB,SAAS,IAAI,CAACpB,MAAM,EAAE;IACxB,OAAO,IAAIsB,IAAI,CAAC;MACdC,YAAY,EAAE,IAAI;MAClBC,KAAK,EAAEJ,SAAS,CAACK,UAAU,IAAIL,SAAS,CAACI,KAAK;MAC9CE,QAAQ,EAAEN,SAAS,CAACM,QAAQ;MAC5BC,QAAQ,EAAEP,SAAS,CAACQ,SAAS,IAAIR,SAAS,CAACO,QAAQ;MACnDE,IAAI,EAAET,SAAS,CAACU,KAAK,IAAIV,SAAS,CAACS;IACrC,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI,CAAC7B,MAAM,EAAE;IACX,MAAMkB,QAAQ,GAAGP,WAAW,CAACd,IAAI,CAAC;IAClC,IAAIqB,QAAQ,IAAItB,GAAG,KAAKsB,QAAQ,IAAIZ,QAAQ,CAACV,GAAG,EAAEsB,QAAQ,CAAC,EACzD,OAAOC,OAAO,CAACD,QAAQ,EAAErB,IAAI,CAAC,MAC3B,IAAIqB,QAAQ,KAAKrB,IAAI,CAACqB,QAAQ,EAAE;MACnC;MACA;MACA;MACA;MACA,MAAMK,YAAY,GAAG5B,aAAa,CAACuB,QAAQ,EAAErB,IAAI,CAAC;MAClD,OAAO,IAAIyB,IAAI,CAAC;QAAEC;MAAa,CAAC,CAAC;IACnC;EACF;EAEA,MAAM;IACJ,CAAC,GAAGvB,MAAM,aAAa,GAAGwB,KAAK;IAC/B,CAAC,GAAGxB,MAAM,WAAW,GAAG0B,QAAQ;IAChC,CAAC,GAAG1B,MAAM,YAAY,GAAG2B,QAAQ;IACjC,CAAC,GAAG3B,MAAM,QAAQ,GAAG6B;EACvB,CAAC,GAAGhC,IAAI;EAER,OAAO,IAAIyB,IAAI,CAAC;IACdC,YAAY,EAAE,IAAI;IAClBC,KAAK;IACLK,IAAI;IACJH,QAAQ;IACRC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAML,IAAI,CAAC;EACTS,WAAWA,CAAE;IAAEP,KAAK;IAAEK,IAAI;IAAEH,QAAQ;IAAEC,QAAQ;IAAEJ;EAAa,CAAC,EAAE;IAC9D,IAAI,CAACA,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACK,IAAI,GAAG,IAAI;IAChB,IAAI,CAACG,WAAW,GAAG,KAAK;IACxB,IAAIR,KAAK,EACP,IAAI,CAACA,KAAK,GAAGA,KAAK,MACf,IAAIK,IAAI,EACX,IAAI,CAACA,IAAI,GAAGA,IAAI,MACb,IAAIH,QAAQ,IAAIC,QAAQ,EAAE;MAC7B,MAAMM,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACR,QAAQ,EAAE,QAAQ,CAAC,CAACS,QAAQ,CAAC,MAAM,CAAC;MAC1D,IAAI,CAACP,IAAI,GAAGK,MAAM,CAACC,IAAI,CAAC,GAAGT,QAAQ,IAAIO,CAAC,EAAE,EAAE,MAAM,CAAC,CAACG,QAAQ,CAAC,QAAQ,CAAC;MACtE,IAAI,CAACJ,WAAW,GAAG,IAAI;IACzB;EACF;AACF;AAEAK,MAAM,CAACC,OAAO,GAAGnB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const {\n  resolve\n} = require('path');\nconst log = require('npmlog');\nconst rpj = require('read-package-json-fast');\nconst PackageJson = require('@npmcli/package-json');\nconst BaseCommand = require('./base-command.js');\nclass SetScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Set tasks in the scripts section of package.json';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['workspace', 'workspaces'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'set-script';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[<script>] [<command>]'];\n  }\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json');\n      const {\n        scripts = {}\n      } = await rpj(json).catch(er => ({}));\n      return Object.keys(scripts);\n    }\n  }\n  validate(args) {\n    if (process.env.npm_lifecycle_event === 'postinstall') throw new Error('Scripts can’t set from the postinstall script');\n\n    // Parse arguments\n    if (args.length !== 2) throw new Error(`Expected 2 arguments: got ${args.length}`);\n  }\n  exec(args, cb) {\n    this.setScript(args).then(() => cb()).catch(cb);\n  }\n  async setScript(args) {\n    this.validate(args);\n    const warn = await this.doSetScript(this.npm.localPrefix, args[0], args[1]);\n    if (warn) log.warn('set-script', `Script \"${args[0]}\" was overwritten`);\n  }\n  execWorkspaces(args, filters, cb) {\n    this.setScriptWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n  async setScriptWorkspaces(args, filters) {\n    this.validate(args);\n    await this.setWorkspaces(filters);\n    for (const [name, path] of this.workspaces) {\n      try {\n        const warn = await this.doSetScript(path, args[0], args[1]);\n        if (warn) {\n          log.warn('set-script', `Script \"${args[0]}\" was overwritten`);\n          log.warn(`  in workspace: ${name}`);\n          log.warn(`  at location: ${path}`);\n        }\n      } catch (err) {\n        log.error('set-script', err.message);\n        log.error(`  in workspace: ${name}`);\n        log.error(`  at location: ${path}`);\n        process.exitCode = 1;\n      }\n    }\n  }\n\n  // returns a Boolean that will be true if\n  // the requested script was overwritten\n  // and false if it was set as a new script\n  async doSetScript(path, name, value) {\n    let warn = false;\n    const pkgJson = await PackageJson.load(path);\n    const {\n      scripts\n    } = pkgJson.content;\n    const overwriting = scripts && scripts[name] && scripts[name] !== value;\n    if (overwriting) warn = true;\n    pkgJson.update({\n      scripts: {\n        ...scripts,\n        [name]: value\n      }\n    });\n    await pkgJson.save();\n    return warn;\n  }\n}\nmodule.exports = SetScript;","map":{"version":3,"names":["resolve","require","log","rpj","PackageJson","BaseCommand","SetScript","description","params","name","usage","completion","opts","argv","conf","remain","length","json","npm","localPrefix","scripts","catch","er","Object","keys","validate","args","process","env","npm_lifecycle_event","Error","exec","cb","setScript","then","warn","doSetScript","execWorkspaces","filters","setScriptWorkspaces","setWorkspaces","path","workspaces","err","error","message","exitCode","value","pkgJson","load","content","overwriting","update","save","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/set-script.js"],"sourcesContent":["const { resolve } = require('path')\nconst log = require('npmlog')\nconst rpj = require('read-package-json-fast')\nconst PackageJson = require('@npmcli/package-json')\n\nconst BaseCommand = require('./base-command.js')\nclass SetScript extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Set tasks in the scripts section of package.json'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'set-script'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<script>] [<command>]']\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2) {\n      // find the script name\n      const json = resolve(this.npm.localPrefix, 'package.json')\n      const { scripts = {} } = await rpj(json).catch(er => ({}))\n      return Object.keys(scripts)\n    }\n  }\n\n  validate (args) {\n    if (process.env.npm_lifecycle_event === 'postinstall')\n      throw new Error('Scripts can’t set from the postinstall script')\n\n    // Parse arguments\n    if (args.length !== 2)\n      throw new Error(`Expected 2 arguments: got ${args.length}`)\n  }\n\n  exec (args, cb) {\n    this.setScript(args).then(() => cb()).catch(cb)\n  }\n\n  async setScript (args) {\n    this.validate(args)\n    const warn = await this.doSetScript(this.npm.localPrefix, args[0], args[1])\n    if (warn)\n      log.warn('set-script', `Script \"${args[0]}\" was overwritten`)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.setScriptWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async setScriptWorkspaces (args, filters) {\n    this.validate(args)\n    await this.setWorkspaces(filters)\n\n    for (const [name, path] of this.workspaces) {\n      try {\n        const warn = await this.doSetScript(path, args[0], args[1])\n        if (warn) {\n          log.warn('set-script', `Script \"${args[0]}\" was overwritten`)\n          log.warn(`  in workspace: ${name}`)\n          log.warn(`  at location: ${path}`)\n        }\n      } catch (err) {\n        log.error('set-script', err.message)\n        log.error(`  in workspace: ${name}`)\n        log.error(`  at location: ${path}`)\n        process.exitCode = 1\n      }\n    }\n  }\n\n  // returns a Boolean that will be true if\n  // the requested script was overwritten\n  // and false if it was set as a new script\n  async doSetScript (path, name, value) {\n    let warn = false\n\n    const pkgJson = await PackageJson.load(path)\n    const { scripts } = pkgJson.content\n\n    const overwriting =\n      scripts\n        && scripts[name]\n        && scripts[name] !== value\n\n    if (overwriting)\n      warn = true\n\n    pkgJson.update({\n      scripts: {\n        ...scripts,\n        [name]: value,\n      },\n    })\n\n    await pkgJson.save()\n\n    return warn\n  }\n}\nmodule.exports = SetScript\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
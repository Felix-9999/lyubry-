{"ast":null,"code":"// helper function to output a clearer visualization\n// of the current node and its descendents\n\nconst localeCompare = require('@isaacs/string-locale-compare')('en');\nconst util = require('util');\nconst relpath = require('./relpath.js');\nclass ArboristNode {\n  constructor(tree, path) {\n    this.name = tree.name;\n    if (tree.packageName && tree.packageName !== this.name) {\n      this.packageName = tree.packageName;\n    }\n    if (tree.version) {\n      this.version = tree.version;\n    }\n    this.location = tree.location;\n    this.path = tree.path;\n    if (tree.realpath !== this.path) {\n      this.realpath = tree.realpath;\n    }\n    if (tree.resolved !== null) {\n      this.resolved = tree.resolved;\n    }\n    if (tree.extraneous) {\n      this.extraneous = true;\n    }\n    if (tree.dev) {\n      this.dev = true;\n    }\n    if (tree.optional) {\n      this.optional = true;\n    }\n    if (tree.devOptional && !tree.dev && !tree.optional) {\n      this.devOptional = true;\n    }\n    if (tree.peer) {\n      this.peer = true;\n    }\n    if (tree.inBundle) {\n      this.bundled = true;\n    }\n    if (tree.inDepBundle) {\n      this.bundler = tree.getBundler().location;\n    }\n    if (tree.isProjectRoot) {\n      this.isProjectRoot = true;\n    }\n    if (tree.isWorkspace) {\n      this.isWorkspace = true;\n    }\n    const bd = tree.package && tree.package.bundleDependencies;\n    if (bd && bd.length) {\n      this.bundleDependencies = bd;\n    }\n    if (tree.inShrinkwrap) {\n      this.inShrinkwrap = true;\n    } else if (tree.hasShrinkwrap) {\n      this.hasShrinkwrap = true;\n    }\n    if (tree.error) {\n      this.error = treeError(tree.error);\n    }\n    if (tree.errors && tree.errors.length) {\n      this.errors = tree.errors.map(treeError);\n    }\n\n    // edgesOut sorted by name\n    if (tree.edgesOut.size) {\n      this.edgesOut = new Map([...tree.edgesOut.entries()].sort(([a], [b]) => localeCompare(a, b)).map(([name, edge]) => [name, new EdgeOut(edge)]));\n    }\n\n    // edgesIn sorted by location\n    if (tree.edgesIn.size) {\n      this.edgesIn = new Set([...tree.edgesIn].sort((a, b) => localeCompare(a.from.location, b.from.location)).map(edge => new EdgeIn(edge)));\n    }\n    if (tree.workspaces && tree.workspaces.size) {\n      this.workspaces = new Map([...tree.workspaces.entries()].map(([name, path]) => [name, relpath(tree.root.realpath, path)]));\n    }\n\n    // fsChildren sorted by path\n    if (tree.fsChildren.size) {\n      this.fsChildren = new Set([...tree.fsChildren].sort(({\n        path: a\n      }, {\n        path: b\n      }) => localeCompare(a, b)).map(tree => printableTree(tree, path)));\n    }\n\n    // children sorted by name\n    if (tree.children.size) {\n      this.children = new Map([...tree.children.entries()].sort(([a], [b]) => localeCompare(a, b)).map(([name, tree]) => [name, printableTree(tree, path)]));\n    }\n  }\n}\nclass ArboristVirtualNode extends ArboristNode {\n  constructor(tree, path) {\n    super(tree, path);\n    this.sourceReference = printableTree(tree.sourceReference, path);\n  }\n}\nclass ArboristLink extends ArboristNode {\n  constructor(tree, path) {\n    super(tree, path);\n    this.target = printableTree(tree.target, path);\n  }\n}\nconst treeError = ({\n  code,\n  path\n}) => ({\n  code,\n  ...(path ? {\n    path\n  } : {})\n});\n\n// print out edges without dumping the full node all over again\n// this base class will toJSON as a plain old object, but the\n// util.inspect() output will be a bit cleaner\nclass Edge {\n  constructor(edge) {\n    this.type = edge.type;\n    this.name = edge.name;\n    this.spec = edge.spec || '*';\n    if (edge.error) {\n      this.error = edge.error;\n    }\n    if (edge.overridden) {\n      this.overridden = edge.overridden;\n    }\n  }\n}\n\n// don't care about 'from' for edges out\nclass EdgeOut extends Edge {\n  constructor(edge) {\n    super(edge);\n    this.to = edge.to && edge.to.location;\n  }\n  [util.inspect.custom]() {\n    return `{ ${this.type} ${this.name}@${this.spec}${this.to ? ' -> ' + this.to : ''}${this.error ? ' ' + this.error : ''}${this.overridden ? ' overridden' : ''} }`;\n  }\n}\n\n// don't care about 'to' for edges in\nclass EdgeIn extends Edge {\n  constructor(edge) {\n    super(edge);\n    this.from = edge.from && edge.from.location;\n  }\n  [util.inspect.custom]() {\n    return `{ ${this.from || '\"\"'} ${this.type} ${this.name}@${this.spec}${this.error ? ' ' + this.error : ''}${this.overridden ? ' overridden' : ''} }`;\n  }\n}\nconst printableTree = (tree, path = []) => {\n  if (!tree) {\n    return tree;\n  }\n  const Cls = tree.isLink ? ArboristLink : tree.sourceReference ? ArboristVirtualNode : ArboristNode;\n  if (path.includes(tree)) {\n    const obj = Object.create(Cls.prototype);\n    return Object.assign(obj, {\n      location: tree.location\n    });\n  }\n  path.push(tree);\n  return new Cls(tree, path);\n};\nmodule.exports = printableTree;","map":{"version":3,"names":["localeCompare","require","util","relpath","ArboristNode","constructor","tree","path","name","packageName","version","location","realpath","resolved","extraneous","dev","optional","devOptional","peer","inBundle","bundled","inDepBundle","bundler","getBundler","isProjectRoot","isWorkspace","bd","package","bundleDependencies","length","inShrinkwrap","hasShrinkwrap","error","treeError","errors","map","edgesOut","size","Map","entries","sort","a","b","edge","EdgeOut","edgesIn","Set","from","EdgeIn","workspaces","root","fsChildren","printableTree","children","ArboristVirtualNode","sourceReference","ArboristLink","target","code","Edge","type","spec","overridden","to","inspect","custom","Cls","isLink","includes","obj","Object","create","prototype","assign","push","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/printable.js"],"sourcesContent":["// helper function to output a clearer visualization\n// of the current node and its descendents\n\nconst localeCompare = require('@isaacs/string-locale-compare')('en')\nconst util = require('util')\nconst relpath = require('./relpath.js')\n\nclass ArboristNode {\n  constructor (tree, path) {\n    this.name = tree.name\n    if (tree.packageName && tree.packageName !== this.name) {\n      this.packageName = tree.packageName\n    }\n    if (tree.version) {\n      this.version = tree.version\n    }\n    this.location = tree.location\n    this.path = tree.path\n    if (tree.realpath !== this.path) {\n      this.realpath = tree.realpath\n    }\n    if (tree.resolved !== null) {\n      this.resolved = tree.resolved\n    }\n    if (tree.extraneous) {\n      this.extraneous = true\n    }\n    if (tree.dev) {\n      this.dev = true\n    }\n    if (tree.optional) {\n      this.optional = true\n    }\n    if (tree.devOptional && !tree.dev && !tree.optional) {\n      this.devOptional = true\n    }\n    if (tree.peer) {\n      this.peer = true\n    }\n    if (tree.inBundle) {\n      this.bundled = true\n    }\n    if (tree.inDepBundle) {\n      this.bundler = tree.getBundler().location\n    }\n    if (tree.isProjectRoot) {\n      this.isProjectRoot = true\n    }\n    if (tree.isWorkspace) {\n      this.isWorkspace = true\n    }\n    const bd = tree.package && tree.package.bundleDependencies\n    if (bd && bd.length) {\n      this.bundleDependencies = bd\n    }\n    if (tree.inShrinkwrap) {\n      this.inShrinkwrap = true\n    } else if (tree.hasShrinkwrap) {\n      this.hasShrinkwrap = true\n    }\n    if (tree.error) {\n      this.error = treeError(tree.error)\n    }\n    if (tree.errors && tree.errors.length) {\n      this.errors = tree.errors.map(treeError)\n    }\n\n    // edgesOut sorted by name\n    if (tree.edgesOut.size) {\n      this.edgesOut = new Map([...tree.edgesOut.entries()]\n        .sort(([a], [b]) => localeCompare(a, b))\n        .map(([name, edge]) => [name, new EdgeOut(edge)]))\n    }\n\n    // edgesIn sorted by location\n    if (tree.edgesIn.size) {\n      this.edgesIn = new Set([...tree.edgesIn]\n        .sort((a, b) => localeCompare(a.from.location, b.from.location))\n        .map(edge => new EdgeIn(edge)))\n    }\n\n    if (tree.workspaces && tree.workspaces.size) {\n      this.workspaces = new Map([...tree.workspaces.entries()]\n        .map(([name, path]) => [name, relpath(tree.root.realpath, path)]))\n    }\n\n    // fsChildren sorted by path\n    if (tree.fsChildren.size) {\n      this.fsChildren = new Set([...tree.fsChildren]\n        .sort(({path: a}, {path: b}) => localeCompare(a, b))\n        .map(tree => printableTree(tree, path)))\n    }\n\n    // children sorted by name\n    if (tree.children.size) {\n      this.children = new Map([...tree.children.entries()]\n        .sort(([a], [b]) => localeCompare(a, b))\n        .map(([name, tree]) => [name, printableTree(tree, path)]))\n    }\n  }\n}\n\nclass ArboristVirtualNode extends ArboristNode {\n  constructor (tree, path) {\n    super(tree, path)\n    this.sourceReference = printableTree(tree.sourceReference, path)\n  }\n}\n\nclass ArboristLink extends ArboristNode {\n  constructor (tree, path) {\n    super(tree, path)\n    this.target = printableTree(tree.target, path)\n  }\n}\n\nconst treeError = ({code, path}) => ({\n  code,\n  ...(path ? { path } : {}),\n})\n\n// print out edges without dumping the full node all over again\n// this base class will toJSON as a plain old object, but the\n// util.inspect() output will be a bit cleaner\nclass Edge {\n  constructor (edge) {\n    this.type = edge.type\n    this.name = edge.name\n    this.spec = edge.spec || '*'\n    if (edge.error) {\n      this.error = edge.error\n    }\n    if (edge.overridden) {\n      this.overridden = edge.overridden\n    }\n  }\n}\n\n// don't care about 'from' for edges out\nclass EdgeOut extends Edge {\n  constructor (edge) {\n    super(edge)\n    this.to = edge.to && edge.to.location\n  }\n\n  [util.inspect.custom] () {\n    return `{ ${this.type} ${this.name}@${this.spec}${\n      this.to ? ' -> ' + this.to : ''\n    }${\n      this.error ? ' ' + this.error : ''\n    }${\n      this.overridden ? ' overridden' : ''\n    } }`\n  }\n}\n\n// don't care about 'to' for edges in\nclass EdgeIn extends Edge {\n  constructor (edge) {\n    super(edge)\n    this.from = edge.from && edge.from.location\n  }\n\n  [util.inspect.custom] () {\n    return `{ ${this.from || '\"\"'} ${this.type} ${this.name}@${this.spec}${\n      this.error ? ' ' + this.error : ''\n    }${\n      this.overridden ? ' overridden' : ''\n    } }`\n  }\n}\n\nconst printableTree = (tree, path = []) => {\n  if (!tree) {\n    return tree\n  }\n\n  const Cls = tree.isLink ? ArboristLink\n    : tree.sourceReference ? ArboristVirtualNode\n    : ArboristNode\n  if (path.includes(tree)) {\n    const obj = Object.create(Cls.prototype)\n    return Object.assign(obj, { location: tree.location })\n  }\n  path.push(tree)\n  return new Cls(tree, path)\n}\n\nmodule.exports = printableTree\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
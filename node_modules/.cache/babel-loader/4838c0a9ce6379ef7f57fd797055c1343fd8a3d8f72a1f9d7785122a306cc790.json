{"ast":null,"code":"// get all the paths that are (or might be) installed for a given pkg\n// There's no guarantee that all of these will be installed, but if they\n// are present, then we can assume that they're associated.\nconst binTarget = require('./bin-target.js');\nconst manTarget = require('./man-target.js');\nconst {\n  resolve,\n  basename\n} = require('path');\nconst isWindows = require('./is-windows.js');\nmodule.exports = ({\n  path,\n  pkg,\n  global,\n  top\n}) => {\n  if (top && !global) return [];\n  const binSet = [];\n  const binTarg = binTarget({\n    path,\n    top\n  });\n  if (pkg.bin) {\n    for (const bin of Object.keys(pkg.bin)) {\n      const b = resolve(binTarg, bin);\n      binSet.push(b);\n      if (isWindows) {\n        binSet.push(b + '.cmd');\n        binSet.push(b + '.ps1');\n      }\n    }\n  }\n  const manTarg = manTarget({\n    path,\n    top\n  });\n  const manSet = [];\n  if (manTarg && pkg.man && Array.isArray(pkg.man) && pkg.man.length) {\n    for (const man of pkg.man) {\n      const parseMan = man.match(/(.*\\.([0-9]+)(\\.gz)?)$/);\n      // invalid entries invalidate the entire man set\n      if (!parseMan) return binSet;\n      const stem = parseMan[1];\n      const sxn = parseMan[2];\n      const base = basename(stem);\n      const absFrom = resolve(path, man);\n\n      /* istanbul ignore if - should be impossible */\n      if (absFrom.indexOf(path) !== 0) return binSet;\n      manSet.push(resolve(manTarg, 'man' + sxn, base));\n    }\n  }\n  return manSet.length ? [...binSet, ...manSet] : binSet;\n};","map":{"version":3,"names":["binTarget","require","manTarget","resolve","basename","isWindows","module","exports","path","pkg","global","top","binSet","binTarg","bin","Object","keys","b","push","manTarg","manSet","man","Array","isArray","length","parseMan","match","stem","sxn","base","absFrom","indexOf"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/bin-links/lib/get-paths.js"],"sourcesContent":["// get all the paths that are (or might be) installed for a given pkg\n// There's no guarantee that all of these will be installed, but if they\n// are present, then we can assume that they're associated.\nconst binTarget = require('./bin-target.js')\nconst manTarget = require('./man-target.js')\nconst {resolve, basename} = require('path')\nconst isWindows = require('./is-windows.js')\nmodule.exports = ({path, pkg, global, top}) => {\n  if (top && !global)\n    return []\n\n  const binSet = []\n  const binTarg = binTarget({path, top})\n  if (pkg.bin) {\n    for (const bin of Object.keys(pkg.bin)) {\n      const b = resolve(binTarg, bin)\n      binSet.push(b)\n      if (isWindows) {\n        binSet.push(b + '.cmd')\n        binSet.push(b + '.ps1')\n      }\n    }\n  }\n\n  const manTarg = manTarget({path, top})\n  const manSet = []\n  if (manTarg && pkg.man && Array.isArray(pkg.man) && pkg.man.length) {\n    for (const man of pkg.man) {\n      const parseMan = man.match(/(.*\\.([0-9]+)(\\.gz)?)$/)\n      // invalid entries invalidate the entire man set\n      if (!parseMan)\n        return binSet\n\n      const stem = parseMan[1]\n      const sxn = parseMan[2]\n      const base = basename(stem)\n      const absFrom = resolve(path, man)\n\n      /* istanbul ignore if - should be impossible */\n      if (absFrom.indexOf(path) !== 0)\n        return binSet\n\n      manSet.push(resolve(manTarg, 'man' + sxn, base))\n    }\n  }\n\n  return manSet.length ? [...binSet, ...manSet] : binSet\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAM;EAACE,OAAO;EAAEC;AAAQ,CAAC,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC3C,MAAMI,SAAS,GAAGJ,OAAO,CAAC,iBAAiB,CAAC;AAC5CK,MAAM,CAACC,OAAO,GAAG,CAAC;EAACC,IAAI;EAAEC,GAAG;EAAEC,MAAM;EAAEC;AAAG,CAAC,KAAK;EAC7C,IAAIA,GAAG,IAAI,CAACD,MAAM,EAChB,OAAO,EAAE;EAEX,MAAME,MAAM,GAAG,EAAE;EACjB,MAAMC,OAAO,GAAGb,SAAS,CAAC;IAACQ,IAAI;IAAEG;EAAG,CAAC,CAAC;EACtC,IAAIF,GAAG,CAACK,GAAG,EAAE;IACX,KAAK,MAAMA,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACP,GAAG,CAACK,GAAG,CAAC,EAAE;MACtC,MAAMG,CAAC,GAAGd,OAAO,CAACU,OAAO,EAAEC,GAAG,CAAC;MAC/BF,MAAM,CAACM,IAAI,CAACD,CAAC,CAAC;MACd,IAAIZ,SAAS,EAAE;QACbO,MAAM,CAACM,IAAI,CAACD,CAAC,GAAG,MAAM,CAAC;QACvBL,MAAM,CAACM,IAAI,CAACD,CAAC,GAAG,MAAM,CAAC;MACzB;IACF;EACF;EAEA,MAAME,OAAO,GAAGjB,SAAS,CAAC;IAACM,IAAI;IAAEG;EAAG,CAAC,CAAC;EACtC,MAAMS,MAAM,GAAG,EAAE;EACjB,IAAID,OAAO,IAAIV,GAAG,CAACY,GAAG,IAAIC,KAAK,CAACC,OAAO,CAACd,GAAG,CAACY,GAAG,CAAC,IAAIZ,GAAG,CAACY,GAAG,CAACG,MAAM,EAAE;IAClE,KAAK,MAAMH,GAAG,IAAIZ,GAAG,CAACY,GAAG,EAAE;MACzB,MAAMI,QAAQ,GAAGJ,GAAG,CAACK,KAAK,CAAC,wBAAwB,CAAC;MACpD;MACA,IAAI,CAACD,QAAQ,EACX,OAAOb,MAAM;MAEf,MAAMe,IAAI,GAAGF,QAAQ,CAAC,CAAC,CAAC;MACxB,MAAMG,GAAG,GAAGH,QAAQ,CAAC,CAAC,CAAC;MACvB,MAAMI,IAAI,GAAGzB,QAAQ,CAACuB,IAAI,CAAC;MAC3B,MAAMG,OAAO,GAAG3B,OAAO,CAACK,IAAI,EAAEa,GAAG,CAAC;;MAElC;MACA,IAAIS,OAAO,CAACC,OAAO,CAACvB,IAAI,CAAC,KAAK,CAAC,EAC7B,OAAOI,MAAM;MAEfQ,MAAM,CAACF,IAAI,CAACf,OAAO,CAACgB,OAAO,EAAE,KAAK,GAAGS,GAAG,EAAEC,IAAI,CAAC,CAAC;IAClD;EACF;EAEA,OAAOT,MAAM,CAACI,MAAM,GAAG,CAAC,GAAGZ,MAAM,EAAE,GAAGQ,MAAM,CAAC,GAAGR,MAAM;AACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
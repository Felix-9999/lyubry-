{"ast":null,"code":"// Set environment variables for any non-default configs,\n// so that they're already there when we run lifecycle scripts.\n//\n// See https://github.com/npm/rfcs/pull/90\n\n// Return the env key if this is a thing that belongs in the env.\n// Ie, if the key isn't a @scope, //nerf.dart, or _private,\n// and the value is a string or array.  Otherwise return false.\nconst envKey = (key, val) => {\n  return !/^[/@_]/.test(key) && typeof envVal(val) === 'string' && `npm_config_${key.replace(/-/g, '_').toLowerCase()}`;\n};\nconst envVal = val => Array.isArray(val) ? val.map(v => envVal(v)).join('\\n\\n') : val === null || val === undefined || val === false ? '' : typeof val === 'object' ? null : String(val);\nconst sameConfigValue = (def, val) => !Array.isArray(val) || !Array.isArray(def) ? def === val : sameArrayValue(def, val);\nconst sameArrayValue = (def, val) => {\n  if (def.length !== val.length) return false;\n  for (let i = 0; i < def.length; i++) {\n    /* istanbul ignore next - there are no array configs where the default\n     * is not an empty array, so this loop is a no-op, but it's the correct\n     * thing to do if we ever DO add a config like that. */\n    if (def[i] !== val[i]) return false;\n  }\n  return true;\n};\nconst setEnv = (env, rawKey, rawVal) => {\n  const val = envVal(rawVal);\n  const key = envKey(rawKey, val);\n  if (key && val !== null) env[key] = val;\n};\nconst setEnvs = config => {\n  // This ensures that all npm config values that are not the defaults are\n  // shared appropriately with child processes, without false positives.\n  const {\n    globalPrefix,\n    platform,\n    env,\n    defaults,\n    definitions,\n    list: [cliConf, envConf]\n  } = config;\n  env.INIT_CWD = process.cwd();\n\n  // if the key is deprecated, skip it always.\n  // if the key is the default value,\n  //   if the environ is NOT the default value,\n  //     set the environ\n  //   else skip it, it's fine\n  // if the key is NOT the default value,\n  //   if the env is setting it, then leave it (already set)\n  //   otherwise, set the env\n  const cliSet = new Set(Object.keys(cliConf));\n  const envSet = new Set(Object.keys(envConf));\n  for (const key in cliConf) {\n    const {\n      deprecated,\n      envExport = true\n    } = definitions[key] || {};\n    if (deprecated || envExport === false) continue;\n    if (sameConfigValue(defaults[key], cliConf[key])) {\n      // config is the default, if the env thought different, then we\n      // have to set it BACK to the default in the environment.\n      if (!sameConfigValue(envConf[key], cliConf[key])) setEnv(env, key, cliConf[key]);\n    } else {\n      // config is not the default.  if the env wasn't the one to set\n      // it that way, then we have to put it in the env\n      if (!(envSet.has(key) && !cliSet.has(key))) setEnv(env, key, cliConf[key]);\n    }\n  }\n\n  // also set some other common nice envs that we want to rely on\n  env.HOME = config.home;\n  env.npm_config_global_prefix = config.globalPrefix;\n  env.npm_config_local_prefix = config.localPrefix;\n  if (cliConf.editor) env.EDITOR = cliConf.editor;\n\n  // note: this doesn't afect the *current* node process, of course, since\n  // it's already started, but it does affect the options passed to scripts.\n  if (cliConf['node-options']) env.NODE_OPTIONS = cliConf['node-options'];\n  if (require.main && require.main.filename) env.npm_execpath = require.main.filename;\n  env.NODE = env.npm_node_execpath = config.execPath;\n};\nmodule.exports = setEnvs;","map":{"version":3,"names":["envKey","key","val","test","envVal","replace","toLowerCase","Array","isArray","map","v","join","undefined","String","sameConfigValue","def","sameArrayValue","length","i","setEnv","env","rawKey","rawVal","setEnvs","config","globalPrefix","platform","defaults","definitions","list","cliConf","envConf","INIT_CWD","process","cwd","cliSet","Set","Object","keys","envSet","deprecated","envExport","has","HOME","home","npm_config_global_prefix","npm_config_local_prefix","localPrefix","editor","EDITOR","NODE_OPTIONS","require","main","filename","npm_execpath","NODE","npm_node_execpath","execPath","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/config/lib/set-envs.js"],"sourcesContent":["// Set environment variables for any non-default configs,\n// so that they're already there when we run lifecycle scripts.\n//\n// See https://github.com/npm/rfcs/pull/90\n\n// Return the env key if this is a thing that belongs in the env.\n// Ie, if the key isn't a @scope, //nerf.dart, or _private,\n// and the value is a string or array.  Otherwise return false.\nconst envKey = (key, val) => {\n  return !/^[/@_]/.test(key) &&\n    (typeof envVal(val) === 'string') &&\n      `npm_config_${key.replace(/-/g, '_').toLowerCase()}`\n}\n\nconst envVal = val => Array.isArray(val) ? val.map(v => envVal(v)).join('\\n\\n')\n  : val === null || val === undefined || val === false ? ''\n  : typeof val === 'object' ? null\n  : String(val)\n\nconst sameConfigValue = (def, val) =>\n  !Array.isArray(val) || !Array.isArray(def) ? def === val\n  : sameArrayValue(def, val)\n\nconst sameArrayValue = (def, val) => {\n  if (def.length !== val.length)\n    return false\n\n  for (let i = 0; i < def.length; i++) {\n    /* istanbul ignore next - there are no array configs where the default\n     * is not an empty array, so this loop is a no-op, but it's the correct\n     * thing to do if we ever DO add a config like that. */\n    if (def[i] !== val[i])\n      return false\n  }\n  return true\n}\n\nconst setEnv = (env, rawKey, rawVal) => {\n  const val = envVal(rawVal)\n  const key = envKey(rawKey, val)\n  if (key && val !== null)\n    env[key] = val\n}\n\nconst setEnvs = (config) => {\n  // This ensures that all npm config values that are not the defaults are\n  // shared appropriately with child processes, without false positives.\n  const {\n    globalPrefix,\n    platform,\n    env,\n    defaults,\n    definitions,\n    list: [cliConf, envConf],\n  } = config\n\n  env.INIT_CWD = process.cwd()\n\n  // if the key is deprecated, skip it always.\n  // if the key is the default value,\n  //   if the environ is NOT the default value,\n  //     set the environ\n  //   else skip it, it's fine\n  // if the key is NOT the default value,\n  //   if the env is setting it, then leave it (already set)\n  //   otherwise, set the env\n  const cliSet = new Set(Object.keys(cliConf))\n  const envSet = new Set(Object.keys(envConf))\n  for (const key in cliConf) {\n    const { deprecated, envExport = true } = definitions[key] || {}\n    if (deprecated || envExport === false)\n      continue\n\n    if (sameConfigValue(defaults[key], cliConf[key])) {\n      // config is the default, if the env thought different, then we\n      // have to set it BACK to the default in the environment.\n      if (!sameConfigValue(envConf[key], cliConf[key]))\n        setEnv(env, key, cliConf[key])\n    } else {\n      // config is not the default.  if the env wasn't the one to set\n      // it that way, then we have to put it in the env\n      if (!(envSet.has(key) && !cliSet.has(key)))\n        setEnv(env, key, cliConf[key])\n    }\n  }\n\n  // also set some other common nice envs that we want to rely on\n  env.HOME = config.home\n  env.npm_config_global_prefix = config.globalPrefix\n  env.npm_config_local_prefix = config.localPrefix\n  if (cliConf.editor)\n    env.EDITOR = cliConf.editor\n\n  // note: this doesn't afect the *current* node process, of course, since\n  // it's already started, but it does affect the options passed to scripts.\n  if (cliConf['node-options'])\n    env.NODE_OPTIONS = cliConf['node-options']\n\n  if (require.main && require.main.filename)\n    env.npm_execpath = require.main.filename\n  env.NODE = env.npm_node_execpath = config.execPath\n}\n\nmodule.exports = setEnvs\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const inferOwner = require('infer-owner');\nconst mkdirp = require('mkdirp');\nconst {\n  promisify\n} = require('util');\nconst chownr = promisify(require('chownr'));\nconst platform = process.env.__TESTING_MKDIRP_INFER_OWNER_PLATFORM__ || process.platform;\nconst isWindows = platform === 'win32';\nconst isRoot = process.getuid && process.getuid() === 0;\nconst doChown = !isWindows && isRoot;\nmodule.exports = !doChown ? (path, opts) => mkdirp(path, opts) : (path, opts) => inferOwner(path).then(({\n  uid,\n  gid\n}) => mkdirp(path, opts).then(made => uid !== 0 || gid !== process.getgid() ? chownr(made || path, uid, gid).then(() => made) : made));\nmodule.exports.sync = !doChown ? (path, opts) => mkdirp.sync(path, opts) : (path, opts) => {\n  const {\n    uid,\n    gid\n  } = inferOwner.sync(path);\n  const made = mkdirp.sync(path);\n  if (uid !== 0 || gid !== process.getgid()) chownr.sync(made || path, uid, gid);\n  return made;\n};","map":{"version":3,"names":["inferOwner","require","mkdirp","promisify","chownr","platform","process","env","__TESTING_MKDIRP_INFER_OWNER_PLATFORM__","isWindows","isRoot","getuid","doChown","module","exports","path","opts","then","uid","gid","made","getgid","sync"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/mkdirp-infer-owner/index.js"],"sourcesContent":["const inferOwner = require('infer-owner')\nconst mkdirp = require('mkdirp')\nconst {promisify} = require('util')\nconst chownr = promisify(require('chownr'))\n\nconst platform = process.env.__TESTING_MKDIRP_INFER_OWNER_PLATFORM__\n  || process.platform\nconst isWindows = platform === 'win32'\nconst isRoot = process.getuid && process.getuid() === 0\nconst doChown = !isWindows && isRoot\n\nmodule.exports = !doChown ? (path, opts) => mkdirp(path, opts)\n  : (path, opts) => inferOwner(path).then(({uid, gid}) =>\n    mkdirp(path, opts).then(made =>\n      uid !== 0 || gid !== process.getgid()\n      ? chownr(made || path, uid, gid).then(() => made)\n      : made))\n\nmodule.exports.sync = !doChown ? (path, opts) => mkdirp.sync(path, opts)\n  : (path, opts) => {\n    const {uid, gid} = inferOwner.sync(path)\n    const made = mkdirp.sync(path)\n    if (uid !== 0 || gid !== process.getgid())\n      chownr.sync(made || path, uid, gid)\n    return made\n  }\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAACE;AAAS,CAAC,GAAGF,OAAO,CAAC,MAAM,CAAC;AACnC,MAAMG,MAAM,GAAGD,SAAS,CAACF,OAAO,CAAC,QAAQ,CAAC,CAAC;AAE3C,MAAMI,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,uCAAuC,IAC/DF,OAAO,CAACD,QAAQ;AACrB,MAAMI,SAAS,GAAGJ,QAAQ,KAAK,OAAO;AACtC,MAAMK,MAAM,GAAGJ,OAAO,CAACK,MAAM,IAAIL,OAAO,CAACK,MAAM,CAAC,CAAC,KAAK,CAAC;AACvD,MAAMC,OAAO,GAAG,CAACH,SAAS,IAAIC,MAAM;AAEpCG,MAAM,CAACC,OAAO,GAAG,CAACF,OAAO,GAAG,CAACG,IAAI,EAAEC,IAAI,KAAKd,MAAM,CAACa,IAAI,EAAEC,IAAI,CAAC,GAC1D,CAACD,IAAI,EAAEC,IAAI,KAAKhB,UAAU,CAACe,IAAI,CAAC,CAACE,IAAI,CAAC,CAAC;EAACC,GAAG;EAAEC;AAAG,CAAC,KACjDjB,MAAM,CAACa,IAAI,EAAEC,IAAI,CAAC,CAACC,IAAI,CAACG,IAAI,IAC1BF,GAAG,KAAK,CAAC,IAAIC,GAAG,KAAKb,OAAO,CAACe,MAAM,CAAC,CAAC,GACnCjB,MAAM,CAACgB,IAAI,IAAIL,IAAI,EAAEG,GAAG,EAAEC,GAAG,CAAC,CAACF,IAAI,CAAC,MAAMG,IAAI,CAAC,GAC/CA,IAAI,CAAC,CAAC;AAEdP,MAAM,CAACC,OAAO,CAACQ,IAAI,GAAG,CAACV,OAAO,GAAG,CAACG,IAAI,EAAEC,IAAI,KAAKd,MAAM,CAACoB,IAAI,CAACP,IAAI,EAAEC,IAAI,CAAC,GACpE,CAACD,IAAI,EAAEC,IAAI,KAAK;EAChB,MAAM;IAACE,GAAG;IAAEC;EAAG,CAAC,GAAGnB,UAAU,CAACsB,IAAI,CAACP,IAAI,CAAC;EACxC,MAAMK,IAAI,GAAGlB,MAAM,CAACoB,IAAI,CAACP,IAAI,CAAC;EAC9B,IAAIG,GAAG,KAAK,CAAC,IAAIC,GAAG,KAAKb,OAAO,CAACe,MAAM,CAAC,CAAC,EACvCjB,MAAM,CAACkB,IAAI,CAACF,IAAI,IAAIL,IAAI,EAAEG,GAAG,EAAEC,GAAG,CAAC;EACrC,OAAOC,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
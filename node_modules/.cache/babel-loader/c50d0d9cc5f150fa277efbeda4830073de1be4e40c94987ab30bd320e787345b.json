{"ast":null,"code":"'use strict';\n\nconst eu = encodeURIComponent;\nconst fetch = require('npm-registry-fetch');\nconst validate = require('aproba');\n\n// From https://github.com/npm/registry/blob/master/docs/orgs/memberships.md\nconst cmd = module.exports;\nclass MembershipDetail {}\ncmd.set = (org, user, role, opts = {}) => {\n  if (typeof role === 'object' && Object.keys(opts).length === 0) {\n    opts = role;\n    role = undefined;\n  }\n  validate('SSSO|SSZO', [org, user, role, opts]);\n  user = user.replace(/^@?/, '');\n  org = org.replace(/^@?/, '');\n  return fetch.json(`/-/org/${eu(org)}/user`, {\n    ...opts,\n    method: 'PUT',\n    body: {\n      user,\n      role\n    }\n  }).then(ret => Object.assign(new MembershipDetail(), ret));\n};\ncmd.rm = (org, user, opts = {}) => {\n  validate('SSO', [org, user, opts]);\n  user = user.replace(/^@?/, '');\n  org = org.replace(/^@?/, '');\n  return fetch(`/-/org/${eu(org)}/user`, {\n    ...opts,\n    method: 'DELETE',\n    body: {\n      user\n    },\n    ignoreBody: true\n  }).then(() => null);\n};\nclass Roster {}\ncmd.ls = (org, opts = {}) => {\n  return cmd.ls.stream(org, opts).collect().then(data => data.reduce((acc, [key, val]) => {\n    if (!acc) {\n      acc = {};\n    }\n    acc[key] = val;\n    return acc;\n  }, null)).then(ret => Object.assign(new Roster(), ret));\n};\ncmd.ls.stream = (org, opts = {}) => {\n  validate('SO', [org, opts]);\n  org = org.replace(/^@?/, '');\n  return fetch.json.stream(`/-/org/${eu(org)}/user`, '*', {\n    ...opts,\n    mapJSON: (value, [key]) => {\n      return [key, value];\n    }\n  });\n};","map":{"version":3,"names":["eu","encodeURIComponent","fetch","require","validate","cmd","module","exports","MembershipDetail","set","org","user","role","opts","Object","keys","length","undefined","replace","json","method","body","then","ret","assign","rm","ignoreBody","Roster","ls","stream","collect","data","reduce","acc","key","val","mapJSON","value"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmorg/index.js"],"sourcesContent":["'use strict'\n\nconst eu = encodeURIComponent\nconst fetch = require('npm-registry-fetch')\nconst validate = require('aproba')\n\n// From https://github.com/npm/registry/blob/master/docs/orgs/memberships.md\nconst cmd = module.exports\n\nclass MembershipDetail {}\ncmd.set = (org, user, role, opts = {}) => {\n  if (\n    typeof role === 'object' &&\n    Object.keys(opts).length === 0\n  ) {\n    opts = role\n    role = undefined\n  }\n  validate('SSSO|SSZO', [org, user, role, opts])\n  user = user.replace(/^@?/, '')\n  org = org.replace(/^@?/, '')\n  return fetch.json(`/-/org/${eu(org)}/user`, {\n    ...opts,\n    method: 'PUT',\n    body: { user, role }\n  }).then(ret => Object.assign(new MembershipDetail(), ret))\n}\n\ncmd.rm = (org, user, opts = {}) => {\n  validate('SSO', [org, user, opts])\n  user = user.replace(/^@?/, '')\n  org = org.replace(/^@?/, '')\n  return fetch(`/-/org/${eu(org)}/user`, {\n    ...opts,\n    method: 'DELETE',\n    body: { user },\n    ignoreBody: true\n  }).then(() => null)\n}\n\nclass Roster {}\ncmd.ls = (org, opts = {}) => {\n  return cmd.ls.stream(org, opts)\n    .collect()\n    .then(data => data.reduce((acc, [key, val]) => {\n      if (!acc) {\n        acc = {}\n      }\n      acc[key] = val\n      return acc\n    }, null))\n    .then(ret => Object.assign(new Roster(), ret))\n}\n\ncmd.ls.stream = (org, opts = {}) => {\n  validate('SO', [org, opts])\n  org = org.replace(/^@?/, '')\n  return fetch.json.stream(`/-/org/${eu(org)}/user`, '*', {\n    ...opts,\n    mapJSON: (value, [key]) => {\n      return [key, value]\n    }\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
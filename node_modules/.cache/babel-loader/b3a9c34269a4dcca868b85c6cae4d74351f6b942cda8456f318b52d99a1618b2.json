{"ast":null,"code":"const crypto = require('crypto');\nconst {\n  resolve\n} = require('path');\nconst cacheInstallDir = ({\n  npxCache,\n  packages\n}) => {\n  if (!npxCache) throw new Error('Must provide a valid npxCache path');\n\n  // only packages not found in ${prefix}/node_modules\n  return resolve(npxCache, getHash(packages));\n};\nconst getHash = packages => crypto.createHash('sha512').update(packages.sort((a, b) => a.localeCompare(b, 'en')).join('\\n')).digest('hex').slice(0, 16);\nmodule.exports = cacheInstallDir;","map":{"version":3,"names":["crypto","require","resolve","cacheInstallDir","npxCache","packages","Error","getHash","createHash","update","sort","a","b","localeCompare","join","digest","slice","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmexec/lib/cache-install-dir.js"],"sourcesContent":["const crypto = require('crypto')\n\nconst { resolve } = require('path')\n\nconst cacheInstallDir = ({ npxCache, packages }) => {\n  if (!npxCache)\n    throw new Error('Must provide a valid npxCache path')\n\n  // only packages not found in ${prefix}/node_modules\n  return resolve(npxCache, getHash(packages))\n}\n\nconst getHash = (packages) =>\n  crypto.createHash('sha512')\n    .update(packages.sort((a, b) => a.localeCompare(b, 'en')).join('\\n'))\n    .digest('hex')\n    .slice(0, 16)\n\nmodule.exports = cacheInstallDir\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAM;EAAEC;AAAQ,CAAC,GAAGD,OAAO,CAAC,MAAM,CAAC;AAEnC,MAAME,eAAe,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EAClD,IAAI,CAACD,QAAQ,EACX,MAAM,IAAIE,KAAK,CAAC,oCAAoC,CAAC;;EAEvD;EACA,OAAOJ,OAAO,CAACE,QAAQ,EAAEG,OAAO,CAACF,QAAQ,CAAC,CAAC;AAC7C,CAAC;AAED,MAAME,OAAO,GAAIF,QAAQ,IACvBL,MAAM,CAACQ,UAAU,CAAC,QAAQ,CAAC,CACxBC,MAAM,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,aAAa,CAACD,CAAC,EAAE,IAAI,CAAC,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,CACpEC,MAAM,CAAC,KAAK,CAAC,CACbC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AAEjBC,MAAM,CAACC,OAAO,GAAGf,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
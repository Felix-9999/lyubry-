{"ast":null,"code":"/* eslint node/no-deprecated-api: \"off\" */\nconst semver = require('semver');\nconst {\n  basename\n} = require('path');\nconst {\n  parse\n} = require('url');\nmodule.exports = (name, tgz) => {\n  const base = basename(tgz);\n  if (!base.endsWith('.tgz')) {\n    return null;\n  }\n  const u = parse(tgz);\n  if (/^https?:/.test(u.protocol)) {\n    // registry url?  check for most likely pattern.\n    // either /@foo/bar/-/bar-1.2.3.tgz or\n    // /foo/-/foo-1.2.3.tgz, and fall through to\n    // basename checking.  Note that registries can\n    // be mounted below the root url, so /a/b/-/x/y/foo/-/foo-1.2.3.tgz\n    // is a potential option.\n    const tfsplit = u.path.substr(1).split('/-/');\n    if (tfsplit.length > 1) {\n      const afterTF = tfsplit.pop();\n      if (afterTF === base) {\n        const pre = tfsplit.pop();\n        const preSplit = pre.split(/\\/|%2f/i);\n        const project = preSplit.pop();\n        const scope = preSplit.pop();\n        return versionFromBaseScopeName(base, scope, project);\n      }\n    }\n  }\n  const split = name.split(/\\/|%2f/i);\n  const project = split.pop();\n  const scope = split.pop();\n  return versionFromBaseScopeName(base, scope, project);\n};\nconst versionFromBaseScopeName = (base, scope, name) => {\n  if (!base.startsWith(name + '-')) {\n    return null;\n  }\n  const parsed = semver.parse(base.substring(name.length + 1, base.length - 4));\n  return parsed ? {\n    name: scope && scope.charAt(0) === '@' ? `${scope}/${name}` : name,\n    version: parsed.version\n  } : null;\n};","map":{"version":3,"names":["semver","require","basename","parse","module","exports","name","tgz","base","endsWith","u","test","protocol","tfsplit","path","substr","split","length","afterTF","pop","pre","preSplit","project","scope","versionFromBaseScopeName","startsWith","parsed","substring","charAt","version"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/arborist/lib/version-from-tgz.js"],"sourcesContent":["/* eslint node/no-deprecated-api: \"off\" */\nconst semver = require('semver')\nconst {basename} = require('path')\nconst {parse} = require('url')\nmodule.exports = (name, tgz) => {\n  const base = basename(tgz)\n  if (!base.endsWith('.tgz')) {\n    return null\n  }\n\n  const u = parse(tgz)\n  if (/^https?:/.test(u.protocol)) {\n    // registry url?  check for most likely pattern.\n    // either /@foo/bar/-/bar-1.2.3.tgz or\n    // /foo/-/foo-1.2.3.tgz, and fall through to\n    // basename checking.  Note that registries can\n    // be mounted below the root url, so /a/b/-/x/y/foo/-/foo-1.2.3.tgz\n    // is a potential option.\n    const tfsplit = u.path.substr(1).split('/-/')\n    if (tfsplit.length > 1) {\n      const afterTF = tfsplit.pop()\n      if (afterTF === base) {\n        const pre = tfsplit.pop()\n        const preSplit = pre.split(/\\/|%2f/i)\n        const project = preSplit.pop()\n        const scope = preSplit.pop()\n        return versionFromBaseScopeName(base, scope, project)\n      }\n    }\n  }\n\n  const split = name.split(/\\/|%2f/i)\n  const project = split.pop()\n  const scope = split.pop()\n  return versionFromBaseScopeName(base, scope, project)\n}\n\nconst versionFromBaseScopeName = (base, scope, name) => {\n  if (!base.startsWith(name + '-')) {\n    return null\n  }\n\n  const parsed = semver.parse(base.substring(name.length + 1, base.length - 4))\n  return parsed ? {\n    name: scope && scope.charAt(0) === '@' ? `${scope}/${name}` : name,\n    version: parsed.version,\n  } : null\n}\n"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAACC;AAAQ,CAAC,GAAGD,OAAO,CAAC,MAAM,CAAC;AAClC,MAAM;EAACE;AAAK,CAAC,GAAGF,OAAO,CAAC,KAAK,CAAC;AAC9BG,MAAM,CAACC,OAAO,GAAG,CAACC,IAAI,EAAEC,GAAG,KAAK;EAC9B,MAAMC,IAAI,GAAGN,QAAQ,CAACK,GAAG,CAAC;EAC1B,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;IAC1B,OAAO,IAAI;EACb;EAEA,MAAMC,CAAC,GAAGP,KAAK,CAACI,GAAG,CAAC;EACpB,IAAI,UAAU,CAACI,IAAI,CAACD,CAAC,CAACE,QAAQ,CAAC,EAAE;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,OAAO,GAAGH,CAAC,CAACI,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC;IAC7C,IAAIH,OAAO,CAACI,MAAM,GAAG,CAAC,EAAE;MACtB,MAAMC,OAAO,GAAGL,OAAO,CAACM,GAAG,CAAC,CAAC;MAC7B,IAAID,OAAO,KAAKV,IAAI,EAAE;QACpB,MAAMY,GAAG,GAAGP,OAAO,CAACM,GAAG,CAAC,CAAC;QACzB,MAAME,QAAQ,GAAGD,GAAG,CAACJ,KAAK,CAAC,SAAS,CAAC;QACrC,MAAMM,OAAO,GAAGD,QAAQ,CAACF,GAAG,CAAC,CAAC;QAC9B,MAAMI,KAAK,GAAGF,QAAQ,CAACF,GAAG,CAAC,CAAC;QAC5B,OAAOK,wBAAwB,CAAChB,IAAI,EAAEe,KAAK,EAAED,OAAO,CAAC;MACvD;IACF;EACF;EAEA,MAAMN,KAAK,GAAGV,IAAI,CAACU,KAAK,CAAC,SAAS,CAAC;EACnC,MAAMM,OAAO,GAAGN,KAAK,CAACG,GAAG,CAAC,CAAC;EAC3B,MAAMI,KAAK,GAAGP,KAAK,CAACG,GAAG,CAAC,CAAC;EACzB,OAAOK,wBAAwB,CAAChB,IAAI,EAAEe,KAAK,EAAED,OAAO,CAAC;AACvD,CAAC;AAED,MAAME,wBAAwB,GAAGA,CAAChB,IAAI,EAAEe,KAAK,EAAEjB,IAAI,KAAK;EACtD,IAAI,CAACE,IAAI,CAACiB,UAAU,CAACnB,IAAI,GAAG,GAAG,CAAC,EAAE;IAChC,OAAO,IAAI;EACb;EAEA,MAAMoB,MAAM,GAAG1B,MAAM,CAACG,KAAK,CAACK,IAAI,CAACmB,SAAS,CAACrB,IAAI,CAACW,MAAM,GAAG,CAAC,EAAET,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC,CAAC;EAC7E,OAAOS,MAAM,GAAG;IACdpB,IAAI,EAAEiB,KAAK,IAAIA,KAAK,CAACK,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,GAAGL,KAAK,IAAIjB,IAAI,EAAE,GAAGA,IAAI;IAClEuB,OAAO,EAAEH,MAAM,CAACG;EAClB,CAAC,GAAG,IAAI;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
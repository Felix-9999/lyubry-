{"ast":null,"code":"const fs = require('fs');\nconst {\n  relative,\n  resolve\n} = require('path');\nconst mkdirp = require('mkdirp-infer-owner');\nconst initJson = require('init-package-json');\nconst npa = require('npm-package-arg');\nconst rpj = require('read-package-json-fast');\nconst libexec = require('libnpmexec');\nconst mapWorkspaces = require('@npmcli/map-workspaces');\nconst PackageJson = require('@npmcli/package-json');\nconst getLocationMsg = require('./exec/get-workspace-location-msg.js');\nconst BaseCommand = require('./base-command.js');\nclass Init extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Create a package.json file';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['yes', 'force', 'workspace', 'workspaces'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'init';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[--force|-f|--yes|-y|--scope]', '<@scope> (same as `npx <@scope>/create`)', '[<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)'];\n  }\n  exec(args, cb) {\n    this.init(args).then(() => cb()).catch(cb);\n  }\n  execWorkspaces(args, filters, cb) {\n    this.initWorkspaces(args, filters).then(() => cb()).catch(cb);\n  }\n  async init(args) {\n    // npm exec style\n    if (args.length) return await this.execCreate({\n      args,\n      path: process.cwd()\n    });\n\n    // no args, uses classic init-package-json boilerplate\n    await this.template();\n  }\n  async initWorkspaces(args, filters) {\n    // reads package.json for the top-level folder first, by doing this we\n    // ensure the command throw if no package.json is found before trying\n    // to create a workspace package.json file or its folders\n    const pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'));\n    const wPath = filterArg => resolve(this.npm.localPrefix, filterArg);\n\n    // npm-exec style, runs in the context of each workspace filter\n    if (args.length) {\n      for (const filterArg of filters) {\n        const path = wPath(filterArg);\n        await mkdirp(path);\n        await this.execCreate({\n          args,\n          path\n        });\n        await this.setWorkspace({\n          pkg,\n          workspacePath: path\n        });\n      }\n      return;\n    }\n\n    // no args, uses classic init-package-json boilerplate\n    for (const filterArg of filters) {\n      const path = wPath(filterArg);\n      await mkdirp(path);\n      await this.template(path);\n      await this.setWorkspace({\n        pkg,\n        workspacePath: path\n      });\n    }\n  }\n  async execCreate({\n    args,\n    path\n  }) {\n    const [initerName, ...otherArgs] = args;\n    let packageName = initerName;\n    if (/^@[^/]+$/.test(initerName)) packageName = initerName + '/create';else {\n      const req = npa(initerName);\n      if (req.type === 'git' && req.hosted) {\n        const {\n          user,\n          project\n        } = req.hosted;\n        packageName = initerName.replace(user + '/' + project, user + '/create-' + project);\n      } else if (req.registry) {\n        packageName = req.name.replace(/^(@[^/]+\\/)?/, '$1create-');\n        if (req.rawSpec) packageName += '@' + req.rawSpec;\n      } else {\n        throw Object.assign(new Error('Unrecognized initializer: ' + initerName + '\\nFor more package binary executing power check out `npx`:' + '\\nhttps://www.npmjs.com/package/npx'), {\n          code: 'EUNSUPPORTED'\n        });\n      }\n    }\n    const newArgs = [packageName, ...otherArgs];\n    const {\n      color\n    } = this.npm.flatOptions;\n    const {\n      flatOptions,\n      localBin,\n      log,\n      globalBin\n    } = this.npm;\n    // this function is definitely called.  But because of coverage map stuff\n    // it ends up both uncovered, and the coverage report doesn't even mention.\n    // the tests do assert that some output happens, so we know this line is\n    // being hit.\n    /* istanbul ignore next */\n    const output = (...outputArgs) => this.npm.output(...outputArgs);\n    const locationMsg = await getLocationMsg({\n      color,\n      path\n    });\n    const runPath = path;\n    const scriptShell = this.npm.config.get('script-shell') || undefined;\n    const yes = this.npm.config.get('yes');\n    await libexec({\n      ...flatOptions,\n      args: newArgs,\n      color,\n      localBin,\n      locationMsg,\n      log,\n      globalBin,\n      output,\n      path,\n      runPath,\n      scriptShell,\n      yes\n    });\n  }\n  async template(path = process.cwd()) {\n    this.npm.log.pause();\n    this.npm.log.disableProgress();\n    const initFile = this.npm.config.get('init-module');\n    if (!this.npm.config.get('yes') && !this.npm.config.get('force')) {\n      this.npm.output(['This utility will walk you through creating a package.json file.', 'It only covers the most common items, and tries to guess sensible defaults.', '', 'See `npm help init` for definitive documentation on these fields', 'and exactly what they do.', '', 'Use `npm install <pkg>` afterwards to install a package and', 'save it as a dependency in the package.json file.', '', 'Press ^C at any time to quit.'].join('\\n'));\n    }\n\n    // XXX promisify init-package-json\n    await new Promise((res, rej) => {\n      initJson(path, initFile, this.npm.config, (er, data) => {\n        this.npm.log.resume();\n        this.npm.log.enableProgress();\n        this.npm.log.silly('package data', data);\n        if (er && er.message === 'canceled') {\n          this.npm.log.warn('init', 'canceled');\n          return res();\n        }\n        if (er) rej(er);else {\n          this.npm.log.info('init', 'written successfully');\n          res(data);\n        }\n      });\n    });\n  }\n  async setWorkspace({\n    pkg,\n    workspacePath\n  }) {\n    const workspaces = await mapWorkspaces({\n      cwd: this.npm.localPrefix,\n      pkg\n    });\n\n    // skip setting workspace if current package.json glob already satisfies it\n    for (const wPath of workspaces.values()) {\n      if (wPath === workspacePath) return;\n    }\n\n    // if a create-pkg didn't generate a package.json at the workspace\n    // folder level, it might not be recognized as a workspace by\n    // mapWorkspaces, so we're just going to avoid touching the\n    // top-level package.json\n    try {\n      fs.statSync(resolve(workspacePath, 'package.json'));\n    } catch (err) {\n      return;\n    }\n    const pkgJson = await PackageJson.load(this.npm.localPrefix);\n    pkgJson.update({\n      workspaces: [...(pkgJson.content.workspaces || []), relative(this.npm.localPrefix, workspacePath)]\n    });\n    await pkgJson.save();\n  }\n}\nmodule.exports = Init;","map":{"version":3,"names":["fs","require","relative","resolve","mkdirp","initJson","npa","rpj","libexec","mapWorkspaces","PackageJson","getLocationMsg","BaseCommand","Init","description","params","name","usage","exec","args","cb","init","then","catch","execWorkspaces","filters","initWorkspaces","length","execCreate","path","process","cwd","template","pkg","npm","localPrefix","wPath","filterArg","setWorkspace","workspacePath","initerName","otherArgs","packageName","test","req","type","hosted","user","project","replace","registry","rawSpec","Object","assign","Error","code","newArgs","color","flatOptions","localBin","log","globalBin","output","outputArgs","locationMsg","runPath","scriptShell","config","get","undefined","yes","pause","disableProgress","initFile","join","Promise","res","rej","er","data","resume","enableProgress","silly","message","warn","info","workspaces","values","statSync","err","pkgJson","load","update","content","save","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/init.js"],"sourcesContent":["const fs = require('fs')\nconst { relative, resolve } = require('path')\nconst mkdirp = require('mkdirp-infer-owner')\nconst initJson = require('init-package-json')\nconst npa = require('npm-package-arg')\nconst rpj = require('read-package-json-fast')\nconst libexec = require('libnpmexec')\nconst mapWorkspaces = require('@npmcli/map-workspaces')\nconst PackageJson = require('@npmcli/package-json')\n\nconst getLocationMsg = require('./exec/get-workspace-location-msg.js')\nconst BaseCommand = require('./base-command.js')\n\nclass Init extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Create a package.json file'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['yes', 'force', 'workspace', 'workspaces']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'init'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      '[--force|-f|--yes|-y|--scope]',\n      '<@scope> (same as `npx <@scope>/create`)',\n      '[<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)',\n    ]\n  }\n\n  exec (args, cb) {\n    this.init(args).then(() => cb()).catch(cb)\n  }\n\n  execWorkspaces (args, filters, cb) {\n    this.initWorkspaces(args, filters).then(() => cb()).catch(cb)\n  }\n\n  async init (args) {\n    // npm exec style\n    if (args.length)\n      return (await this.execCreate({ args, path: process.cwd() }))\n\n    // no args, uses classic init-package-json boilerplate\n    await this.template()\n  }\n\n  async initWorkspaces (args, filters) {\n    // reads package.json for the top-level folder first, by doing this we\n    // ensure the command throw if no package.json is found before trying\n    // to create a workspace package.json file or its folders\n    const pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'))\n    const wPath = filterArg => resolve(this.npm.localPrefix, filterArg)\n\n    // npm-exec style, runs in the context of each workspace filter\n    if (args.length) {\n      for (const filterArg of filters) {\n        const path = wPath(filterArg)\n        await mkdirp(path)\n        await this.execCreate({ args, path })\n        await this.setWorkspace({ pkg, workspacePath: path })\n      }\n      return\n    }\n\n    // no args, uses classic init-package-json boilerplate\n    for (const filterArg of filters) {\n      const path = wPath(filterArg)\n      await mkdirp(path)\n      await this.template(path)\n      await this.setWorkspace({ pkg, workspacePath: path })\n    }\n  }\n\n  async execCreate ({ args, path }) {\n    const [initerName, ...otherArgs] = args\n    let packageName = initerName\n\n    if (/^@[^/]+$/.test(initerName))\n      packageName = initerName + '/create'\n    else {\n      const req = npa(initerName)\n      if (req.type === 'git' && req.hosted) {\n        const { user, project } = req.hosted\n        packageName = initerName\n          .replace(user + '/' + project, user + '/create-' + project)\n      } else if (req.registry) {\n        packageName = req.name.replace(/^(@[^/]+\\/)?/, '$1create-')\n        if (req.rawSpec)\n          packageName += '@' + req.rawSpec\n      } else {\n        throw Object.assign(new Error(\n          'Unrecognized initializer: ' + initerName +\n          '\\nFor more package binary executing power check out `npx`:' +\n          '\\nhttps://www.npmjs.com/package/npx'\n        ), { code: 'EUNSUPPORTED' })\n      }\n    }\n\n    const newArgs = [packageName, ...otherArgs]\n    const { color } = this.npm.flatOptions\n    const {\n      flatOptions,\n      localBin,\n      log,\n      globalBin,\n    } = this.npm\n    // this function is definitely called.  But because of coverage map stuff\n    // it ends up both uncovered, and the coverage report doesn't even mention.\n    // the tests do assert that some output happens, so we know this line is\n    // being hit.\n    /* istanbul ignore next */\n    const output = (...outputArgs) => this.npm.output(...outputArgs)\n    const locationMsg = await getLocationMsg({ color, path })\n    const runPath = path\n    const scriptShell = this.npm.config.get('script-shell') || undefined\n    const yes = this.npm.config.get('yes')\n\n    await libexec({\n      ...flatOptions,\n      args: newArgs,\n      color,\n      localBin,\n      locationMsg,\n      log,\n      globalBin,\n      output,\n      path,\n      runPath,\n      scriptShell,\n      yes,\n    })\n  }\n\n  async template (path = process.cwd()) {\n    this.npm.log.pause()\n    this.npm.log.disableProgress()\n\n    const initFile = this.npm.config.get('init-module')\n    if (!this.npm.config.get('yes') && !this.npm.config.get('force')) {\n      this.npm.output([\n        'This utility will walk you through creating a package.json file.',\n        'It only covers the most common items, and tries to guess sensible defaults.',\n        '',\n        'See `npm help init` for definitive documentation on these fields',\n        'and exactly what they do.',\n        '',\n        'Use `npm install <pkg>` afterwards to install a package and',\n        'save it as a dependency in the package.json file.',\n        '',\n        'Press ^C at any time to quit.',\n      ].join('\\n'))\n    }\n\n    // XXX promisify init-package-json\n    await new Promise((res, rej) => {\n      initJson(path, initFile, this.npm.config, (er, data) => {\n        this.npm.log.resume()\n        this.npm.log.enableProgress()\n        this.npm.log.silly('package data', data)\n        if (er && er.message === 'canceled') {\n          this.npm.log.warn('init', 'canceled')\n          return res()\n        }\n        if (er)\n          rej(er)\n        else {\n          this.npm.log.info('init', 'written successfully')\n          res(data)\n        }\n      })\n    })\n  }\n\n  async setWorkspace ({ pkg, workspacePath }) {\n    const workspaces = await mapWorkspaces({ cwd: this.npm.localPrefix, pkg })\n\n    // skip setting workspace if current package.json glob already satisfies it\n    for (const wPath of workspaces.values()) {\n      if (wPath === workspacePath)\n        return\n    }\n\n    // if a create-pkg didn't generate a package.json at the workspace\n    // folder level, it might not be recognized as a workspace by\n    // mapWorkspaces, so we're just going to avoid touching the\n    // top-level package.json\n    try {\n      fs.statSync(resolve(workspacePath, 'package.json'))\n    } catch (err) {\n      return\n    }\n\n    const pkgJson = await PackageJson.load(this.npm.localPrefix)\n\n    pkgJson.update({\n      workspaces: [\n        ...(pkgJson.content.workspaces || []),\n        relative(this.npm.localPrefix, workspacePath),\n      ],\n    })\n\n    await pkgJson.save()\n  }\n}\n\nmodule.exports = Init\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
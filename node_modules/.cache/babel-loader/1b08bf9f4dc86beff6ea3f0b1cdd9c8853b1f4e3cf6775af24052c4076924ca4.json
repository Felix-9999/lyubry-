{"ast":null,"code":"const {\n  resolve\n} = require('path');\nconst mapWorkspaces = require('@npmcli/map-workspaces');\nconst minimatch = require('minimatch');\nconst rpj = require('read-package-json-fast');\n\n// Returns an Map of paths to workspaces indexed by workspace name\n// { foo => '/path/to/foo' }\nconst getWorkspaces = async (filters, {\n  path\n}) => {\n  // TODO we need a better error to be bubbled up here if this rpj call fails\n  const pkg = await rpj(resolve(path, 'package.json'));\n  const workspaces = await mapWorkspaces({\n    cwd: path,\n    pkg\n  });\n  const res = filters.length ? new Map() : workspaces;\n  for (const filterArg of filters) {\n    for (const [workspaceName, workspacePath] of workspaces.entries()) {\n      if (filterArg === workspaceName || resolve(path, filterArg) === workspacePath || minimatch(workspacePath, `${resolve(path, filterArg)}/*`)) res.set(workspaceName, workspacePath);\n    }\n  }\n  if (!res.size) {\n    let msg = '!';\n    if (filters.length) {\n      msg = `:\\n ${filters.reduce((res, filterArg) => `${res} --workspace=${filterArg}`, '')}`;\n    }\n    throw new Error(`No workspaces found${msg}`);\n  }\n  return res;\n};\nmodule.exports = getWorkspaces;","map":{"version":3,"names":["resolve","require","mapWorkspaces","minimatch","rpj","getWorkspaces","filters","path","pkg","workspaces","cwd","res","length","Map","filterArg","workspaceName","workspacePath","entries","set","size","msg","reduce","Error","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/workspaces/get-workspaces.js"],"sourcesContent":["const { resolve } = require('path')\nconst mapWorkspaces = require('@npmcli/map-workspaces')\nconst minimatch = require('minimatch')\nconst rpj = require('read-package-json-fast')\n\n// Returns an Map of paths to workspaces indexed by workspace name\n// { foo => '/path/to/foo' }\nconst getWorkspaces = async (filters, { path }) => {\n  // TODO we need a better error to be bubbled up here if this rpj call fails\n  const pkg = await rpj(resolve(path, 'package.json'))\n  const workspaces = await mapWorkspaces({ cwd: path, pkg })\n  const res = filters.length ? new Map() : workspaces\n\n  for (const filterArg of filters) {\n    for (const [workspaceName, workspacePath] of workspaces.entries()) {\n      if (filterArg === workspaceName\n        || resolve(path, filterArg) === workspacePath\n        || minimatch(workspacePath, `${resolve(path, filterArg)}/*`))\n        res.set(workspaceName, workspacePath)\n    }\n  }\n\n  if (!res.size) {\n    let msg = '!'\n    if (filters.length) {\n      msg = `:\\n ${filters.reduce(\n        (res, filterArg) => `${res} --workspace=${filterArg}`, '')}`\n    }\n\n    throw new Error(`No workspaces found${msg}`)\n  }\n\n  return res\n}\n\nmodule.exports = getWorkspaces\n"],"mappings":"AAAA,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACnC,MAAMC,aAAa,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMG,GAAG,GAAGH,OAAO,CAAC,wBAAwB,CAAC;;AAE7C;AACA;AACA,MAAMI,aAAa,GAAG,MAAAA,CAAOC,OAAO,EAAE;EAAEC;AAAK,CAAC,KAAK;EACjD;EACA,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACJ,OAAO,CAACO,IAAI,EAAE,cAAc,CAAC,CAAC;EACpD,MAAME,UAAU,GAAG,MAAMP,aAAa,CAAC;IAAEQ,GAAG,EAAEH,IAAI;IAAEC;EAAI,CAAC,CAAC;EAC1D,MAAMG,GAAG,GAAGL,OAAO,CAACM,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAGJ,UAAU;EAEnD,KAAK,MAAMK,SAAS,IAAIR,OAAO,EAAE;IAC/B,KAAK,MAAM,CAACS,aAAa,EAAEC,aAAa,CAAC,IAAIP,UAAU,CAACQ,OAAO,CAAC,CAAC,EAAE;MACjE,IAAIH,SAAS,KAAKC,aAAa,IAC1Bf,OAAO,CAACO,IAAI,EAAEO,SAAS,CAAC,KAAKE,aAAa,IAC1Cb,SAAS,CAACa,aAAa,EAAE,GAAGhB,OAAO,CAACO,IAAI,EAAEO,SAAS,CAAC,IAAI,CAAC,EAC5DH,GAAG,CAACO,GAAG,CAACH,aAAa,EAAEC,aAAa,CAAC;IACzC;EACF;EAEA,IAAI,CAACL,GAAG,CAACQ,IAAI,EAAE;IACb,IAAIC,GAAG,GAAG,GAAG;IACb,IAAId,OAAO,CAACM,MAAM,EAAE;MAClBQ,GAAG,GAAG,OAAOd,OAAO,CAACe,MAAM,CACzB,CAACV,GAAG,EAAEG,SAAS,KAAK,GAAGH,GAAG,gBAAgBG,SAAS,EAAE,EAAE,EAAE,CAAC,EAAE;IAChE;IAEA,MAAM,IAAIQ,KAAK,CAAC,sBAAsBF,GAAG,EAAE,CAAC;EAC9C;EAEA,OAAOT,GAAG;AACZ,CAAC;AAEDY,MAAM,CAACC,OAAO,GAAGnB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
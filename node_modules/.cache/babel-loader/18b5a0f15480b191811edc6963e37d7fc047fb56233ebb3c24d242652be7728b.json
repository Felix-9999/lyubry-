{"ast":null,"code":"// we know it's global and/or not top, so the path has to be\n// {prefix}/node_modules/{name}.  Can't rely on pkg.name, because\n// it might be installed as an alias.\n\nconst {\n  dirname,\n  basename\n} = require('path');\n// this gets called a lot and can't change, so memoize it\nconst memo = new Map();\nmodule.exports = path => {\n  if (memo.has(path)) return memo.get(path);\n  const scopeOrNm = dirname(path);\n  const nm = basename(scopeOrNm) === 'node_modules' ? scopeOrNm : dirname(scopeOrNm);\n  memo.set(path, nm);\n  return nm;\n};","map":{"version":3,"names":["dirname","basename","require","memo","Map","module","exports","path","has","get","scopeOrNm","nm","set"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/bin-links/lib/get-node-modules.js"],"sourcesContent":["// we know it's global and/or not top, so the path has to be\n// {prefix}/node_modules/{name}.  Can't rely on pkg.name, because\n// it might be installed as an alias.\n\nconst {dirname, basename} = require('path')\n// this gets called a lot and can't change, so memoize it\nconst memo = new Map()\nmodule.exports = path => {\n  if (memo.has(path))\n    return memo.get(path)\n\n  const scopeOrNm = dirname(path)\n  const nm = basename(scopeOrNm) === 'node_modules' ? scopeOrNm\n    : dirname(scopeOrNm)\n\n  memo.set(path, nm)\n  return nm\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAM;EAACA,OAAO;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3C;AACA,MAAMC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;AACtBC,MAAM,CAACC,OAAO,GAAGC,IAAI,IAAI;EACvB,IAAIJ,IAAI,CAACK,GAAG,CAACD,IAAI,CAAC,EAChB,OAAOJ,IAAI,CAACM,GAAG,CAACF,IAAI,CAAC;EAEvB,MAAMG,SAAS,GAAGV,OAAO,CAACO,IAAI,CAAC;EAC/B,MAAMI,EAAE,GAAGV,QAAQ,CAACS,SAAS,CAAC,KAAK,cAAc,GAAGA,SAAS,GACzDV,OAAO,CAACU,SAAS,CAAC;EAEtBP,IAAI,CAACS,GAAG,CAACL,IAAI,EAAEI,EAAE,CAAC;EAClB,OAAOA,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\n// Do a two-pass walk, first to get the list of packages that need to be\n// bundled, then again to get the actual files and folders.\n// Keep a cache of node_modules content and package.json data, so that the\n// second walk doesn't have to re-do all the same work.\nconst bundleWalk = require('npm-bundled');\nconst BundleWalker = bundleWalk.BundleWalker;\nconst BundleWalkerSync = bundleWalk.BundleWalkerSync;\nconst ignoreWalk = require('ignore-walk');\nconst IgnoreWalker = ignoreWalk.Walker;\nconst IgnoreWalkerSync = ignoreWalk.WalkerSync;\nconst rootBuiltinRules = Symbol('root-builtin-rules');\nconst packageNecessaryRules = Symbol('package-necessary-rules');\nconst path = require('path');\nconst normalizePackageBin = require('npm-normalize-package-bin');\n\n// Weird side-effect of this: a readme (etc) file will be included\n// if it exists anywhere within a folder with a package.json file.\n// The original intent was only to include these files in the root,\n// but now users in the wild are dependent on that behavior for\n// localized documentation and other use cases.  Adding a `/` to\n// these rules, while tempting and arguably more \"correct\", is a\n// significant change that will break existing use cases.\nconst packageMustHaveFileNames = 'readme|copying|license|licence';\nconst packageMustHaves = `@(${packageMustHaveFileNames}){,.*[^~$]}`;\nconst packageMustHavesRE = new RegExp(`^(${packageMustHaveFileNames})(\\\\..*[^~$])?$`, 'i');\nconst fs = require('fs');\nconst glob = require('glob');\nconst defaultRules = ['.npmignore', '.gitignore', '**/.git', '**/.svn', '**/.hg', '**/CVS', '**/.git/**', '**/.svn/**', '**/.hg/**', '**/CVS/**', '/.lock-wscript', '/.wafpickle-*', '/build/config.gypi', 'npm-debug.log', '**/.npmrc', '.*.swp', '.DS_Store', '**/.DS_Store/**', '._*', '**/._*/**', '*.orig', '/package-lock.json', '/yarn.lock', '/archived-packages/**'];\n\n// There may be others, but :?|<> are handled by node-tar\nconst nameIsBadForWindows = file => /\\*/.test(file);\n\n// a decorator that applies our custom rules to an ignore walker\nconst npmWalker = Class => class Walker extends Class {\n  constructor(opt) {\n    opt = opt || {};\n\n    // the order in which rules are applied.\n    opt.ignoreFiles = [rootBuiltinRules, 'package.json', '.npmignore', '.gitignore', packageNecessaryRules];\n    opt.includeEmpty = false;\n    opt.path = opt.path || process.cwd();\n\n    // only follow links in the root node_modules folder, because if those\n    // folders are included, it's because they're bundled, and bundles\n    // should include the contents, not the symlinks themselves.\n    // This regexp tests to see that we're either a node_modules folder,\n    // or a @scope within a node_modules folder, in the root's node_modules\n    // hierarchy (ie, not in test/foo/node_modules/ or something).\n    const followRe = /^(?:\\/node_modules\\/(?:@[^/]+\\/[^/]+|[^/]+)\\/)*\\/node_modules(?:\\/@[^/]+)?$/;\n    const rootPath = opt.parent ? opt.parent.root : opt.path;\n    const followTestPath = opt.path.replace(/\\\\/g, '/').substr(rootPath.length);\n    opt.follow = followRe.test(followTestPath);\n    super(opt);\n\n    // ignore a bunch of things by default at the root level.\n    // also ignore anything in the main project node_modules hierarchy,\n    // except bundled dependencies\n    if (!this.parent) {\n      this.bundled = opt.bundled || [];\n      this.bundledScopes = Array.from(new Set(this.bundled.filter(f => /^@/.test(f)).map(f => f.split('/')[0])));\n      const rules = defaultRules.join('\\n') + '\\n';\n      this.packageJsonCache = opt.packageJsonCache || new Map();\n      super.onReadIgnoreFile(rootBuiltinRules, rules, _ => _);\n    } else {\n      this.bundled = [];\n      this.bundledScopes = [];\n      this.packageJsonCache = this.parent.packageJsonCache;\n    }\n  }\n  onReaddir(entries) {\n    if (!this.parent) {\n      entries = entries.filter(e => e !== '.git' && !(e === 'node_modules' && this.bundled.length === 0));\n    }\n\n    // if we have a package.json, then look in it for 'files'\n    // we _only_ do this in the root project, not bundled deps\n    // or other random folders.  Bundled deps are always assumed\n    // to be in the state the user wants to include them, and\n    // a package.json somewhere else might be a template or\n    // test or something else entirely.\n    if (this.parent || !entries.includes('package.json')) return super.onReaddir(entries);\n\n    // when the cache has been seeded with the root manifest,\n    // we must respect that (it may differ from the filesystem)\n    const ig = path.resolve(this.path, 'package.json');\n    if (this.packageJsonCache.has(ig)) {\n      const pkg = this.packageJsonCache.get(ig);\n\n      // fall back to filesystem when seeded manifest is invalid\n      if (!pkg || typeof pkg !== 'object') return this.readPackageJson(entries);\n\n      // feels wonky, but this ensures package bin is _always_\n      // normalized, as well as guarding against invalid JSON\n      return this.getPackageFiles(entries, JSON.stringify(pkg));\n    }\n    this.readPackageJson(entries);\n  }\n  onReadPackageJson(entries, er, pkg) {\n    if (er) this.emit('error', er);else this.getPackageFiles(entries, pkg);\n  }\n  mustHaveFilesFromPackage(pkg) {\n    const files = [];\n    if (pkg.browser) files.push('/' + pkg.browser);\n    if (pkg.main) files.push('/' + pkg.main);\n    if (pkg.bin) {\n      // always an object because normalized already\n      for (const key in pkg.bin) files.push('/' + pkg.bin[key]);\n    }\n    files.push('/package.json', '/npm-shrinkwrap.json', '!/package-lock.json', packageMustHaves);\n    return files;\n  }\n  getPackageFiles(entries, pkg) {\n    try {\n      // XXX this could be changed to use read-package-json-fast\n      // which handles the normalizing of bins for us, and simplifies\n      // the test for bundleDependencies and bundledDependencies later.\n      // HOWEVER if we do this, we need to be sure that we're careful\n      // about what we write back out since rpj-fast removes some fields\n      // that the user likely wants to keep. it also would add a second\n      // file read that we would want to optimize away.\n      pkg = normalizePackageBin(JSON.parse(pkg.toString()));\n    } catch (er) {\n      // not actually a valid package.json\n      return super.onReaddir(entries);\n    }\n    const ig = path.resolve(this.path, 'package.json');\n    this.packageJsonCache.set(ig, pkg);\n\n    // no files list, just return the normal readdir() result\n    if (!Array.isArray(pkg.files)) return super.onReaddir(entries);\n    pkg.files.push(...this.mustHaveFilesFromPackage(pkg));\n\n    // If the package has a files list, then it's unlikely to include\n    // node_modules, because why would you do that?  but since we use\n    // the files list as the effective readdir result, that means it\n    // looks like we don't have a node_modules folder at all unless we\n    // include it here.\n    if ((pkg.bundleDependencies || pkg.bundledDependencies) && entries.includes('node_modules')) pkg.files.push('node_modules');\n    const patterns = Array.from(new Set(pkg.files)).reduce((set, pattern) => {\n      const excl = pattern.match(/^!+/);\n      if (excl) pattern = pattern.substr(excl[0].length);\n      // strip off any / from the start of the pattern.  /foo => foo\n      pattern = pattern.replace(/^\\/+/, '');\n      // an odd number of ! means a negated pattern.  !!foo ==> foo\n      const negate = excl && excl[0].length % 2 === 1;\n      set.push({\n        pattern,\n        negate\n      });\n      return set;\n    }, []);\n    let n = patterns.length;\n    const set = new Set();\n    const negates = new Set();\n    const results = [];\n    const then = (pattern, negate, er, fileList, i) => {\n      if (er) return this.emit('error', er);\n      results[i] = {\n        negate,\n        fileList\n      };\n      if (--n === 0) processResults(results);\n    };\n    const processResults = results => {\n      for (const {\n        negate,\n        fileList\n      } of results) {\n        if (negate) {\n          fileList.forEach(f => {\n            f = f.replace(/\\/+$/, '');\n            set.delete(f);\n            negates.add(f);\n          });\n        } else {\n          fileList.forEach(f => {\n            f = f.replace(/\\/+$/, '');\n            set.add(f);\n            negates.delete(f);\n          });\n        }\n      }\n      const list = Array.from(set);\n      // replace the files array with our computed explicit set\n      pkg.files = list.concat(Array.from(negates).map(f => '!' + f));\n      const rdResult = Array.from(new Set(list.map(f => f.replace(/^\\/+/, ''))));\n      super.onReaddir(rdResult);\n    };\n\n    // maintain the index so that we process them in-order only once all\n    // are completed, otherwise the parallelism messes things up, since a\n    // glob like **/*.js will always be slower than a subsequent !foo.js\n    patterns.forEach(({\n      pattern,\n      negate\n    }, i) => this.globFiles(pattern, (er, res) => then(pattern, negate, er, res, i)));\n  }\n  filterEntry(entry, partial) {\n    // get the partial path from the root of the walk\n    const p = this.path.substr(this.root.length + 1);\n    const pkgre = /^node_modules\\/(@[^/]+\\/?[^/]+|[^/]+)(\\/.*)?$/;\n    const isRoot = !this.parent;\n    const pkg = isRoot && pkgre.test(entry) ? entry.replace(pkgre, '$1') : null;\n    const rootNM = isRoot && entry === 'node_modules';\n    const rootPJ = isRoot && entry === 'package.json';\n    return (\n      // if we're in a bundled package, check with the parent.\n      /^node_modules($|\\/)/i.test(p) ? this.parent.filterEntry(this.basename + '/' + entry, partial)\n\n      // if package is bundled, all files included\n      // also include @scope dirs for bundled scoped deps\n      // they'll be ignored if no files end up in them.\n      // However, this only matters if we're in the root.\n      // node_modules folders elsewhere, like lib/node_modules,\n      // should be included normally unless ignored.\n      : pkg ? this.bundled.indexOf(pkg) !== -1 || this.bundledScopes.indexOf(pkg) !== -1\n\n      // only walk top node_modules if we want to bundle something\n      : rootNM ? !!this.bundled.length\n\n      // always include package.json at the root.\n      : rootPJ ? true\n\n      // always include readmes etc in any included dir\n      : packageMustHavesRE.test(entry) ? true\n\n      // npm-shrinkwrap and package.json always included in the root pkg\n      : isRoot && (entry === 'npm-shrinkwrap.json' || entry === 'package.json') ? true\n\n      // package-lock never included\n      : isRoot && entry === 'package-lock.json' ? false\n\n      // otherwise, follow ignore-walk's logic\n      : super.filterEntry(entry, partial)\n    );\n  }\n  filterEntries() {\n    if (this.ignoreRules['.npmignore']) this.ignoreRules['.gitignore'] = null;\n    this.filterEntries = super.filterEntries;\n    super.filterEntries();\n  }\n  addIgnoreFile(file, then) {\n    const ig = path.resolve(this.path, file);\n    if (file === 'package.json' && this.parent) then();else if (this.packageJsonCache.has(ig)) this.onPackageJson(ig, this.packageJsonCache.get(ig), then);else super.addIgnoreFile(file, then);\n  }\n  onPackageJson(ig, pkg, then) {\n    this.packageJsonCache.set(ig, pkg);\n    if (Array.isArray(pkg.files)) {\n      // in this case we already included all the must-haves\n      super.onReadIgnoreFile('package.json', pkg.files.map(f => '!' + f).join('\\n') + '\\n', then);\n    } else {\n      // if there's a bin, browser or main, make sure we don't ignore it\n      // also, don't ignore the package.json itself, or any files that\n      // must be included in the package.\n      const rules = this.mustHaveFilesFromPackage(pkg).map(f => `!${f}`);\n      const data = rules.join('\\n') + '\\n';\n      super.onReadIgnoreFile(packageNecessaryRules, data, then);\n    }\n  }\n\n  // override parent stat function to completely skip any filenames\n  // that will break windows entirely.\n  // XXX(isaacs) Next major version should make this an error instead.\n  stat(entry, file, dir, then) {\n    if (nameIsBadForWindows(entry)) then();else super.stat(entry, file, dir, then);\n  }\n\n  // override parent onstat function to nix all symlinks\n  onstat(st, entry, file, dir, then) {\n    if (st.isSymbolicLink()) then();else super.onstat(st, entry, file, dir, then);\n  }\n  onReadIgnoreFile(file, data, then) {\n    if (file === 'package.json') {\n      try {\n        const ig = path.resolve(this.path, file);\n        this.onPackageJson(ig, JSON.parse(data), then);\n      } catch (er) {\n        // ignore package.json files that are not json\n        then();\n      }\n    } else super.onReadIgnoreFile(file, data, then);\n  }\n  sort(a, b) {\n    return sort(a, b);\n  }\n};\nclass Walker extends npmWalker(IgnoreWalker) {\n  globFiles(pattern, cb) {\n    glob(pattern, {\n      dot: true,\n      cwd: this.path,\n      nocase: true\n    }, cb);\n  }\n  readPackageJson(entries) {\n    fs.readFile(this.path + '/package.json', (er, pkg) => this.onReadPackageJson(entries, er, pkg));\n  }\n  walker(entry, then) {\n    new Walker(this.walkerOpt(entry)).on('done', then).start();\n  }\n}\nclass WalkerSync extends npmWalker(IgnoreWalkerSync) {\n  globFiles(pattern, cb) {\n    cb(null, glob.sync(pattern, {\n      dot: true,\n      cwd: this.path,\n      nocase: true\n    }));\n  }\n  readPackageJson(entries) {\n    const p = this.path + '/package.json';\n    try {\n      this.onReadPackageJson(entries, null, fs.readFileSync(p));\n    } catch (er) {\n      this.onReadPackageJson(entries, er);\n    }\n  }\n  walker(entry, then) {\n    new WalkerSync(this.walkerOpt(entry)).start();\n    then();\n  }\n}\nconst walk = (options, callback) => {\n  options = options || {};\n  const p = new Promise((resolve, reject) => {\n    const bw = new BundleWalker(options);\n    bw.on('done', bundled => {\n      options.bundled = bundled;\n      options.packageJsonCache = bw.packageJsonCache;\n      new Walker(options).on('done', resolve).on('error', reject).start();\n    });\n    bw.start();\n  });\n  return callback ? p.then(res => callback(null, res), callback) : p;\n};\nconst walkSync = options => {\n  options = options || {};\n  const bw = new BundleWalkerSync(options).start();\n  options.bundled = bw.result;\n  options.packageJsonCache = bw.packageJsonCache;\n  const walker = new WalkerSync(options);\n  walker.start();\n  return walker.result;\n};\n\n// optimize for compressibility\n// extname, then basename, then locale alphabetically\n// https://twitter.com/isntitvacant/status/1131094910923231232\nconst sort = (a, b) => {\n  const exta = path.extname(a).toLowerCase();\n  const extb = path.extname(b).toLowerCase();\n  const basea = path.basename(a).toLowerCase();\n  const baseb = path.basename(b).toLowerCase();\n  return exta.localeCompare(extb, 'en') || basea.localeCompare(baseb, 'en') || a.localeCompare(b, 'en');\n};\nmodule.exports = walk;\nwalk.sync = walkSync;\nwalk.Walker = Walker;\nwalk.WalkerSync = WalkerSync;","map":{"version":3,"names":["bundleWalk","require","BundleWalker","BundleWalkerSync","ignoreWalk","IgnoreWalker","Walker","IgnoreWalkerSync","WalkerSync","rootBuiltinRules","Symbol","packageNecessaryRules","path","normalizePackageBin","packageMustHaveFileNames","packageMustHaves","packageMustHavesRE","RegExp","fs","glob","defaultRules","nameIsBadForWindows","file","test","npmWalker","Class","constructor","opt","ignoreFiles","includeEmpty","process","cwd","followRe","rootPath","parent","root","followTestPath","replace","substr","length","follow","bundled","bundledScopes","Array","from","Set","filter","f","map","split","rules","join","packageJsonCache","Map","onReadIgnoreFile","_","onReaddir","entries","e","includes","ig","resolve","has","pkg","get","readPackageJson","getPackageFiles","JSON","stringify","onReadPackageJson","er","emit","mustHaveFilesFromPackage","files","browser","push","main","bin","key","parse","toString","set","isArray","bundleDependencies","bundledDependencies","patterns","reduce","pattern","excl","match","negate","n","negates","results","then","fileList","i","processResults","forEach","delete","add","list","concat","rdResult","globFiles","res","filterEntry","entry","partial","p","pkgre","isRoot","rootNM","rootPJ","basename","indexOf","filterEntries","ignoreRules","addIgnoreFile","onPackageJson","data","stat","dir","onstat","st","isSymbolicLink","sort","a","b","cb","dot","nocase","readFile","walker","walkerOpt","on","start","sync","readFileSync","walk","options","callback","Promise","reject","bw","walkSync","result","exta","extname","toLowerCase","extb","basea","baseb","localeCompare","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/npm-packlist/index.js"],"sourcesContent":["'use strict'\n\n// Do a two-pass walk, first to get the list of packages that need to be\n// bundled, then again to get the actual files and folders.\n// Keep a cache of node_modules content and package.json data, so that the\n// second walk doesn't have to re-do all the same work.\n\nconst bundleWalk = require('npm-bundled')\nconst BundleWalker = bundleWalk.BundleWalker\nconst BundleWalkerSync = bundleWalk.BundleWalkerSync\n\nconst ignoreWalk = require('ignore-walk')\nconst IgnoreWalker = ignoreWalk.Walker\nconst IgnoreWalkerSync = ignoreWalk.WalkerSync\n\nconst rootBuiltinRules = Symbol('root-builtin-rules')\nconst packageNecessaryRules = Symbol('package-necessary-rules')\nconst path = require('path')\n\nconst normalizePackageBin = require('npm-normalize-package-bin')\n\n// Weird side-effect of this: a readme (etc) file will be included\n// if it exists anywhere within a folder with a package.json file.\n// The original intent was only to include these files in the root,\n// but now users in the wild are dependent on that behavior for\n// localized documentation and other use cases.  Adding a `/` to\n// these rules, while tempting and arguably more \"correct\", is a\n// significant change that will break existing use cases.\nconst packageMustHaveFileNames = 'readme|copying|license|licence'\n\nconst packageMustHaves = `@(${packageMustHaveFileNames}){,.*[^~$]}`\nconst packageMustHavesRE = new RegExp(`^(${packageMustHaveFileNames})(\\\\..*[^~$])?$`, 'i')\n\nconst fs = require('fs')\nconst glob = require('glob')\n\nconst defaultRules = [\n  '.npmignore',\n  '.gitignore',\n  '**/.git',\n  '**/.svn',\n  '**/.hg',\n  '**/CVS',\n  '**/.git/**',\n  '**/.svn/**',\n  '**/.hg/**',\n  '**/CVS/**',\n  '/.lock-wscript',\n  '/.wafpickle-*',\n  '/build/config.gypi',\n  'npm-debug.log',\n  '**/.npmrc',\n  '.*.swp',\n  '.DS_Store',\n  '**/.DS_Store/**',\n  '._*',\n  '**/._*/**',\n  '*.orig',\n  '/package-lock.json',\n  '/yarn.lock',\n  '/archived-packages/**',\n]\n\n// There may be others, but :?|<> are handled by node-tar\nconst nameIsBadForWindows = file => /\\*/.test(file)\n\n// a decorator that applies our custom rules to an ignore walker\nconst npmWalker = Class => class Walker extends Class {\n  constructor (opt) {\n    opt = opt || {}\n\n    // the order in which rules are applied.\n    opt.ignoreFiles = [\n      rootBuiltinRules,\n      'package.json',\n      '.npmignore',\n      '.gitignore',\n      packageNecessaryRules,\n    ]\n\n    opt.includeEmpty = false\n    opt.path = opt.path || process.cwd()\n\n    // only follow links in the root node_modules folder, because if those\n    // folders are included, it's because they're bundled, and bundles\n    // should include the contents, not the symlinks themselves.\n    // This regexp tests to see that we're either a node_modules folder,\n    // or a @scope within a node_modules folder, in the root's node_modules\n    // hierarchy (ie, not in test/foo/node_modules/ or something).\n    const followRe = /^(?:\\/node_modules\\/(?:@[^/]+\\/[^/]+|[^/]+)\\/)*\\/node_modules(?:\\/@[^/]+)?$/\n    const rootPath = opt.parent ? opt.parent.root : opt.path\n    const followTestPath = opt.path.replace(/\\\\/g, '/').substr(rootPath.length)\n    opt.follow = followRe.test(followTestPath)\n\n    super(opt)\n\n    // ignore a bunch of things by default at the root level.\n    // also ignore anything in the main project node_modules hierarchy,\n    // except bundled dependencies\n    if (!this.parent) {\n      this.bundled = opt.bundled || []\n      this.bundledScopes = Array.from(new Set(\n        this.bundled.filter(f => /^@/.test(f))\n          .map(f => f.split('/')[0])))\n      const rules = defaultRules.join('\\n') + '\\n'\n      this.packageJsonCache = opt.packageJsonCache || new Map()\n      super.onReadIgnoreFile(rootBuiltinRules, rules, _ => _)\n    } else {\n      this.bundled = []\n      this.bundledScopes = []\n      this.packageJsonCache = this.parent.packageJsonCache\n    }\n  }\n\n  onReaddir (entries) {\n    if (!this.parent) {\n      entries = entries.filter(e =>\n        e !== '.git' &&\n        !(e === 'node_modules' && this.bundled.length === 0)\n      )\n    }\n\n    // if we have a package.json, then look in it for 'files'\n    // we _only_ do this in the root project, not bundled deps\n    // or other random folders.  Bundled deps are always assumed\n    // to be in the state the user wants to include them, and\n    // a package.json somewhere else might be a template or\n    // test or something else entirely.\n    if (this.parent || !entries.includes('package.json'))\n      return super.onReaddir(entries)\n\n    // when the cache has been seeded with the root manifest,\n    // we must respect that (it may differ from the filesystem)\n    const ig = path.resolve(this.path, 'package.json')\n\n    if (this.packageJsonCache.has(ig)) {\n      const pkg = this.packageJsonCache.get(ig)\n\n      // fall back to filesystem when seeded manifest is invalid\n      if (!pkg || typeof pkg !== 'object')\n        return this.readPackageJson(entries)\n\n      // feels wonky, but this ensures package bin is _always_\n      // normalized, as well as guarding against invalid JSON\n      return this.getPackageFiles(entries, JSON.stringify(pkg))\n    }\n\n    this.readPackageJson(entries)\n  }\n\n  onReadPackageJson (entries, er, pkg) {\n    if (er)\n      this.emit('error', er)\n    else\n      this.getPackageFiles(entries, pkg)\n  }\n\n  mustHaveFilesFromPackage (pkg) {\n    const files = []\n    if (pkg.browser)\n      files.push('/' + pkg.browser)\n    if (pkg.main)\n      files.push('/' + pkg.main)\n    if (pkg.bin) {\n      // always an object because normalized already\n      for (const key in pkg.bin)\n        files.push('/' + pkg.bin[key])\n    }\n    files.push(\n      '/package.json',\n      '/npm-shrinkwrap.json',\n      '!/package-lock.json',\n      packageMustHaves\n    )\n    return files\n  }\n\n  getPackageFiles (entries, pkg) {\n    try {\n      // XXX this could be changed to use read-package-json-fast\n      // which handles the normalizing of bins for us, and simplifies\n      // the test for bundleDependencies and bundledDependencies later.\n      // HOWEVER if we do this, we need to be sure that we're careful\n      // about what we write back out since rpj-fast removes some fields\n      // that the user likely wants to keep. it also would add a second\n      // file read that we would want to optimize away.\n      pkg = normalizePackageBin(JSON.parse(pkg.toString()))\n    } catch (er) {\n      // not actually a valid package.json\n      return super.onReaddir(entries)\n    }\n\n    const ig = path.resolve(this.path, 'package.json')\n    this.packageJsonCache.set(ig, pkg)\n\n    // no files list, just return the normal readdir() result\n    if (!Array.isArray(pkg.files))\n      return super.onReaddir(entries)\n\n    pkg.files.push(...this.mustHaveFilesFromPackage(pkg))\n\n    // If the package has a files list, then it's unlikely to include\n    // node_modules, because why would you do that?  but since we use\n    // the files list as the effective readdir result, that means it\n    // looks like we don't have a node_modules folder at all unless we\n    // include it here.\n    if ((pkg.bundleDependencies || pkg.bundledDependencies) && entries.includes('node_modules'))\n      pkg.files.push('node_modules')\n\n    const patterns = Array.from(new Set(pkg.files)).reduce((set, pattern) => {\n      const excl = pattern.match(/^!+/)\n      if (excl)\n        pattern = pattern.substr(excl[0].length)\n      // strip off any / from the start of the pattern.  /foo => foo\n      pattern = pattern.replace(/^\\/+/, '')\n      // an odd number of ! means a negated pattern.  !!foo ==> foo\n      const negate = excl && excl[0].length % 2 === 1\n      set.push({ pattern, negate })\n      return set\n    }, [])\n\n    let n = patterns.length\n    const set = new Set()\n    const negates = new Set()\n    const results = []\n    const then = (pattern, negate, er, fileList, i) => {\n      if (er)\n        return this.emit('error', er)\n\n      results[i] = { negate, fileList }\n      if (--n === 0)\n        processResults(results)\n    }\n    const processResults = results => {\n      for (const {negate, fileList} of results) {\n        if (negate) {\n          fileList.forEach(f => {\n            f = f.replace(/\\/+$/, '')\n            set.delete(f)\n            negates.add(f)\n          })\n        } else {\n          fileList.forEach(f => {\n            f = f.replace(/\\/+$/, '')\n            set.add(f)\n            negates.delete(f)\n          })\n        }\n      }\n\n      const list = Array.from(set)\n      // replace the files array with our computed explicit set\n      pkg.files = list.concat(Array.from(negates).map(f => '!' + f))\n      const rdResult = Array.from(new Set(\n        list.map(f => f.replace(/^\\/+/, ''))\n      ))\n      super.onReaddir(rdResult)\n    }\n\n    // maintain the index so that we process them in-order only once all\n    // are completed, otherwise the parallelism messes things up, since a\n    // glob like **/*.js will always be slower than a subsequent !foo.js\n    patterns.forEach(({pattern, negate}, i) =>\n      this.globFiles(pattern, (er, res) => then(pattern, negate, er, res, i)))\n  }\n\n  filterEntry (entry, partial) {\n    // get the partial path from the root of the walk\n    const p = this.path.substr(this.root.length + 1)\n    const pkgre = /^node_modules\\/(@[^/]+\\/?[^/]+|[^/]+)(\\/.*)?$/\n    const isRoot = !this.parent\n    const pkg = isRoot && pkgre.test(entry) ?\n      entry.replace(pkgre, '$1') : null\n    const rootNM = isRoot && entry === 'node_modules'\n    const rootPJ = isRoot && entry === 'package.json'\n\n    return (\n      // if we're in a bundled package, check with the parent.\n      /^node_modules($|\\/)/i.test(p) ? this.parent.filterEntry(\n        this.basename + '/' + entry, partial)\n\n      // if package is bundled, all files included\n      // also include @scope dirs for bundled scoped deps\n      // they'll be ignored if no files end up in them.\n      // However, this only matters if we're in the root.\n      // node_modules folders elsewhere, like lib/node_modules,\n      // should be included normally unless ignored.\n      : pkg ? this.bundled.indexOf(pkg) !== -1 ||\n        this.bundledScopes.indexOf(pkg) !== -1\n\n      // only walk top node_modules if we want to bundle something\n      : rootNM ? !!this.bundled.length\n\n      // always include package.json at the root.\n      : rootPJ ? true\n\n      // always include readmes etc in any included dir\n      : packageMustHavesRE.test(entry) ? true\n\n      // npm-shrinkwrap and package.json always included in the root pkg\n      : isRoot && (entry === 'npm-shrinkwrap.json' || entry === 'package.json')\n        ? true\n\n      // package-lock never included\n        : isRoot && entry === 'package-lock.json' ? false\n\n        // otherwise, follow ignore-walk's logic\n        : super.filterEntry(entry, partial)\n    )\n  }\n\n  filterEntries () {\n    if (this.ignoreRules['.npmignore'])\n      this.ignoreRules['.gitignore'] = null\n    this.filterEntries = super.filterEntries\n    super.filterEntries()\n  }\n\n  addIgnoreFile (file, then) {\n    const ig = path.resolve(this.path, file)\n    if (file === 'package.json' && this.parent)\n      then()\n    else if (this.packageJsonCache.has(ig))\n      this.onPackageJson(ig, this.packageJsonCache.get(ig), then)\n    else\n      super.addIgnoreFile(file, then)\n  }\n\n  onPackageJson (ig, pkg, then) {\n    this.packageJsonCache.set(ig, pkg)\n\n    if (Array.isArray(pkg.files)) {\n      // in this case we already included all the must-haves\n      super.onReadIgnoreFile('package.json', pkg.files.map(\n        f => '!' + f\n      ).join('\\n') + '\\n', then)\n    } else {\n      // if there's a bin, browser or main, make sure we don't ignore it\n      // also, don't ignore the package.json itself, or any files that\n      // must be included in the package.\n      const rules = this.mustHaveFilesFromPackage(pkg).map(f => `!${f}`)\n      const data = rules.join('\\n') + '\\n'\n      super.onReadIgnoreFile(packageNecessaryRules, data, then)\n    }\n  }\n\n  // override parent stat function to completely skip any filenames\n  // that will break windows entirely.\n  // XXX(isaacs) Next major version should make this an error instead.\n  stat (entry, file, dir, then) {\n    if (nameIsBadForWindows(entry))\n      then()\n    else\n      super.stat(entry, file, dir, then)\n  }\n\n  // override parent onstat function to nix all symlinks\n  onstat (st, entry, file, dir, then) {\n    if (st.isSymbolicLink())\n      then()\n    else\n      super.onstat(st, entry, file, dir, then)\n  }\n\n  onReadIgnoreFile (file, data, then) {\n    if (file === 'package.json') {\n      try {\n        const ig = path.resolve(this.path, file)\n        this.onPackageJson(ig, JSON.parse(data), then)\n      } catch (er) {\n        // ignore package.json files that are not json\n        then()\n      }\n    } else\n      super.onReadIgnoreFile(file, data, then)\n  }\n\n  sort (a, b) {\n    return sort(a, b)\n  }\n}\n\nclass Walker extends npmWalker(IgnoreWalker) {\n  globFiles (pattern, cb) {\n    glob(pattern, { dot: true, cwd: this.path, nocase: true }, cb)\n  }\n\n  readPackageJson (entries) {\n    fs.readFile(this.path + '/package.json', (er, pkg) =>\n      this.onReadPackageJson(entries, er, pkg))\n  }\n\n  walker (entry, then) {\n    new Walker(this.walkerOpt(entry)).on('done', then).start()\n  }\n}\n\nclass WalkerSync extends npmWalker(IgnoreWalkerSync) {\n  globFiles (pattern, cb) {\n    cb(null, glob.sync(pattern, { dot: true, cwd: this.path, nocase: true }))\n  }\n\n  readPackageJson (entries) {\n    const p = this.path + '/package.json'\n    try {\n      this.onReadPackageJson(entries, null, fs.readFileSync(p))\n    } catch (er) {\n      this.onReadPackageJson(entries, er)\n    }\n  }\n\n  walker (entry, then) {\n    new WalkerSync(this.walkerOpt(entry)).start()\n    then()\n  }\n}\n\nconst walk = (options, callback) => {\n  options = options || {}\n  const p = new Promise((resolve, reject) => {\n    const bw = new BundleWalker(options)\n    bw.on('done', bundled => {\n      options.bundled = bundled\n      options.packageJsonCache = bw.packageJsonCache\n      new Walker(options).on('done', resolve).on('error', reject).start()\n    })\n    bw.start()\n  })\n  return callback ? p.then(res => callback(null, res), callback) : p\n}\n\nconst walkSync = options => {\n  options = options || {}\n  const bw = new BundleWalkerSync(options).start()\n  options.bundled = bw.result\n  options.packageJsonCache = bw.packageJsonCache\n  const walker = new WalkerSync(options)\n  walker.start()\n  return walker.result\n}\n\n// optimize for compressibility\n// extname, then basename, then locale alphabetically\n// https://twitter.com/isntitvacant/status/1131094910923231232\nconst sort = (a, b) => {\n  const exta = path.extname(a).toLowerCase()\n  const extb = path.extname(b).toLowerCase()\n  const basea = path.basename(a).toLowerCase()\n  const baseb = path.basename(b).toLowerCase()\n\n  return exta.localeCompare(extb, 'en') ||\n    basea.localeCompare(baseb, 'en') ||\n    a.localeCompare(b, 'en')\n}\n\nmodule.exports = walk\nwalk.sync = walkSync\nwalk.Walker = Walker\nwalk.WalkerSync = WalkerSync\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
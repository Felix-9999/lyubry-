{"ast":null,"code":"/* eslint camelcase: \"off\" */\nconst isWindows = require('./is-windows.js');\nconst setPATH = require('./set-path.js');\nconst {\n  resolve\n} = require('path');\nconst npm_config_node_gyp = require.resolve('node-gyp/bin/node-gyp.js');\nconst makeSpawnArgs = options => {\n  const {\n    event,\n    path,\n    scriptShell = isWindows ? process.env.ComSpec || 'cmd' : 'sh',\n    env = {},\n    stdio,\n    cmd,\n    stdioString = false\n  } = options;\n  const isCmd = /(?:^|\\\\)cmd(?:\\.exe)?$/i.test(scriptShell);\n  const args = isCmd ? ['/d', '/s', '/c', cmd] : ['-c', cmd];\n  const spawnOpts = {\n    env: setPATH(path, {\n      // we need to at least save the PATH environment var\n      ...process.env,\n      ...env,\n      npm_package_json: resolve(path, 'package.json'),\n      npm_lifecycle_event: event,\n      npm_lifecycle_script: cmd,\n      npm_config_node_gyp\n    }),\n    stdioString,\n    stdio,\n    cwd: path,\n    ...(isCmd ? {\n      windowsVerbatimArguments: true\n    } : {})\n  };\n  return [scriptShell, args, spawnOpts];\n};\nmodule.exports = makeSpawnArgs;","map":{"version":3,"names":["isWindows","require","setPATH","resolve","npm_config_node_gyp","makeSpawnArgs","options","event","path","scriptShell","process","env","ComSpec","stdio","cmd","stdioString","isCmd","test","args","spawnOpts","npm_package_json","npm_lifecycle_event","npm_lifecycle_script","cwd","windowsVerbatimArguments","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/run-script/lib/make-spawn-args.js"],"sourcesContent":["/* eslint camelcase: \"off\" */\nconst isWindows = require('./is-windows.js')\nconst setPATH = require('./set-path.js')\nconst {resolve} = require('path')\nconst npm_config_node_gyp = require.resolve('node-gyp/bin/node-gyp.js')\n\nconst makeSpawnArgs = options => {\n  const {\n    event,\n    path,\n    scriptShell = isWindows ? process.env.ComSpec || 'cmd' : 'sh',\n    env = {},\n    stdio,\n    cmd,\n    stdioString = false,\n  } = options\n\n  const isCmd = /(?:^|\\\\)cmd(?:\\.exe)?$/i.test(scriptShell)\n  const args = isCmd ? ['/d', '/s', '/c', cmd] : ['-c', cmd]\n\n  const spawnOpts = {\n    env: setPATH(path, {\n      // we need to at least save the PATH environment var\n      ...process.env,\n      ...env,\n      npm_package_json: resolve(path, 'package.json'),\n      npm_lifecycle_event: event,\n      npm_lifecycle_script: cmd,\n      npm_config_node_gyp,\n    }),\n    stdioString,\n    stdio,\n    cwd: path,\n    ...(isCmd ? { windowsVerbatimArguments: true } : {}),\n  }\n\n  return [scriptShell, args, spawnOpts]\n}\n\nmodule.exports = makeSpawnArgs\n"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAe,CAAC;AACxC,MAAM;EAACE;AAAO,CAAC,GAAGF,OAAO,CAAC,MAAM,CAAC;AACjC,MAAMG,mBAAmB,GAAGH,OAAO,CAACE,OAAO,CAAC,0BAA0B,CAAC;AAEvE,MAAME,aAAa,GAAGC,OAAO,IAAI;EAC/B,MAAM;IACJC,KAAK;IACLC,IAAI;IACJC,WAAW,GAAGT,SAAS,GAAGU,OAAO,CAACC,GAAG,CAACC,OAAO,IAAI,KAAK,GAAG,IAAI;IAC7DD,GAAG,GAAG,CAAC,CAAC;IACRE,KAAK;IACLC,GAAG;IACHC,WAAW,GAAG;EAChB,CAAC,GAAGT,OAAO;EAEX,MAAMU,KAAK,GAAG,yBAAyB,CAACC,IAAI,CAACR,WAAW,CAAC;EACzD,MAAMS,IAAI,GAAGF,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAEF,GAAG,CAAC,GAAG,CAAC,IAAI,EAAEA,GAAG,CAAC;EAE1D,MAAMK,SAAS,GAAG;IAChBR,GAAG,EAAET,OAAO,CAACM,IAAI,EAAE;MACjB;MACA,GAAGE,OAAO,CAACC,GAAG;MACd,GAAGA,GAAG;MACNS,gBAAgB,EAAEjB,OAAO,CAACK,IAAI,EAAE,cAAc,CAAC;MAC/Ca,mBAAmB,EAAEd,KAAK;MAC1Be,oBAAoB,EAAER,GAAG;MACzBV;IACF,CAAC,CAAC;IACFW,WAAW;IACXF,KAAK;IACLU,GAAG,EAAEf,IAAI;IACT,IAAIQ,KAAK,GAAG;MAAEQ,wBAAwB,EAAE;IAAK,CAAC,GAAG,CAAC,CAAC;EACrD,CAAC;EAED,OAAO,CAACf,WAAW,EAAES,IAAI,EAAEC,SAAS,CAAC;AACvC,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAGrB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
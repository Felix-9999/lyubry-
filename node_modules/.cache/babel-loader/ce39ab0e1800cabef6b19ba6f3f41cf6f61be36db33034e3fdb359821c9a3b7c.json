{"ast":null,"code":"const os = require('os');\nconst path = require('path');\nconst writeFileAtomic = require('write-file-atomic');\nconst mkdirp = require('mkdirp-infer-owner');\nconst fs = require('graceful-fs');\nconst errorMessage = require('./error-message.js');\nconst replaceInfo = require('./replace-info.js');\nlet exitHandlerCalled = false;\nlet logFileName;\nlet npm; // set by the cli\nlet wroteLogFile = false;\nconst getLogFile = () => {\n  // we call this multiple times, so we need to treat it as a singleton because\n  // the date is part of the name\n  if (!logFileName) logFileName = path.resolve(npm.config.get('cache'), '_logs', new Date().toISOString().replace(/[.:]/g, '_') + '-debug.log');\n  return logFileName;\n};\nprocess.on('exit', code => {\n  // process.emit is synchronous, so the timeEnd handler will run before the\n  // unfinished timer check below\n  process.emit('timeEnd', 'npm');\n  npm.log.disableProgress();\n  for (const [name, timers] of npm.timers) npm.log.verbose('unfinished npm timer', name, timers);\n  if (npm.config.loaded && npm.config.get('timing')) {\n    try {\n      const file = path.resolve(npm.config.get('cache'), '_timing.json');\n      const dir = path.dirname(npm.config.get('cache'));\n      mkdirp.sync(dir);\n      fs.appendFileSync(file, JSON.stringify({\n        command: process.argv.slice(2),\n        logfile: getLogFile(),\n        version: npm.version,\n        ...npm.timings\n      }) + '\\n');\n      const st = fs.lstatSync(path.dirname(npm.config.get('cache')));\n      fs.chownSync(dir, st.uid, st.gid);\n      fs.chownSync(file, st.uid, st.gid);\n    } catch (ex) {\n      // ignore\n    }\n  }\n  if (!code) npm.log.info('ok');else npm.log.verbose('code', code);\n  if (!exitHandlerCalled) {\n    process.exitCode = code || 1;\n    npm.log.error('', 'Exit handler never called!');\n    console.error('');\n    npm.log.error('', 'This is an error with npm itself. Please report this error at:');\n    npm.log.error('', '    <https://github.com/npm/cli/issues>');\n    // TODO this doesn't have an npm.config.loaded guard\n    writeLogFile();\n  }\n  // In timing mode we always write the log file\n  if (npm.config.loaded && npm.config.get('timing') && !wroteLogFile) writeLogFile();\n  if (wroteLogFile) {\n    // just a line break\n    if (npm.log.levels[npm.log.level] <= npm.log.levels.error) console.error('');\n    npm.log.error('', ['A complete log of this run can be found in:', '    ' + getLogFile()].join('\\n'));\n  }\n\n  // these are needed for the tests to have a clean slate in each test case\n  exitHandlerCalled = false;\n  wroteLogFile = false;\n});\nconst exitHandler = err => {\n  npm.log.disableProgress();\n  if (!npm.config.loaded) {\n    err = err || new Error('Exit prior to config file resolving.');\n    console.error(err.stack || err.message);\n  }\n\n  // only show the notification if it finished.\n  if (typeof npm.updateNotification === 'string') {\n    const {\n      level\n    } = npm.log;\n    npm.log.level = 'notice';\n    npm.log.notice('', npm.updateNotification);\n    npm.log.level = level;\n  }\n  exitHandlerCalled = true;\n  let exitCode;\n  let noLog;\n  if (err) {\n    exitCode = 1;\n    // if we got a command that just shells out to something else, then it\n    // will presumably print its own errors and exit with a proper status\n    // code if there's a problem.  If we got an error with a code=0, then...\n    // something else went wrong along the way, so maybe an npm problem?\n    const isShellout = npm.shelloutCommands.includes(npm.command);\n    const quietShellout = isShellout && typeof err.code === 'number' && err.code;\n    if (quietShellout) {\n      exitCode = err.code;\n      noLog = true;\n    } else if (typeof err === 'string') {\n      noLog = true;\n      npm.log.error('', err);\n    } else if (!(err instanceof Error)) {\n      noLog = true;\n      npm.log.error('weird error', err);\n    } else {\n      if (!err.code) {\n        const matchErrorCode = err.message.match(/^(?:Error: )?(E[A-Z]+)/);\n        err.code = matchErrorCode && matchErrorCode[1];\n      }\n      for (const k of ['type', 'stack', 'statusCode', 'pkgid']) {\n        const v = err[k];\n        if (v) npm.log.verbose(k, replaceInfo(v));\n      }\n      npm.log.verbose('cwd', process.cwd());\n      const args = replaceInfo(process.argv);\n      npm.log.verbose('', os.type() + ' ' + os.release());\n      npm.log.verbose('argv', args.map(JSON.stringify).join(' '));\n      npm.log.verbose('node', process.version);\n      npm.log.verbose('npm ', 'v' + npm.version);\n      for (const k of ['code', 'syscall', 'file', 'path', 'dest', 'errno']) {\n        const v = err[k];\n        if (v) npm.log.error(k, v);\n      }\n      const msg = errorMessage(err, npm);\n      for (const errline of [...msg.summary, ...msg.detail]) npm.log.error(...errline);\n      if (npm.config.loaded && npm.config.get('json')) {\n        const error = {\n          error: {\n            code: err.code,\n            summary: messageText(msg.summary),\n            detail: messageText(msg.detail)\n          }\n        };\n        console.error(JSON.stringify(error, null, 2));\n      }\n      if (typeof err.errno === 'number') exitCode = err.errno;else if (typeof err.code === 'number') exitCode = err.code;\n    }\n  }\n  npm.log.verbose('exit', exitCode || 0);\n  if (npm.log.level === 'silent') noLog = true;\n\n  // noLog is true if there was an error, including if config wasn't loaded, so\n  // this doesn't need a config.loaded guard\n  if (exitCode && !noLog) writeLogFile();\n\n  // explicitly call process.exit now so we don't hang on things like the\n  // update notifier, also flush stdout beforehand because process.exit doesn't\n  // wait for that to happen.\n  process.stdout.write('', () => process.exit(exitCode));\n};\nconst messageText = msg => msg.map(line => line.slice(1).join(' ')).join('\\n');\nconst writeLogFile = () => {\n  try {\n    let logOutput = '';\n    npm.log.record.forEach(m => {\n      const p = [m.id, m.level];\n      if (m.prefix) p.push(m.prefix);\n      const pref = p.join(' ');\n      m.message.trim().split(/\\r?\\n/).map(line => (pref + ' ' + line).trim()).forEach(line => {\n        logOutput += line + os.EOL;\n      });\n    });\n    const file = getLogFile();\n    const dir = path.dirname(file);\n    mkdirp.sync(dir);\n    writeFileAtomic.sync(file, logOutput);\n    const st = fs.lstatSync(path.dirname(npm.config.get('cache')));\n    fs.chownSync(dir, st.uid, st.gid);\n    fs.chownSync(file, st.uid, st.gid);\n\n    // truncate once it's been written.\n    npm.log.record.length = 0;\n    wroteLogFile = true;\n  } catch (ex) {}\n};\nmodule.exports = exitHandler;\nmodule.exports.setNpm = n => {\n  npm = n;\n};","map":{"version":3,"names":["os","require","path","writeFileAtomic","mkdirp","fs","errorMessage","replaceInfo","exitHandlerCalled","logFileName","npm","wroteLogFile","getLogFile","resolve","config","get","Date","toISOString","replace","process","on","code","emit","log","disableProgress","name","timers","verbose","loaded","file","dir","dirname","sync","appendFileSync","JSON","stringify","command","argv","slice","logfile","version","timings","st","lstatSync","chownSync","uid","gid","ex","info","exitCode","error","console","writeLogFile","levels","level","join","exitHandler","err","Error","stack","message","updateNotification","notice","noLog","isShellout","shelloutCommands","includes","quietShellout","matchErrorCode","match","k","v","cwd","args","type","release","map","msg","errline","summary","detail","messageText","errno","stdout","write","exit","line","logOutput","record","forEach","m","p","id","prefix","push","pref","trim","split","EOL","length","module","exports","setNpm","n"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/exit-handler.js"],"sourcesContent":["const os = require('os')\nconst path = require('path')\nconst writeFileAtomic = require('write-file-atomic')\nconst mkdirp = require('mkdirp-infer-owner')\nconst fs = require('graceful-fs')\n\nconst errorMessage = require('./error-message.js')\nconst replaceInfo = require('./replace-info.js')\n\nlet exitHandlerCalled = false\nlet logFileName\nlet npm // set by the cli\nlet wroteLogFile = false\n\nconst getLogFile = () => {\n  // we call this multiple times, so we need to treat it as a singleton because\n  // the date is part of the name\n  if (!logFileName)\n    logFileName = path.resolve(npm.config.get('cache'), '_logs', (new Date()).toISOString().replace(/[.:]/g, '_') + '-debug.log')\n\n  return logFileName\n}\n\nprocess.on('exit', code => {\n  // process.emit is synchronous, so the timeEnd handler will run before the\n  // unfinished timer check below\n  process.emit('timeEnd', 'npm')\n  npm.log.disableProgress()\n  for (const [name, timers] of npm.timers)\n    npm.log.verbose('unfinished npm timer', name, timers)\n\n  if (npm.config.loaded && npm.config.get('timing')) {\n    try {\n      const file = path.resolve(npm.config.get('cache'), '_timing.json')\n      const dir = path.dirname(npm.config.get('cache'))\n      mkdirp.sync(dir)\n\n      fs.appendFileSync(file, JSON.stringify({\n        command: process.argv.slice(2),\n        logfile: getLogFile(),\n        version: npm.version,\n        ...npm.timings,\n      }) + '\\n')\n\n      const st = fs.lstatSync(path.dirname(npm.config.get('cache')))\n      fs.chownSync(dir, st.uid, st.gid)\n      fs.chownSync(file, st.uid, st.gid)\n    } catch (ex) {\n      // ignore\n    }\n  }\n\n  if (!code)\n    npm.log.info('ok')\n  else\n    npm.log.verbose('code', code)\n\n  if (!exitHandlerCalled) {\n    process.exitCode = code || 1\n    npm.log.error('', 'Exit handler never called!')\n    console.error('')\n    npm.log.error('', 'This is an error with npm itself. Please report this error at:')\n    npm.log.error('', '    <https://github.com/npm/cli/issues>')\n    // TODO this doesn't have an npm.config.loaded guard\n    writeLogFile()\n  }\n  // In timing mode we always write the log file\n  if (npm.config.loaded && npm.config.get('timing') && !wroteLogFile)\n    writeLogFile()\n  if (wroteLogFile) {\n    // just a line break\n    if (npm.log.levels[npm.log.level] <= npm.log.levels.error)\n      console.error('')\n\n    npm.log.error(\n      '',\n      [\n        'A complete log of this run can be found in:',\n        '    ' + getLogFile(),\n      ].join('\\n')\n    )\n  }\n\n  // these are needed for the tests to have a clean slate in each test case\n  exitHandlerCalled = false\n  wroteLogFile = false\n})\n\nconst exitHandler = (err) => {\n  npm.log.disableProgress()\n  if (!npm.config.loaded) {\n    err = err || new Error('Exit prior to config file resolving.')\n    console.error(err.stack || err.message)\n  }\n\n  // only show the notification if it finished.\n  if (typeof npm.updateNotification === 'string') {\n    const { level } = npm.log\n    npm.log.level = 'notice'\n    npm.log.notice('', npm.updateNotification)\n    npm.log.level = level\n  }\n\n  exitHandlerCalled = true\n\n  let exitCode\n  let noLog\n\n  if (err) {\n    exitCode = 1\n    // if we got a command that just shells out to something else, then it\n    // will presumably print its own errors and exit with a proper status\n    // code if there's a problem.  If we got an error with a code=0, then...\n    // something else went wrong along the way, so maybe an npm problem?\n    const isShellout = npm.shelloutCommands.includes(npm.command)\n    const quietShellout = isShellout && typeof err.code === 'number' && err.code\n    if (quietShellout) {\n      exitCode = err.code\n      noLog = true\n    } else if (typeof err === 'string') {\n      noLog = true\n      npm.log.error('', err)\n    } else if (!(err instanceof Error)) {\n      noLog = true\n      npm.log.error('weird error', err)\n    } else {\n      if (!err.code) {\n        const matchErrorCode = err.message.match(/^(?:Error: )?(E[A-Z]+)/)\n        err.code = matchErrorCode && matchErrorCode[1]\n      }\n\n      for (const k of ['type', 'stack', 'statusCode', 'pkgid']) {\n        const v = err[k]\n        if (v)\n          npm.log.verbose(k, replaceInfo(v))\n      }\n\n      npm.log.verbose('cwd', process.cwd())\n\n      const args = replaceInfo(process.argv)\n      npm.log.verbose('', os.type() + ' ' + os.release())\n      npm.log.verbose('argv', args.map(JSON.stringify).join(' '))\n      npm.log.verbose('node', process.version)\n      npm.log.verbose('npm ', 'v' + npm.version)\n\n      for (const k of ['code', 'syscall', 'file', 'path', 'dest', 'errno']) {\n        const v = err[k]\n        if (v)\n          npm.log.error(k, v)\n      }\n\n      const msg = errorMessage(err, npm)\n      for (const errline of [...msg.summary, ...msg.detail])\n        npm.log.error(...errline)\n\n      if (npm.config.loaded && npm.config.get('json')) {\n        const error = {\n          error: {\n            code: err.code,\n            summary: messageText(msg.summary),\n            detail: messageText(msg.detail),\n          },\n        }\n        console.error(JSON.stringify(error, null, 2))\n      }\n\n      if (typeof err.errno === 'number')\n        exitCode = err.errno\n      else if (typeof err.code === 'number')\n        exitCode = err.code\n    }\n  }\n  npm.log.verbose('exit', exitCode || 0)\n\n  if (npm.log.level === 'silent')\n    noLog = true\n\n  // noLog is true if there was an error, including if config wasn't loaded, so\n  // this doesn't need a config.loaded guard\n  if (exitCode && !noLog)\n    writeLogFile()\n\n  // explicitly call process.exit now so we don't hang on things like the\n  // update notifier, also flush stdout beforehand because process.exit doesn't\n  // wait for that to happen.\n  process.stdout.write('', () => process.exit(exitCode))\n}\n\nconst messageText = msg => msg.map(line => line.slice(1).join(' ')).join('\\n')\n\nconst writeLogFile = () => {\n  try {\n    let logOutput = ''\n    npm.log.record.forEach(m => {\n      const p = [m.id, m.level]\n      if (m.prefix)\n        p.push(m.prefix)\n      const pref = p.join(' ')\n\n      m.message.trim().split(/\\r?\\n/)\n        .map(line => (pref + ' ' + line).trim())\n        .forEach(line => {\n          logOutput += line + os.EOL\n        })\n    })\n\n    const file = getLogFile()\n    const dir = path.dirname(file)\n    mkdirp.sync(dir)\n    writeFileAtomic.sync(file, logOutput)\n\n    const st = fs.lstatSync(path.dirname(npm.config.get('cache')))\n    fs.chownSync(dir, st.uid, st.gid)\n    fs.chownSync(file, st.uid, st.gid)\n\n    // truncate once it's been written.\n    npm.log.record.length = 0\n    wroteLogFile = true\n  } catch (ex) {\n\n  }\n}\n\nmodule.exports = exitHandler\nmodule.exports.setNpm = (n) => {\n  npm = n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
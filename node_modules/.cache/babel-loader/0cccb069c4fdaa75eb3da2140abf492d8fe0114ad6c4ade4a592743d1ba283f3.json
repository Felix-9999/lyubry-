{"ast":null,"code":"const fs = require('fs');\nconst {\n  promisify\n} = require('util');\nconst {\n  readFileSync\n} = fs;\nconst readFile = promisify(fs.readFile);\nconst extractPath = (path, cmdshimContents) => {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents);\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents);\n  } else {\n    return extractPathFromCygwin(cmdshimContents);\n  }\n};\nconst extractPathFromPowershell = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/);\n  return matches && matches[1];\n};\nconst extractPathFromCmd = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/);\n  return matches && matches[1];\n};\nconst extractPathFromCygwin = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/);\n  return matches && matches[1];\n};\nconst wrapError = (thrown, newError) => {\n  newError.message = thrown.message;\n  newError.code = thrown.code;\n  newError.path = thrown.path;\n  return newError;\n};\nconst notaShim = (path, er) => {\n  if (!er) {\n    er = new Error();\n    Error.captureStackTrace(er, notaShim);\n  }\n  er.code = 'ENOTASHIM';\n  er.message = `Can't read shim path from '${path}', ` + `it doesn't appear to be a cmd-shim`;\n  return er;\n};\nconst readCmdShim = path => {\n  // create a new error to capture the stack trace from this point,\n  // instead of getting some opaque stack into node's internals\n  const er = new Error();\n  Error.captureStackTrace(er, readCmdShim);\n  return readFile(path).then(contents => {\n    const destination = extractPath(path, contents.toString());\n    if (destination) return destination;\n    return Promise.reject(notaShim(path, er));\n  }, readFileEr => Promise.reject(wrapError(readFileEr, er)));\n};\nconst readCmdShimSync = path => {\n  const contents = readFileSync(path);\n  const destination = extractPath(path, contents.toString());\n  if (!destination) throw notaShim(path);\n  return destination;\n};\nreadCmdShim.sync = readCmdShimSync;\nmodule.exports = readCmdShim;","map":{"version":3,"names":["fs","require","promisify","readFileSync","readFile","extractPath","path","cmdshimContents","test","extractPathFromCmd","extractPathFromPowershell","extractPathFromCygwin","matches","match","wrapError","thrown","newError","message","code","notaShim","er","Error","captureStackTrace","readCmdShim","then","contents","destination","toString","Promise","reject","readFileEr","readCmdShimSync","sync","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/read-cmd-shim/index.js"],"sourcesContent":["const fs = require('fs')\nconst {promisify} = require('util')\nconst {readFileSync} = fs\nconst readFile = promisify(fs.readFile)\n\nconst extractPath = (path, cmdshimContents) => {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents)\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents)\n  } else {\n    return extractPathFromCygwin(cmdshimContents)\n  }\n}\n\nconst extractPathFromPowershell = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/)\n  return matches && matches[1]\n}\n\nconst extractPathFromCmd = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/)\n  return matches && matches[1]\n}\n\nconst extractPathFromCygwin = cmdshimContents => {\n  const matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/)\n  return matches && matches[1]\n}\n\nconst wrapError = (thrown, newError) => {\n  newError.message = thrown.message\n  newError.code = thrown.code\n  newError.path = thrown.path\n  return newError\n}\n\nconst notaShim = (path, er) => {\n  if (!er) {\n    er = new Error()\n    Error.captureStackTrace(er, notaShim)\n  }\n  er.code = 'ENOTASHIM'\n  er.message = `Can't read shim path from '${path}', ` +\n    `it doesn't appear to be a cmd-shim`\n  return er\n}\n\nconst readCmdShim = path => {\n  // create a new error to capture the stack trace from this point,\n  // instead of getting some opaque stack into node's internals\n  const er = new Error()\n  Error.captureStackTrace(er, readCmdShim)\n  return readFile(path).then(contents => {\n    const destination = extractPath(path, contents.toString())\n    if (destination) return destination\n    return Promise.reject(notaShim(path, er))\n  }, readFileEr => Promise.reject(wrapError(readFileEr, er)))\n}\n\nconst readCmdShimSync = path => {\n  const contents = readFileSync(path)\n  const destination = extractPath(path, contents.toString())\n  if (!destination) throw notaShim(path)\n  return destination\n}\n\nreadCmdShim.sync = readCmdShimSync\nmodule.exports = readCmdShim\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
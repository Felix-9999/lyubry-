{"ast":null,"code":"'use strict';\n\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : '';\nconst maybeEncode = arg => arg ? encodeURIComponent(arg) : '';\nconst defaults = {\n  sshtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({\n    domain,\n    user,\n    project,\n    treepath,\n    committish\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({\n    type,\n    user,\n    project,\n    committish\n  }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    user,\n    project,\n    committish\n  }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    user,\n    project\n  }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n};\nconst gitHosts = {};\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: ({\n    auth,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5);\n    if (type && type !== 'tree') {\n      return;\n    }\n    if (!type) {\n      committish = url.hash.slice(1);\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish\n    };\n  }\n});\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n    if (['get'].includes(aux)) {\n      return;\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    const path = url.pathname.slice(1);\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return;\n    }\n    const segments = path.split('/');\n    let project = segments.pop();\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    const user = segments.join('/');\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    project,\n    committish,\n    path,\n    hashformat\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    user,\n    project,\n    committish,\n    path\n  }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({\n    type,\n    project,\n    committish\n  }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    project,\n    committish\n  }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    project\n  }) => `https://${domain}/${project}`,\n  gittemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    project,\n    committish\n  }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n    if (aux === 'raw') {\n      return;\n    }\n    if (!project) {\n      if (!user) {\n        return;\n      }\n      project = user;\n      user = null;\n    }\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment);\n  }\n});\nconst names = Object.keys(gitHosts);\ngitHosts.byShortcut = {};\ngitHosts.byDomain = {};\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name;\n  gitHosts.byDomain[gitHosts[name].domain] = name;\n}\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}\nmodule.exports = gitHosts;","map":{"version":3,"names":["maybeJoin","args","every","arg","join","maybeEncode","encodeURIComponent","defaults","sshtemplate","domain","user","project","committish","sshurltemplate","browsetemplate","treepath","browsefiletemplate","path","fragment","hashformat","docstemplate","httpstemplate","auth","filetemplate","shortcuttemplate","type","pathtemplate","bugstemplate","formatHashFragment","gitHosts","github","Object","assign","protocols","gittemplate","tarballtemplate","extract","url","pathname","split","hash","slice","endsWith","bitbucket","aux","includes","gitlab","segments","pop","gist","names","keys","byShortcut","byDomain","name","toLowerCase","replace","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/hosted-git-info/git-host-info.js"],"sourcesContent":["'use strict'\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n}\n\nconst gitHosts = {}\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: ({ auth, user, project, committish, path }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  }\n})\n\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: ({ domain, project, committish }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, project, committish, path, hashformat }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) => `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  }\n})\n\nconst names = Object.keys(gitHosts)\ngitHosts.byShortcut = {}\ngitHosts.byDomain = {}\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name\n  gitHosts.byDomain[gitHosts[name].domain] = name\n}\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n\nmodule.exports = gitHosts\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const {\n  resolve\n} = require('path');\nconst Arborist = require('@npmcli/arborist');\nconst rpj = require('read-package-json-fast');\nconst reifyFinish = require('./utils/reify-finish.js');\nconst completion = require('./utils/completion/installed-shallow.js');\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\nclass Uninstall extends ArboristWorkspaceCmd {\n  static get description() {\n    return 'Remove a package';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'uninstall';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['save', ...super.params];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['[<@scope>/]<pkg>...'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion(opts) {\n    return completion(this.npm, opts);\n  }\n  exec(args, cb) {\n    this.uninstall(args).then(() => cb()).catch(cb);\n  }\n  async uninstall(args) {\n    // the /path/to/node_modules/..\n    const global = this.npm.config.get('global');\n    const path = global ? resolve(this.npm.globalDir, '..') : this.npm.localPrefix;\n    if (!args.length) {\n      if (!global) throw new Error('Must provide a package name to remove');else {\n        let pkg;\n        try {\n          pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'));\n        } catch (er) {\n          if (er.code !== 'ENOENT' && er.code !== 'ENOTDIR') throw er;else throw this.usage;\n        }\n        args.push(pkg.name);\n      }\n    }\n    const opts = {\n      ...this.npm.flatOptions,\n      path,\n      log: this.npm.log,\n      rm: args,\n      workspaces: this.workspaceNames\n    };\n    const arb = new Arborist(opts);\n    await arb.reify(opts);\n    await reifyFinish(this.npm, arb);\n  }\n}\nmodule.exports = Uninstall;","map":{"version":3,"names":["resolve","require","Arborist","rpj","reifyFinish","completion","ArboristWorkspaceCmd","Uninstall","description","name","params","usage","opts","npm","exec","args","cb","uninstall","then","catch","global","config","get","path","globalDir","localPrefix","length","Error","pkg","er","code","push","flatOptions","log","rm","workspaces","workspaceNames","arb","reify","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/uninstall.js"],"sourcesContent":["const { resolve } = require('path')\nconst Arborist = require('@npmcli/arborist')\nconst rpj = require('read-package-json-fast')\n\nconst reifyFinish = require('./utils/reify-finish.js')\nconst completion = require('./utils/completion/installed-shallow.js')\n\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\nclass Uninstall extends ArboristWorkspaceCmd {\n  static get description () {\n    return 'Remove a package'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'uninstall'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['save', ...super.params]\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[<@scope>/]<pkg>...']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  async completion (opts) {\n    return completion(this.npm, opts)\n  }\n\n  exec (args, cb) {\n    this.uninstall(args).then(() => cb()).catch(cb)\n  }\n\n  async uninstall (args) {\n    // the /path/to/node_modules/..\n    const global = this.npm.config.get('global')\n    const path = global\n      ? resolve(this.npm.globalDir, '..')\n      : this.npm.localPrefix\n\n    if (!args.length) {\n      if (!global)\n        throw new Error('Must provide a package name to remove')\n      else {\n        let pkg\n\n        try {\n          pkg = await rpj(resolve(this.npm.localPrefix, 'package.json'))\n        } catch (er) {\n          if (er.code !== 'ENOENT' && er.code !== 'ENOTDIR')\n            throw er\n          else\n            throw this.usage\n        }\n\n        args.push(pkg.name)\n      }\n    }\n\n    const opts = {\n      ...this.npm.flatOptions,\n      path,\n      log: this.npm.log,\n      rm: args,\n      workspaces: this.workspaceNames,\n    }\n    const arb = new Arborist(opts)\n    await arb.reify(opts)\n    await reifyFinish(this.npm, arb)\n  }\n}\nmodule.exports = Uninstall\n"],"mappings":"AAAA,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACnC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAME,GAAG,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAE7C,MAAMG,WAAW,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AACtD,MAAMI,UAAU,GAAGJ,OAAO,CAAC,yCAAyC,CAAC;AAErE,MAAMK,oBAAoB,GAAGL,OAAO,CAAC,8BAA8B,CAAC;AACpE,MAAMM,SAAS,SAASD,oBAAoB,CAAC;EAC3C,WAAWE,WAAWA,CAAA,EAAI;IACxB,OAAO,kBAAkB;EAC3B;;EAEA;EACA,WAAWC,IAAIA,CAAA,EAAI;IACjB,OAAO,WAAW;EACpB;;EAEA;EACA,WAAWC,MAAMA,CAAA,EAAI;IACnB,OAAO,CAAC,MAAM,EAAE,GAAG,KAAK,CAACA,MAAM,CAAC;EAClC;;EAEA;EACA,WAAWC,KAAKA,CAAA,EAAI;IAClB,OAAO,CAAC,qBAAqB,CAAC;EAChC;;EAEA;EACA,MAAMN,UAAUA,CAAEO,IAAI,EAAE;IACtB,OAAOP,UAAU,CAAC,IAAI,CAACQ,GAAG,EAAED,IAAI,CAAC;EACnC;EAEAE,IAAIA,CAAEC,IAAI,EAAEC,EAAE,EAAE;IACd,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,MAAMF,EAAE,CAAC,CAAC,CAAC,CAACG,KAAK,CAACH,EAAE,CAAC;EACjD;EAEA,MAAMC,SAASA,CAAEF,IAAI,EAAE;IACrB;IACA,MAAMK,MAAM,GAAG,IAAI,CAACP,GAAG,CAACQ,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC;IAC5C,MAAMC,IAAI,GAAGH,MAAM,GACfpB,OAAO,CAAC,IAAI,CAACa,GAAG,CAACW,SAAS,EAAE,IAAI,CAAC,GACjC,IAAI,CAACX,GAAG,CAACY,WAAW;IAExB,IAAI,CAACV,IAAI,CAACW,MAAM,EAAE;MAChB,IAAI,CAACN,MAAM,EACT,MAAM,IAAIO,KAAK,CAAC,uCAAuC,CAAC,MACrD;QACH,IAAIC,GAAG;QAEP,IAAI;UACFA,GAAG,GAAG,MAAMzB,GAAG,CAACH,OAAO,CAAC,IAAI,CAACa,GAAG,CAACY,WAAW,EAAE,cAAc,CAAC,CAAC;QAChE,CAAC,CAAC,OAAOI,EAAE,EAAE;UACX,IAAIA,EAAE,CAACC,IAAI,KAAK,QAAQ,IAAID,EAAE,CAACC,IAAI,KAAK,SAAS,EAC/C,MAAMD,EAAE,MAER,MAAM,IAAI,CAAClB,KAAK;QACpB;QAEAI,IAAI,CAACgB,IAAI,CAACH,GAAG,CAACnB,IAAI,CAAC;MACrB;IACF;IAEA,MAAMG,IAAI,GAAG;MACX,GAAG,IAAI,CAACC,GAAG,CAACmB,WAAW;MACvBT,IAAI;MACJU,GAAG,EAAE,IAAI,CAACpB,GAAG,CAACoB,GAAG;MACjBC,EAAE,EAAEnB,IAAI;MACRoB,UAAU,EAAE,IAAI,CAACC;IACnB,CAAC;IACD,MAAMC,GAAG,GAAG,IAAInC,QAAQ,CAACU,IAAI,CAAC;IAC9B,MAAMyB,GAAG,CAACC,KAAK,CAAC1B,IAAI,CAAC;IACrB,MAAMR,WAAW,CAAC,IAAI,CAACS,GAAG,EAAEwB,GAAG,CAAC;EAClC;AACF;AACAE,MAAM,CAACC,OAAO,GAAGjC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
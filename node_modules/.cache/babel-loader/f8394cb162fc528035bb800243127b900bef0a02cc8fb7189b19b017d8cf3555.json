{"ast":null,"code":"const {\n  resolve,\n  dirname\n} = require('path');\nconst isWindows = require('./is-windows.js');\n// the path here is relative, even though it does not need to be\n// in order to make the posix tests pass in windows\nconst nodeGypPath = resolve(__dirname, '../lib/node-gyp-bin');\n\n// Windows typically calls its PATH environ 'Path', but this is not\n// guaranteed, nor is it guaranteed to be the only one.  Merge them\n// all together in the order they appear in the object.\nconst setPATH = (projectPath, env) => {\n  // not require('path').delimiter, because we fake this for testing\n  const delimiter = isWindows ? ';' : ':';\n  const PATH = Object.keys(env).filter(p => /^path$/i.test(p) && env[p]).map(p => env[p].split(delimiter)).reduce((set, p) => set.concat(p.filter(p => !set.includes(p))), []).join(delimiter);\n  const pathArr = [];\n  // unshift the ./node_modules/.bin from every folder\n  // walk up until dirname() does nothing, at the root\n  // XXX should we specify a cwd that we don't go above?\n  let p = projectPath;\n  let pp;\n  do {\n    pathArr.push(resolve(p, 'node_modules', '.bin'));\n    pp = p;\n    p = dirname(p);\n  } while (p !== pp);\n  pathArr.push(nodeGypPath, PATH);\n  const pathVal = pathArr.join(delimiter);\n\n  // XXX include the node-gyp-bin path somehow?  Probably better for\n  // npm or arborist or whoever to just provide that by putting it in\n  // the PATH environ, since that's preserved anyway.\n  for (const key of Object.keys(env)) {\n    if (/^path$/i.test(key)) env[key] = pathVal;\n  }\n  return env;\n};\nmodule.exports = setPATH;","map":{"version":3,"names":["resolve","dirname","require","isWindows","nodeGypPath","__dirname","setPATH","projectPath","env","delimiter","PATH","Object","keys","filter","p","test","map","split","reduce","set","concat","includes","join","pathArr","pp","push","pathVal","key","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/run-script/lib/set-path.js"],"sourcesContent":["const {resolve, dirname} = require('path')\nconst isWindows = require('./is-windows.js')\n// the path here is relative, even though it does not need to be\n// in order to make the posix tests pass in windows\nconst nodeGypPath = resolve(__dirname, '../lib/node-gyp-bin')\n\n// Windows typically calls its PATH environ 'Path', but this is not\n// guaranteed, nor is it guaranteed to be the only one.  Merge them\n// all together in the order they appear in the object.\nconst setPATH = (projectPath, env) => {\n  // not require('path').delimiter, because we fake this for testing\n  const delimiter = isWindows ? ';' : ':'\n  const PATH = Object.keys(env).filter(p => /^path$/i.test(p) && env[p])\n    .map(p => env[p].split(delimiter))\n    .reduce((set, p) => set.concat(p.filter(p => !set.includes(p))), [])\n    .join(delimiter)\n\n  const pathArr = []\n  // unshift the ./node_modules/.bin from every folder\n  // walk up until dirname() does nothing, at the root\n  // XXX should we specify a cwd that we don't go above?\n  let p = projectPath\n  let pp\n  do {\n    pathArr.push(resolve(p, 'node_modules', '.bin'))\n    pp = p\n    p = dirname(p)\n  } while (p !== pp)\n  pathArr.push(nodeGypPath, PATH)\n\n  const pathVal = pathArr.join(delimiter)\n\n  // XXX include the node-gyp-bin path somehow?  Probably better for\n  // npm or arborist or whoever to just provide that by putting it in\n  // the PATH environ, since that's preserved anyway.\n  for (const key of Object.keys(env)) {\n    if (/^path$/i.test(key))\n      env[key] = pathVal\n  }\n\n  return env\n}\n\nmodule.exports = setPATH\n"],"mappings":"AAAA,MAAM;EAACA,OAAO;EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1C,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC5C;AACA;AACA,MAAME,WAAW,GAAGJ,OAAO,CAACK,SAAS,EAAE,qBAAqB,CAAC;;AAE7D;AACA;AACA;AACA,MAAMC,OAAO,GAAGA,CAACC,WAAW,EAAEC,GAAG,KAAK;EACpC;EACA,MAAMC,SAAS,GAAGN,SAAS,GAAG,GAAG,GAAG,GAAG;EACvC,MAAMO,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACJ,GAAG,CAAC,CAACK,MAAM,CAACC,CAAC,IAAI,SAAS,CAACC,IAAI,CAACD,CAAC,CAAC,IAAIN,GAAG,CAACM,CAAC,CAAC,CAAC,CACnEE,GAAG,CAACF,CAAC,IAAIN,GAAG,CAACM,CAAC,CAAC,CAACG,KAAK,CAACR,SAAS,CAAC,CAAC,CACjCS,MAAM,CAAC,CAACC,GAAG,EAAEL,CAAC,KAAKK,GAAG,CAACC,MAAM,CAACN,CAAC,CAACD,MAAM,CAACC,CAAC,IAAI,CAACK,GAAG,CAACE,QAAQ,CAACP,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CACnEQ,IAAI,CAACb,SAAS,CAAC;EAElB,MAAMc,OAAO,GAAG,EAAE;EAClB;EACA;EACA;EACA,IAAIT,CAAC,GAAGP,WAAW;EACnB,IAAIiB,EAAE;EACN,GAAG;IACDD,OAAO,CAACE,IAAI,CAACzB,OAAO,CAACc,CAAC,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;IAChDU,EAAE,GAAGV,CAAC;IACNA,CAAC,GAAGb,OAAO,CAACa,CAAC,CAAC;EAChB,CAAC,QAAQA,CAAC,KAAKU,EAAE;EACjBD,OAAO,CAACE,IAAI,CAACrB,WAAW,EAAEM,IAAI,CAAC;EAE/B,MAAMgB,OAAO,GAAGH,OAAO,CAACD,IAAI,CAACb,SAAS,CAAC;;EAEvC;EACA;EACA;EACA,KAAK,MAAMkB,GAAG,IAAIhB,MAAM,CAACC,IAAI,CAACJ,GAAG,CAAC,EAAE;IAClC,IAAI,SAAS,CAACO,IAAI,CAACY,GAAG,CAAC,EACrBnB,GAAG,CAACmB,GAAG,CAAC,GAAGD,OAAO;EACtB;EAEA,OAAOlB,GAAG;AACZ,CAAC;AAEDoB,MAAM,CAACC,OAAO,GAAGvB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const depTypes = new Set(['dependencies', 'optionalDependencies', 'devDependencies', 'peerDependencies']);\n\n// sort alphabetically all types of deps for a given package\nconst orderDeps = content => {\n  for (const type of depTypes) {\n    if (content && content[type]) {\n      content[type] = Object.keys(content[type]).sort((a, b) => a.localeCompare(b, 'en')).reduce((res, key) => {\n        res[key] = content[type][key];\n        return res;\n      }, {});\n    }\n  }\n  return content;\n};\nconst updateDependencies = ({\n  content,\n  originalContent\n}) => {\n  const pkg = orderDeps({\n    ...content\n  });\n\n  // optionalDependencies don't need to be repeated in two places\n  if (pkg.dependencies) {\n    if (pkg.optionalDependencies) {\n      for (const name of Object.keys(pkg.optionalDependencies)) delete pkg.dependencies[name];\n    }\n  }\n  const result = {\n    ...originalContent\n  };\n\n  // loop through all types of dependencies and update package json pkg\n  for (const type of depTypes) {\n    if (pkg[type]) result[type] = pkg[type];\n\n    // prune empty type props from resulting object\n    const emptyDepType = pkg[type] && typeof pkg === 'object' && Object.keys(pkg[type]).length === 0;\n    if (emptyDepType) delete result[type];\n  }\n\n  // if original package.json had dep in peerDeps AND deps, preserve that.\n  const {\n    dependencies: origProd,\n    peerDependencies: origPeer\n  } = originalContent || {};\n  const {\n    peerDependencies: newPeer\n  } = result;\n  if (origProd && origPeer && newPeer) {\n    // we have original prod/peer deps, and new peer deps\n    // copy over any that were in both in the original\n    for (const name of Object.keys(origPeer)) {\n      if (origProd[name] !== undefined && newPeer[name] !== undefined) {\n        result.dependencies = result.dependencies || {};\n        result.dependencies[name] = newPeer[name];\n      }\n    }\n  }\n  return result;\n};\nupdateDependencies.knownKeys = depTypes;\nmodule.exports = updateDependencies;","map":{"version":3,"names":["depTypes","Set","orderDeps","content","type","Object","keys","sort","a","b","localeCompare","reduce","res","key","updateDependencies","originalContent","pkg","dependencies","optionalDependencies","name","result","emptyDepType","length","origProd","peerDependencies","origPeer","newPeer","undefined","knownKeys","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@npmcli/package-json/lib/update-dependencies.js"],"sourcesContent":["const depTypes = new Set([\n  'dependencies',\n  'optionalDependencies',\n  'devDependencies',\n  'peerDependencies',\n])\n\n// sort alphabetically all types of deps for a given package\nconst orderDeps = (content) => {\n  for (const type of depTypes) {\n    if (content && content[type]) {\n      content[type] = Object.keys(content[type])\n        .sort((a, b) => a.localeCompare(b, 'en'))\n        .reduce((res, key) => {\n          res[key] = content[type][key]\n          return res\n        }, {})\n    }\n  }\n  return content\n}\n\nconst updateDependencies = ({ content, originalContent }) => {\n  const pkg = orderDeps({\n    ...content,\n  })\n\n  // optionalDependencies don't need to be repeated in two places\n  if (pkg.dependencies) {\n    if (pkg.optionalDependencies) {\n      for (const name of Object.keys(pkg.optionalDependencies))\n        delete pkg.dependencies[name]\n    }\n  }\n\n  const result = { ...originalContent }\n\n  // loop through all types of dependencies and update package json pkg\n  for (const type of depTypes) {\n    if (pkg[type])\n      result[type] = pkg[type]\n\n    // prune empty type props from resulting object\n    const emptyDepType =\n      pkg[type]\n      && typeof pkg === 'object'\n      && Object.keys(pkg[type]).length === 0\n    if (emptyDepType)\n      delete result[type]\n  }\n\n  // if original package.json had dep in peerDeps AND deps, preserve that.\n  const { dependencies: origProd, peerDependencies: origPeer } =\n    originalContent || {}\n  const { peerDependencies: newPeer } = result\n  if (origProd && origPeer && newPeer) {\n    // we have original prod/peer deps, and new peer deps\n    // copy over any that were in both in the original\n    for (const name of Object.keys(origPeer)) {\n      if (origProd[name] !== undefined && newPeer[name] !== undefined) {\n        result.dependencies = result.dependencies || {}\n        result.dependencies[name] = newPeer[name]\n      }\n    }\n  }\n\n  return result\n}\n\nupdateDependencies.knownKeys = depTypes\n\nmodule.exports = updateDependencies\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,IAAIC,GAAG,CAAC,CACvB,cAAc,EACd,sBAAsB,EACtB,iBAAiB,EACjB,kBAAkB,CACnB,CAAC;;AAEF;AACA,MAAMC,SAAS,GAAIC,OAAO,IAAK;EAC7B,KAAK,MAAMC,IAAI,IAAIJ,QAAQ,EAAE;IAC3B,IAAIG,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC,EAAE;MAC5BD,OAAO,CAACC,IAAI,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACH,OAAO,CAACC,IAAI,CAAC,CAAC,CACvCG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,aAAa,CAACD,CAAC,EAAE,IAAI,CAAC,CAAC,CACxCE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;QACpBD,GAAG,CAACC,GAAG,CAAC,GAAGV,OAAO,CAACC,IAAI,CAAC,CAACS,GAAG,CAAC;QAC7B,OAAOD,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IACV;EACF;EACA,OAAOT,OAAO;AAChB,CAAC;AAED,MAAMW,kBAAkB,GAAGA,CAAC;EAAEX,OAAO;EAAEY;AAAgB,CAAC,KAAK;EAC3D,MAAMC,GAAG,GAAGd,SAAS,CAAC;IACpB,GAAGC;EACL,CAAC,CAAC;;EAEF;EACA,IAAIa,GAAG,CAACC,YAAY,EAAE;IACpB,IAAID,GAAG,CAACE,oBAAoB,EAAE;MAC5B,KAAK,MAAMC,IAAI,IAAId,MAAM,CAACC,IAAI,CAACU,GAAG,CAACE,oBAAoB,CAAC,EACtD,OAAOF,GAAG,CAACC,YAAY,CAACE,IAAI,CAAC;IACjC;EACF;EAEA,MAAMC,MAAM,GAAG;IAAE,GAAGL;EAAgB,CAAC;;EAErC;EACA,KAAK,MAAMX,IAAI,IAAIJ,QAAQ,EAAE;IAC3B,IAAIgB,GAAG,CAACZ,IAAI,CAAC,EACXgB,MAAM,CAAChB,IAAI,CAAC,GAAGY,GAAG,CAACZ,IAAI,CAAC;;IAE1B;IACA,MAAMiB,YAAY,GAChBL,GAAG,CAACZ,IAAI,CAAC,IACN,OAAOY,GAAG,KAAK,QAAQ,IACvBX,MAAM,CAACC,IAAI,CAACU,GAAG,CAACZ,IAAI,CAAC,CAAC,CAACkB,MAAM,KAAK,CAAC;IACxC,IAAID,YAAY,EACd,OAAOD,MAAM,CAAChB,IAAI,CAAC;EACvB;;EAEA;EACA,MAAM;IAAEa,YAAY,EAAEM,QAAQ;IAAEC,gBAAgB,EAAEC;EAAS,CAAC,GAC1DV,eAAe,IAAI,CAAC,CAAC;EACvB,MAAM;IAAES,gBAAgB,EAAEE;EAAQ,CAAC,GAAGN,MAAM;EAC5C,IAAIG,QAAQ,IAAIE,QAAQ,IAAIC,OAAO,EAAE;IACnC;IACA;IACA,KAAK,MAAMP,IAAI,IAAId,MAAM,CAACC,IAAI,CAACmB,QAAQ,CAAC,EAAE;MACxC,IAAIF,QAAQ,CAACJ,IAAI,CAAC,KAAKQ,SAAS,IAAID,OAAO,CAACP,IAAI,CAAC,KAAKQ,SAAS,EAAE;QAC/DP,MAAM,CAACH,YAAY,GAAGG,MAAM,CAACH,YAAY,IAAI,CAAC,CAAC;QAC/CG,MAAM,CAACH,YAAY,CAACE,IAAI,CAAC,GAAGO,OAAO,CAACP,IAAI,CAAC;MAC3C;IACF;EACF;EAEA,OAAOC,MAAM;AACf,CAAC;AAEDN,kBAAkB,CAACc,SAAS,GAAG5B,QAAQ;AAEvC6B,MAAM,CAACC,OAAO,GAAGhB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
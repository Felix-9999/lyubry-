{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n  read: read,\n  write: write\n};\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar Key = require('../key');\nvar errors = require('../errors');\nfunction read(buf, options) {\n  var lines = buf.toString('ascii').split(/[\\r\\n]+/);\n  var found = false;\n  var parts;\n  var si = 0;\n  while (si < lines.length) {\n    parts = splitHeader(lines[si++]);\n    if (parts && parts[0].toLowerCase() === 'putty-user-key-file-2') {\n      found = true;\n      break;\n    }\n  }\n  if (!found) {\n    throw new Error('No PuTTY format first line found');\n  }\n  var alg = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'encryption');\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'comment');\n  var comment = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'public-lines');\n  var publicLines = parseInt(parts[1], 10);\n  if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {\n    throw new Error('Invalid public-lines count');\n  }\n  var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(''), 'base64');\n  var keyType = rfc4253.algToKeyType(alg);\n  var key = rfc4253.read(publicBuf);\n  if (key.type !== keyType) {\n    throw new Error('Outer key algorithm mismatch');\n  }\n  key.comment = comment;\n  return key;\n}\nfunction splitHeader(line) {\n  var idx = line.indexOf(':');\n  if (idx === -1) return null;\n  var header = line.slice(0, idx);\n  ++idx;\n  while (line[idx] === ' ') ++idx;\n  var rest = line.slice(idx);\n  return [header, rest];\n}\nfunction write(key, options) {\n  assert.object(key);\n  if (!Key.isKey(key)) throw new Error('Must be a public key');\n  var alg = rfc4253.keyTypeToAlg(key);\n  var buf = rfc4253.write(key);\n  var comment = key.comment || '';\n  var b64 = buf.toString('base64');\n  var lines = wrap(b64, 64);\n  lines.unshift('Public-Lines: ' + lines.length);\n  lines.unshift('Comment: ' + comment);\n  lines.unshift('Encryption: none');\n  lines.unshift('PuTTY-User-Key-File-2: ' + alg);\n  return Buffer.from(lines.join('\\n') + '\\n');\n}\nfunction wrap(txt, len) {\n  var lines = [];\n  var pos = 0;\n  while (pos < txt.length) {\n    lines.push(txt.slice(pos, pos + 64));\n    pos += 64;\n  }\n  return lines;\n}","map":{"version":3,"names":["module","exports","read","write","assert","require","Buffer","rfc4253","Key","errors","buf","options","lines","toString","split","found","parts","si","length","splitHeader","toLowerCase","Error","alg","equal","comment","publicLines","parseInt","isFinite","publicBuf","from","slice","join","keyType","algToKeyType","key","type","line","idx","indexOf","header","rest","object","isKey","keyTypeToAlg","b64","wrap","unshift","txt","len","pos","push"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/sshpk/lib/formats/putty.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar Key = require('../key');\n\nvar errors = require('../errors');\n\nfunction read(buf, options) {\n\tvar lines = buf.toString('ascii').split(/[\\r\\n]+/);\n\tvar found = false;\n\tvar parts;\n\tvar si = 0;\n\twhile (si < lines.length) {\n\t\tparts = splitHeader(lines[si++]);\n\t\tif (parts &&\n\t\t    parts[0].toLowerCase() === 'putty-user-key-file-2') {\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!found) {\n\t\tthrow (new Error('No PuTTY format first line found'));\n\t}\n\tvar alg = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'encryption');\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'comment');\n\tvar comment = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'public-lines');\n\tvar publicLines = parseInt(parts[1], 10);\n\tif (!isFinite(publicLines) || publicLines < 0 ||\n\t    publicLines > lines.length) {\n\t\tthrow (new Error('Invalid public-lines count'));\n\t}\n\n\tvar publicBuf = Buffer.from(\n\t    lines.slice(si, si + publicLines).join(''), 'base64');\n\tvar keyType = rfc4253.algToKeyType(alg);\n\tvar key = rfc4253.read(publicBuf);\n\tif (key.type !== keyType) {\n\t\tthrow (new Error('Outer key algorithm mismatch'));\n\t}\n\tkey.comment = comment;\n\treturn (key);\n}\n\nfunction splitHeader(line) {\n\tvar idx = line.indexOf(':');\n\tif (idx === -1)\n\t\treturn (null);\n\tvar header = line.slice(0, idx);\n\t++idx;\n\twhile (line[idx] === ' ')\n\t\t++idx;\n\tvar rest = line.slice(idx);\n\treturn ([header, rest]);\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tvar buf = rfc4253.write(key);\n\tvar comment = key.comment || '';\n\n\tvar b64 = buf.toString('base64');\n\tvar lines = wrap(b64, 64);\n\n\tlines.unshift('Public-Lines: ' + lines.length);\n\tlines.unshift('Comment: ' + comment);\n\tlines.unshift('Encryption: none');\n\tlines.unshift('PuTTY-User-Key-File-2: ' + alg);\n\n\treturn (Buffer.from(lines.join('\\n') + '\\n'));\n}\n\nfunction wrap(txt, len) {\n\tvar lines = [];\n\tvar pos = 0;\n\twhile (pos < txt.length) {\n\t\tlines.push(txt.slice(pos, pos + 64));\n\t\tpos += 64;\n\t}\n\treturn (lines);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const calculateDelta = (now, date) => Math.round(Math.abs(now - date) / 1000);\nexport default function relativeDateFactory(translations) {\n  return function relativeDate(date, now = new Date()) {\n    if (!(date instanceof Date)) {\n      date = new Date(date);\n    }\n    let delta = null;\n    const minute = 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    const week = day * 7;\n    const month = day * 30;\n    const year = day * 365;\n    delta = calculateDelta(now, date);\n    if (delta > day && delta < week) {\n      date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n      delta = calculateDelta(now, date);\n    }\n    const translate = (translatePhrase, timeValue) => {\n      let key;\n      if (translatePhrase === 'justNow') {\n        key = translatePhrase;\n      } else if (now >= date) {\n        key = `${translatePhrase}Ago`;\n      } else {\n        key = `${translatePhrase}FromNow`;\n      }\n      const translation = translations[key];\n      if (typeof translation === 'function') {\n        return translation(timeValue);\n      }\n      return translation.replace('{{time}}', timeValue);\n    };\n    switch (false) {\n      case !(delta < 30):\n        return translate('justNow');\n      case !(delta < minute):\n        return translate('seconds', delta);\n      case !(delta < 2 * minute):\n        return translate('aMinute');\n      case !(delta < hour):\n        return translate('minutes', Math.floor(delta / minute));\n      case Math.floor(delta / hour) !== 1:\n        return translate('anHour');\n      case !(delta < day):\n        return translate('hours', Math.floor(delta / hour));\n      case !(delta < day * 2):\n        return translate('aDay');\n      case !(delta < week):\n        return translate('days', Math.floor(delta / day));\n      case Math.floor(delta / week) !== 1:\n        return translate('aWeek');\n      case !(delta < month):\n        return translate('weeks', Math.floor(delta / week));\n      case Math.floor(delta / month) !== 1:\n        return translate('aMonth');\n      case !(delta < year):\n        return translate('months', Math.floor(delta / month));\n      case Math.floor(delta / year) !== 1:\n        return translate('aYear');\n      default:\n        return translate('overAYear');\n    }\n  };\n}","map":{"version":3,"names":["calculateDelta","now","date","Math","round","abs","relativeDateFactory","translations","relativeDate","Date","delta","minute","hour","day","week","month","year","getFullYear","getMonth","getDate","translate","translatePhrase","timeValue","key","translation","replace","floor"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/tiny-relative-date/src/factory.js"],"sourcesContent":["const calculateDelta = (now, date) => Math.round(Math.abs(now - date) / 1000)\n\nexport default function relativeDateFactory (translations) {\n  return function relativeDate (date, now = new Date()) {\n    if (!(date instanceof Date)) {\n      date = new Date(date)\n    }\n\n    let delta = null\n\n    const minute = 60\n    const hour = minute * 60\n    const day = hour * 24\n    const week = day * 7\n    const month = day * 30\n    const year = day * 365\n\n    delta = calculateDelta(now, date)\n\n    if (delta > day && delta < week) {\n      date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0)\n      delta = calculateDelta(now, date)\n    }\n\n    const translate = (translatePhrase, timeValue) => {\n      let key\n\n      if (translatePhrase === 'justNow') {\n        key = translatePhrase\n      } else if (now >= date) {\n        key = `${translatePhrase}Ago`\n      } else {\n        key = `${translatePhrase}FromNow`\n      }\n\n      const translation = translations[key]\n\n      if (typeof translation === 'function') {\n        return translation(timeValue)\n      }\n\n      return translation.replace('{{time}}', timeValue)\n    }\n\n    switch (false) {\n      case !(delta < 30):\n        return translate('justNow')\n\n      case !(delta < minute):\n        return translate('seconds', delta)\n\n      case !(delta < 2 * minute):\n        return translate('aMinute')\n\n      case !(delta < hour):\n        return translate('minutes', Math.floor(delta / minute))\n\n      case Math.floor(delta / hour) !== 1:\n        return translate('anHour')\n\n      case !(delta < day):\n        return translate('hours', Math.floor(delta / hour))\n\n      case !(delta < day * 2):\n        return translate('aDay')\n\n      case !(delta < week):\n        return translate('days', Math.floor(delta / day))\n\n      case Math.floor(delta / week) !== 1:\n        return translate('aWeek')\n\n      case !(delta < month):\n        return translate('weeks', Math.floor(delta / week))\n\n      case Math.floor(delta / month) !== 1:\n        return translate('aMonth')\n\n      case !(delta < year):\n        return translate('months', Math.floor(delta / month))\n\n      case Math.floor(delta / year) !== 1:\n        return translate('aYear')\n\n      default:\n        return translate('overAYear')\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"const {\n  resolve,\n  basename\n} = require('path');\nconst util = require('util');\nconst fs = require('fs');\nconst {\n  unlink\n} = fs.promises || {\n  unlink: util.promisify(fs.unlink)\n};\nconst Arborist = require('@npmcli/arborist');\nconst log = require('npmlog');\nconst BaseCommand = require('./base-command.js');\nclass Shrinkwrap extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Lock down dependency versions for publication';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'shrinkwrap';\n  }\n  exec(args, cb) {\n    this.shrinkwrap().then(() => cb()).catch(cb);\n  }\n  async shrinkwrap() {\n    // if has a npm-shrinkwrap.json, nothing to do\n    // if has a package-lock.json, rename to npm-shrinkwrap.json\n    // if has neither, load the actual tree and save that as npm-shrinkwrap.json\n    // in all cases, re-cast to current lockfile version\n    //\n    // loadVirtual, fall back to loadActual\n    // rename shrinkwrap file type, and tree.meta.save()\n    if (this.npm.config.get('global')) {\n      const er = new Error('`npm shrinkwrap` does not work for global packages');\n      er.code = 'ESHRINKWRAPGLOBAL';\n      throw er;\n    }\n    const path = this.npm.prefix;\n    const sw = resolve(path, 'npm-shrinkwrap.json');\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path\n    });\n    const tree = await arb.loadVirtual().catch(() => arb.loadActual());\n    const {\n      meta\n    } = tree;\n    const newFile = meta.hiddenLockfile || !meta.loadedFromDisk;\n    const oldFilename = meta.filename;\n    const notSW = !newFile && basename(oldFilename) !== 'npm-shrinkwrap.json';\n    meta.hiddenLockfile = false;\n    meta.filename = sw;\n    await meta.save();\n    if (newFile) log.notice('', 'created a lockfile as npm-shrinkwrap.json');else if (notSW) {\n      await unlink(oldFilename);\n      log.notice('', 'package-lock.json has been renamed to npm-shrinkwrap.json');\n    } else if (meta.originalLockfileVersion !== this.npm.lockfileVersion) log.notice('', `npm-shrinkwrap.json updated to version ${this.npm.lockfileVersion}`);else log.notice('', 'npm-shrinkwrap.json up to date');\n  }\n}\nmodule.exports = Shrinkwrap;","map":{"version":3,"names":["resolve","basename","require","util","fs","unlink","promises","promisify","Arborist","log","BaseCommand","Shrinkwrap","description","name","exec","args","cb","shrinkwrap","then","catch","npm","config","get","er","Error","code","path","prefix","sw","arb","flatOptions","tree","loadVirtual","loadActual","meta","newFile","hiddenLockfile","loadedFromDisk","oldFilename","filename","notSW","save","notice","originalLockfileVersion","lockfileVersion","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/shrinkwrap.js"],"sourcesContent":["const { resolve, basename } = require('path')\nconst util = require('util')\nconst fs = require('fs')\nconst { unlink } = fs.promises || { unlink: util.promisify(fs.unlink) }\nconst Arborist = require('@npmcli/arborist')\nconst log = require('npmlog')\n\nconst BaseCommand = require('./base-command.js')\nclass Shrinkwrap extends BaseCommand {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Lock down dependency versions for publication'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'shrinkwrap'\n  }\n\n  exec (args, cb) {\n    this.shrinkwrap().then(() => cb()).catch(cb)\n  }\n\n  async shrinkwrap () {\n    // if has a npm-shrinkwrap.json, nothing to do\n    // if has a package-lock.json, rename to npm-shrinkwrap.json\n    // if has neither, load the actual tree and save that as npm-shrinkwrap.json\n    // in all cases, re-cast to current lockfile version\n    //\n    // loadVirtual, fall back to loadActual\n    // rename shrinkwrap file type, and tree.meta.save()\n    if (this.npm.config.get('global')) {\n      const er = new Error('`npm shrinkwrap` does not work for global packages')\n      er.code = 'ESHRINKWRAPGLOBAL'\n      throw er\n    }\n\n    const path = this.npm.prefix\n    const sw = resolve(path, 'npm-shrinkwrap.json')\n    const arb = new Arborist({ ...this.npm.flatOptions, path })\n    const tree = await arb.loadVirtual().catch(() => arb.loadActual())\n    const { meta } = tree\n    const newFile = meta.hiddenLockfile || !meta.loadedFromDisk\n    const oldFilename = meta.filename\n    const notSW = !newFile && basename(oldFilename) !== 'npm-shrinkwrap.json'\n\n    meta.hiddenLockfile = false\n    meta.filename = sw\n    await meta.save()\n\n    if (newFile)\n      log.notice('', 'created a lockfile as npm-shrinkwrap.json')\n    else if (notSW) {\n      await unlink(oldFilename)\n      log.notice('', 'package-lock.json has been renamed to npm-shrinkwrap.json')\n    } else if (meta.originalLockfileVersion !== this.npm.lockfileVersion)\n      log.notice('', `npm-shrinkwrap.json updated to version ${this.npm.lockfileVersion}`)\n    else\n      log.notice('', 'npm-shrinkwrap.json up to date')\n  }\n}\nmodule.exports = Shrinkwrap\n"],"mappings":"AAAA,MAAM;EAAEA,OAAO;EAAEC;AAAS,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC7C,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,MAAM;EAAEG;AAAO,CAAC,GAAGD,EAAE,CAACE,QAAQ,IAAI;EAAED,MAAM,EAAEF,IAAI,CAACI,SAAS,CAACH,EAAE,CAACC,MAAM;AAAE,CAAC;AACvE,MAAMG,QAAQ,GAAGN,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAMO,GAAG,GAAGP,OAAO,CAAC,QAAQ,CAAC;AAE7B,MAAMQ,WAAW,GAAGR,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMS,UAAU,SAASD,WAAW,CAAC;EACnC;EACA,WAAWE,WAAWA,CAAA,EAAI;IACxB,OAAO,+CAA+C;EACxD;;EAEA;EACA,WAAWC,IAAIA,CAAA,EAAI;IACjB,OAAO,YAAY;EACrB;EAEAC,IAAIA,CAAEC,IAAI,EAAEC,EAAE,EAAE;IACd,IAAI,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,MAAMF,EAAE,CAAC,CAAC,CAAC,CAACG,KAAK,CAACH,EAAE,CAAC;EAC9C;EAEA,MAAMC,UAAUA,CAAA,EAAI;IAClB;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACG,GAAG,CAACC,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC,EAAE;MACjC,MAAMC,EAAE,GAAG,IAAIC,KAAK,CAAC,oDAAoD,CAAC;MAC1ED,EAAE,CAACE,IAAI,GAAG,mBAAmB;MAC7B,MAAMF,EAAE;IACV;IAEA,MAAMG,IAAI,GAAG,IAAI,CAACN,GAAG,CAACO,MAAM;IAC5B,MAAMC,EAAE,GAAG5B,OAAO,CAAC0B,IAAI,EAAE,qBAAqB,CAAC;IAC/C,MAAMG,GAAG,GAAG,IAAIrB,QAAQ,CAAC;MAAE,GAAG,IAAI,CAACY,GAAG,CAACU,WAAW;MAAEJ;IAAK,CAAC,CAAC;IAC3D,MAAMK,IAAI,GAAG,MAAMF,GAAG,CAACG,WAAW,CAAC,CAAC,CAACb,KAAK,CAAC,MAAMU,GAAG,CAACI,UAAU,CAAC,CAAC,CAAC;IAClE,MAAM;MAAEC;IAAK,CAAC,GAAGH,IAAI;IACrB,MAAMI,OAAO,GAAGD,IAAI,CAACE,cAAc,IAAI,CAACF,IAAI,CAACG,cAAc;IAC3D,MAAMC,WAAW,GAAGJ,IAAI,CAACK,QAAQ;IACjC,MAAMC,KAAK,GAAG,CAACL,OAAO,IAAIlC,QAAQ,CAACqC,WAAW,CAAC,KAAK,qBAAqB;IAEzEJ,IAAI,CAACE,cAAc,GAAG,KAAK;IAC3BF,IAAI,CAACK,QAAQ,GAAGX,EAAE;IAClB,MAAMM,IAAI,CAACO,IAAI,CAAC,CAAC;IAEjB,IAAIN,OAAO,EACT1B,GAAG,CAACiC,MAAM,CAAC,EAAE,EAAE,2CAA2C,CAAC,MACxD,IAAIF,KAAK,EAAE;MACd,MAAMnC,MAAM,CAACiC,WAAW,CAAC;MACzB7B,GAAG,CAACiC,MAAM,CAAC,EAAE,EAAE,2DAA2D,CAAC;IAC7E,CAAC,MAAM,IAAIR,IAAI,CAACS,uBAAuB,KAAK,IAAI,CAACvB,GAAG,CAACwB,eAAe,EAClEnC,GAAG,CAACiC,MAAM,CAAC,EAAE,EAAE,0CAA0C,IAAI,CAACtB,GAAG,CAACwB,eAAe,EAAE,CAAC,MAEpFnC,GAAG,CAACiC,MAAM,CAAC,EAAE,EAAE,gCAAgC,CAAC;EACpD;AACF;AACAG,MAAM,CAACC,OAAO,GAAGnC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
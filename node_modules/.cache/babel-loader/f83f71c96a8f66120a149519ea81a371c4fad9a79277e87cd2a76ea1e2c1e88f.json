{"ast":null,"code":"const hasIntl = typeof Intl === 'object' && !!Intl;\nconst Collator = hasIntl && Intl.Collator;\nconst cache = new Map();\nconst collatorCompare = (locale, opts) => {\n  const collator = new Collator(locale, opts);\n  return (a, b) => collator.compare(a, b);\n};\nconst localeCompare = (locale, opts) => (a, b) => a.localeCompare(b, locale, opts);\nconst knownOptions = ['sensitivity', 'numeric', 'ignorePunctuation', 'caseFirst'];\nconst {\n  hasOwnProperty\n} = Object.prototype;\nmodule.exports = (locale, options = {}) => {\n  if (!locale || typeof locale !== 'string') throw new TypeError('locale required');\n  const opts = knownOptions.reduce((opts, k) => {\n    if (hasOwnProperty.call(options, k)) {\n      opts[k] = options[k];\n    }\n    return opts;\n  }, {});\n  const key = `${locale}\\n${JSON.stringify(opts)}`;\n  if (cache.has(key)) return cache.get(key);\n  const compare = hasIntl ? collatorCompare(locale, opts) : localeCompare(locale, opts);\n  cache.set(key, compare);\n  return compare;\n};","map":{"version":3,"names":["hasIntl","Intl","Collator","cache","Map","collatorCompare","locale","opts","collator","a","b","compare","localeCompare","knownOptions","hasOwnProperty","Object","prototype","module","exports","options","TypeError","reduce","k","call","key","JSON","stringify","has","get","set"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/@isaacs/string-locale-compare/index.js"],"sourcesContent":["const hasIntl = typeof Intl === 'object' && !!Intl\nconst Collator = hasIntl && Intl.Collator\nconst cache = new Map()\n\nconst collatorCompare = (locale, opts) => {\n  const collator = new Collator(locale, opts)\n  return (a, b) => collator.compare(a, b)\n}\n\nconst localeCompare = (locale, opts) => (a, b) => a.localeCompare(b, locale, opts)\n\nconst knownOptions = [\n  'sensitivity',\n  'numeric',\n  'ignorePunctuation',\n  'caseFirst',\n]\n\nconst { hasOwnProperty } = Object.prototype\n\nmodule.exports = (locale, options = {}) => {\n  if (!locale || typeof locale !== 'string')\n    throw new TypeError('locale required')\n\n  const opts = knownOptions.reduce((opts, k) => {\n    if (hasOwnProperty.call(options, k)) {\n      opts[k] = options[k]\n    }\n    return opts\n  }, {})\n  const key = `${locale}\\n${JSON.stringify(opts)}`\n\n  if (cache.has(key))\n    return cache.get(key)\n\n  const compare = hasIntl\n    ? collatorCompare(locale, opts)\n    : localeCompare(locale, opts)\n  cache.set(key, compare)\n\n  return compare\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,OAAOC,IAAI,KAAK,QAAQ,IAAI,CAAC,CAACA,IAAI;AAClD,MAAMC,QAAQ,GAAGF,OAAO,IAAIC,IAAI,CAACC,QAAQ;AACzC,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;AAEvB,MAAMC,eAAe,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;EACxC,MAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACI,MAAM,EAAEC,IAAI,CAAC;EAC3C,OAAO,CAACE,CAAC,EAAEC,CAAC,KAAKF,QAAQ,CAACG,OAAO,CAACF,CAAC,EAAEC,CAAC,CAAC;AACzC,CAAC;AAED,MAAME,aAAa,GAAGA,CAACN,MAAM,EAAEC,IAAI,KAAK,CAACE,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACG,aAAa,CAACF,CAAC,EAAEJ,MAAM,EAAEC,IAAI,CAAC;AAElF,MAAMM,YAAY,GAAG,CACnB,aAAa,EACb,SAAS,EACT,mBAAmB,EACnB,WAAW,CACZ;AAED,MAAM;EAAEC;AAAe,CAAC,GAAGC,MAAM,CAACC,SAAS;AAE3CC,MAAM,CAACC,OAAO,GAAG,CAACZ,MAAM,EAAEa,OAAO,GAAG,CAAC,CAAC,KAAK;EACzC,IAAI,CAACb,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EACvC,MAAM,IAAIc,SAAS,CAAC,iBAAiB,CAAC;EAExC,MAAMb,IAAI,GAAGM,YAAY,CAACQ,MAAM,CAAC,CAACd,IAAI,EAAEe,CAAC,KAAK;IAC5C,IAAIR,cAAc,CAACS,IAAI,CAACJ,OAAO,EAAEG,CAAC,CAAC,EAAE;MACnCf,IAAI,CAACe,CAAC,CAAC,GAAGH,OAAO,CAACG,CAAC,CAAC;IACtB;IACA,OAAOf,IAAI;EACb,CAAC,EAAE,CAAC,CAAC,CAAC;EACN,MAAMiB,GAAG,GAAG,GAAGlB,MAAM,KAAKmB,IAAI,CAACC,SAAS,CAACnB,IAAI,CAAC,EAAE;EAEhD,IAAIJ,KAAK,CAACwB,GAAG,CAACH,GAAG,CAAC,EAChB,OAAOrB,KAAK,CAACyB,GAAG,CAACJ,GAAG,CAAC;EAEvB,MAAMb,OAAO,GAAGX,OAAO,GACnBK,eAAe,CAACC,MAAM,EAAEC,IAAI,CAAC,GAC7BK,aAAa,CAACN,MAAM,EAAEC,IAAI,CAAC;EAC/BJ,KAAK,CAAC0B,GAAG,CAACL,GAAG,EAAEb,OAAO,CAAC;EAEvB,OAAOA,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
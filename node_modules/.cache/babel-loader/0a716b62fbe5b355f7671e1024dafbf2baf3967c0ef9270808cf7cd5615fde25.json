{"ast":null,"code":"const pacote = require('pacote');\nconst formatDiff = require('./lib/format-diff.js');\nconst getTarball = require('./lib/tarball.js');\nconst untar = require('./lib/untar.js');\nconst argsError = () => Object.assign(new TypeError('libnpmdiff needs two arguments to compare'), {\n  code: 'EDIFFARGS'\n});\nconst diff = async (specs, opts = {}) => {\n  if (specs.length !== 2) throw argsError();\n  const [aManifest, bManifest] = await Promise.all(specs.map(spec => pacote.manifest(spec, opts)));\n  const versions = {\n    a: aManifest.version,\n    b: bManifest.version\n  };\n\n  // fetches tarball using pacote\n  const [a, b] = await Promise.all([getTarball(aManifest, opts), getTarball(bManifest, opts)]);\n\n  // read all files\n  // populates `files` and `refs`\n  const {\n    files,\n    refs\n  } = await untar([{\n    prefix: 'a/',\n    item: a\n  }, {\n    prefix: 'b/',\n    item: b\n  }], opts);\n  return formatDiff({\n    files,\n    opts,\n    refs,\n    versions\n  });\n};\nmodule.exports = diff;","map":{"version":3,"names":["pacote","require","formatDiff","getTarball","untar","argsError","Object","assign","TypeError","code","diff","specs","opts","length","aManifest","bManifest","Promise","all","map","spec","manifest","versions","a","version","b","files","refs","prefix","item","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmdiff/index.js"],"sourcesContent":["const pacote = require('pacote')\n\nconst formatDiff = require('./lib/format-diff.js')\nconst getTarball = require('./lib/tarball.js')\nconst untar = require('./lib/untar.js')\n\nconst argsError = () =>\n  Object.assign(\n    new TypeError('libnpmdiff needs two arguments to compare'),\n    { code: 'EDIFFARGS' }\n  )\nconst diff = async (specs, opts = {}) => {\n  if (specs.length !== 2)\n    throw argsError()\n\n  const [\n    aManifest,\n    bManifest,\n  ] =\n    await Promise.all(specs.map(spec => pacote.manifest(spec, opts)))\n\n  const versions = {\n    a: aManifest.version,\n    b: bManifest.version,\n  }\n\n  // fetches tarball using pacote\n  const [a, b] = await Promise.all([\n    getTarball(aManifest, opts),\n    getTarball(bManifest, opts),\n  ])\n\n  // read all files\n  // populates `files` and `refs`\n  const {\n    files,\n    refs,\n  } = await untar([\n    {\n      prefix: 'a/',\n      item: a,\n    },\n    {\n      prefix: 'b/',\n      item: b,\n    },\n  ], opts)\n\n  return formatDiff({\n    files,\n    opts,\n    refs,\n    versions,\n  })\n}\n\nmodule.exports = diff\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAMC,UAAU,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAME,UAAU,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC9C,MAAMG,KAAK,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAEvC,MAAMI,SAAS,GAAGA,CAAA,KAChBC,MAAM,CAACC,MAAM,CACX,IAAIC,SAAS,CAAC,2CAA2C,CAAC,EAC1D;EAAEC,IAAI,EAAE;AAAY,CACtB,CAAC;AACH,MAAMC,IAAI,GAAG,MAAAA,CAAOC,KAAK,EAAEC,IAAI,GAAG,CAAC,CAAC,KAAK;EACvC,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EACpB,MAAMR,SAAS,CAAC,CAAC;EAEnB,MAAM,CACJS,SAAS,EACTC,SAAS,CACV,GACC,MAAMC,OAAO,CAACC,GAAG,CAACN,KAAK,CAACO,GAAG,CAACC,IAAI,IAAInB,MAAM,CAACoB,QAAQ,CAACD,IAAI,EAAEP,IAAI,CAAC,CAAC,CAAC;EAEnE,MAAMS,QAAQ,GAAG;IACfC,CAAC,EAAER,SAAS,CAACS,OAAO;IACpBC,CAAC,EAAET,SAAS,CAACQ;EACf,CAAC;;EAED;EACA,MAAM,CAACD,CAAC,EAAEE,CAAC,CAAC,GAAG,MAAMR,OAAO,CAACC,GAAG,CAAC,CAC/Bd,UAAU,CAACW,SAAS,EAAEF,IAAI,CAAC,EAC3BT,UAAU,CAACY,SAAS,EAAEH,IAAI,CAAC,CAC5B,CAAC;;EAEF;EACA;EACA,MAAM;IACJa,KAAK;IACLC;EACF,CAAC,GAAG,MAAMtB,KAAK,CAAC,CACd;IACEuB,MAAM,EAAE,IAAI;IACZC,IAAI,EAAEN;EACR,CAAC,EACD;IACEK,MAAM,EAAE,IAAI;IACZC,IAAI,EAAEJ;EACR,CAAC,CACF,EAAEZ,IAAI,CAAC;EAER,OAAOV,UAAU,CAAC;IAChBuB,KAAK;IACLb,IAAI;IACJc,IAAI;IACJL;EACF,CAAC,CAAC;AACJ,CAAC;AAEDQ,MAAM,CAACC,OAAO,GAAGpB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
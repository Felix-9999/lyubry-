{"ast":null,"code":"const flatten = require('./flatten.js');\nconst definitions = require('./definitions.js');\nconst describeAll = require('./describe-all.js');\n\n// aliases where they get expanded into a completely different thing\n// these are NOT supported in the environment or npmrc files, only\n// expanded on the CLI.\n// TODO: when we switch off of nopt, use an arg parser that supports\n// more reasonable aliasing and short opts right in the definitions set.\nconst shorthands = {\n  'enjoy-by': ['--before'],\n  d: ['--loglevel', 'info'],\n  dd: ['--loglevel', 'verbose'],\n  ddd: ['--loglevel', 'silly'],\n  quiet: ['--loglevel', 'warn'],\n  q: ['--loglevel', 'warn'],\n  s: ['--loglevel', 'silent'],\n  silent: ['--loglevel', 'silent'],\n  verbose: ['--loglevel', 'verbose'],\n  desc: ['--description'],\n  help: ['--usage'],\n  local: ['--no-global'],\n  n: ['--no-yes'],\n  no: ['--no-yes'],\n  porcelain: ['--parseable'],\n  readonly: ['--read-only'],\n  reg: ['--registry']\n};\nfor (const [key, {\n  short\n}] of Object.entries(definitions)) {\n  if (!short) continue;\n  // can be either an array or string\n  for (const s of [].concat(short)) shorthands[s] = [`--${key}`];\n}\nmodule.exports = {\n  get defaults() {\n    // NB: 'default' is a reserved word\n    return Object.entries(definitions).map(([key, {\n      default: def\n    }]) => {\n      return [key, def];\n    }).reduce((defaults, [key, def]) => {\n      defaults[key] = def;\n      return defaults;\n    }, {});\n  },\n  definitions,\n  flatten,\n  shorthands,\n  describeAll\n};","map":{"version":3,"names":["flatten","require","definitions","describeAll","shorthands","d","dd","ddd","quiet","q","s","silent","verbose","desc","help","local","n","no","porcelain","readonly","reg","key","short","Object","entries","concat","module","exports","defaults","map","default","def","reduce"],"sources":["C:/Users/Felo/node_modules/npm/lib/utils/config/index.js"],"sourcesContent":["const flatten = require('./flatten.js')\nconst definitions = require('./definitions.js')\nconst describeAll = require('./describe-all.js')\n\n// aliases where they get expanded into a completely different thing\n// these are NOT supported in the environment or npmrc files, only\n// expanded on the CLI.\n// TODO: when we switch off of nopt, use an arg parser that supports\n// more reasonable aliasing and short opts right in the definitions set.\nconst shorthands = {\n  'enjoy-by': ['--before'],\n  d: ['--loglevel', 'info'],\n  dd: ['--loglevel', 'verbose'],\n  ddd: ['--loglevel', 'silly'],\n  quiet: ['--loglevel', 'warn'],\n  q: ['--loglevel', 'warn'],\n  s: ['--loglevel', 'silent'],\n  silent: ['--loglevel', 'silent'],\n  verbose: ['--loglevel', 'verbose'],\n  desc: ['--description'],\n  help: ['--usage'],\n  local: ['--no-global'],\n  n: ['--no-yes'],\n  no: ['--no-yes'],\n  porcelain: ['--parseable'],\n  readonly: ['--read-only'],\n  reg: ['--registry'],\n}\n\nfor (const [key, {short}] of Object.entries(definitions)) {\n  if (!short)\n    continue\n  // can be either an array or string\n  for (const s of [].concat(short))\n    shorthands[s] = [`--${key}`]\n}\n\nmodule.exports = {\n  get defaults () {\n    // NB: 'default' is a reserved word\n    return Object.entries(definitions).map(([key, { default: def }]) => {\n      return [key, def]\n    }).reduce((defaults, [key, def]) => {\n      defaults[key] = def\n      return defaults\n    }, {})\n  },\n  definitions,\n  flatten,\n  shorthands,\n  describeAll,\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AACvC,MAAMC,WAAW,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC/C,MAAME,WAAW,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA,MAAMG,UAAU,GAAG;EACjB,UAAU,EAAE,CAAC,UAAU,CAAC;EACxBC,CAAC,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC;EACzBC,EAAE,EAAE,CAAC,YAAY,EAAE,SAAS,CAAC;EAC7BC,GAAG,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC;EAC5BC,KAAK,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC;EAC7BC,CAAC,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC;EACzBC,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC;EAC3BC,MAAM,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC;EAChCC,OAAO,EAAE,CAAC,YAAY,EAAE,SAAS,CAAC;EAClCC,IAAI,EAAE,CAAC,eAAe,CAAC;EACvBC,IAAI,EAAE,CAAC,SAAS,CAAC;EACjBC,KAAK,EAAE,CAAC,aAAa,CAAC;EACtBC,CAAC,EAAE,CAAC,UAAU,CAAC;EACfC,EAAE,EAAE,CAAC,UAAU,CAAC;EAChBC,SAAS,EAAE,CAAC,aAAa,CAAC;EAC1BC,QAAQ,EAAE,CAAC,aAAa,CAAC;EACzBC,GAAG,EAAE,CAAC,YAAY;AACpB,CAAC;AAED,KAAK,MAAM,CAACC,GAAG,EAAE;EAACC;AAAK,CAAC,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACtB,WAAW,CAAC,EAAE;EACxD,IAAI,CAACoB,KAAK,EACR;EACF;EACA,KAAK,MAAMZ,CAAC,IAAI,EAAE,CAACe,MAAM,CAACH,KAAK,CAAC,EAC9BlB,UAAU,CAACM,CAAC,CAAC,GAAG,CAAC,KAAKW,GAAG,EAAE,CAAC;AAChC;AAEAK,MAAM,CAACC,OAAO,GAAG;EACf,IAAIC,QAAQA,CAAA,EAAI;IACd;IACA,OAAOL,MAAM,CAACC,OAAO,CAACtB,WAAW,CAAC,CAAC2B,GAAG,CAAC,CAAC,CAACR,GAAG,EAAE;MAAES,OAAO,EAAEC;IAAI,CAAC,CAAC,KAAK;MAClE,OAAO,CAACV,GAAG,EAAEU,GAAG,CAAC;IACnB,CAAC,CAAC,CAACC,MAAM,CAAC,CAACJ,QAAQ,EAAE,CAACP,GAAG,EAAEU,GAAG,CAAC,KAAK;MAClCH,QAAQ,CAACP,GAAG,CAAC,GAAGU,GAAG;MACnB,OAAOH,QAAQ;IACjB,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC;EACD1B,WAAW;EACXF,OAAO;EACPI,UAAU;EACVD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
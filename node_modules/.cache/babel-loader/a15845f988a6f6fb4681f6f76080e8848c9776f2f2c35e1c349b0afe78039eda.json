{"ast":null,"code":"const util = require('util');\nconst Arborist = require('@npmcli/arborist');\nconst rimraf = util.promisify(require('rimraf'));\nconst reifyFinish = require('./utils/reify-finish.js');\nconst runScript = require('@npmcli/run-script');\nconst fs = require('fs');\nconst readdir = util.promisify(fs.readdir);\nconst log = require('npmlog');\nconst removeNodeModules = async where => {\n  const rimrafOpts = {\n    glob: false\n  };\n  process.emit('time', 'npm-ci:rm');\n  const path = `${where}/node_modules`;\n  // get the list of entries so we can skip the glob for performance\n  const entries = await readdir(path, null).catch(er => []);\n  await Promise.all(entries.map(f => rimraf(`${path}/${f}`, rimrafOpts)));\n  process.emit('timeEnd', 'npm-ci:rm');\n};\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\nclass CI extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Install a project with a clean slate';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'ci';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['audit', 'ignore-scripts', 'script-shell'];\n  }\n  exec(args, cb) {\n    this.ci().then(() => cb()).catch(cb);\n  }\n  async ci() {\n    if (this.npm.config.get('global')) {\n      const err = new Error('`npm ci` does not work for global packages');\n      err.code = 'ECIGLOBAL';\n      throw err;\n    }\n    const where = this.npm.prefix;\n    const opts = {\n      ...this.npm.flatOptions,\n      path: where,\n      log: this.npm.log,\n      save: false,\n      // npm ci should never modify the lockfile or package.json\n      workspaces: this.workspaceNames\n    };\n    const arb = new Arborist(opts);\n    await Promise.all([arb.loadVirtual().catch(er => {\n      log.verbose('loadVirtual', er.stack);\n      const msg = 'The `npm ci` command can only install with an existing package-lock.json or\\n' + 'npm-shrinkwrap.json with lockfileVersion >= 1. Run an install with npm@5 or\\n' + 'later to generate a package-lock.json file, then try again.';\n      throw new Error(msg);\n    }), removeNodeModules(where)]);\n    await arb.reify(opts);\n    const ignoreScripts = this.npm.config.get('ignore-scripts');\n    // run the same set of scripts that `npm install` runs.\n    if (!ignoreScripts) {\n      const scripts = ['preinstall', 'install', 'postinstall', 'prepublish',\n      // XXX should we remove this finally??\n      'preprepare', 'prepare', 'postprepare'];\n      const scriptShell = this.npm.config.get('script-shell') || undefined;\n      for (const event of scripts) {\n        await runScript({\n          path: where,\n          args: [],\n          scriptShell,\n          stdio: 'inherit',\n          stdioString: true,\n          banner: log.level !== 'silent',\n          event\n        });\n      }\n    }\n    await reifyFinish(this.npm, arb);\n  }\n}\nmodule.exports = CI;","map":{"version":3,"names":["util","require","Arborist","rimraf","promisify","reifyFinish","runScript","fs","readdir","log","removeNodeModules","where","rimrafOpts","glob","process","emit","path","entries","catch","er","Promise","all","map","f","ArboristWorkspaceCmd","CI","description","name","params","exec","args","cb","ci","then","npm","config","get","err","Error","code","prefix","opts","flatOptions","save","workspaces","workspaceNames","arb","loadVirtual","verbose","stack","msg","reify","ignoreScripts","scripts","scriptShell","undefined","event","stdio","stdioString","banner","level","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/ci.js"],"sourcesContent":["const util = require('util')\nconst Arborist = require('@npmcli/arborist')\nconst rimraf = util.promisify(require('rimraf'))\nconst reifyFinish = require('./utils/reify-finish.js')\nconst runScript = require('@npmcli/run-script')\nconst fs = require('fs')\nconst readdir = util.promisify(fs.readdir)\n\nconst log = require('npmlog')\n\nconst removeNodeModules = async where => {\n  const rimrafOpts = { glob: false }\n  process.emit('time', 'npm-ci:rm')\n  const path = `${where}/node_modules`\n  // get the list of entries so we can skip the glob for performance\n  const entries = await readdir(path, null).catch(er => [])\n  await Promise.all(entries.map(f => rimraf(`${path}/${f}`, rimrafOpts)))\n  process.emit('timeEnd', 'npm-ci:rm')\n}\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\n\nclass CI extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Install a project with a clean slate'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'ci'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'audit',\n      'ignore-scripts',\n      'script-shell',\n    ]\n  }\n\n  exec (args, cb) {\n    this.ci().then(() => cb()).catch(cb)\n  }\n\n  async ci () {\n    if (this.npm.config.get('global')) {\n      const err = new Error('`npm ci` does not work for global packages')\n      err.code = 'ECIGLOBAL'\n      throw err\n    }\n\n    const where = this.npm.prefix\n    const opts = {\n      ...this.npm.flatOptions,\n      path: where,\n      log: this.npm.log,\n      save: false, // npm ci should never modify the lockfile or package.json\n      workspaces: this.workspaceNames,\n    }\n\n    const arb = new Arborist(opts)\n    await Promise.all([\n      arb.loadVirtual().catch(er => {\n        log.verbose('loadVirtual', er.stack)\n        const msg =\n          'The `npm ci` command can only install with an existing package-lock.json or\\n' +\n          'npm-shrinkwrap.json with lockfileVersion >= 1. Run an install with npm@5 or\\n' +\n          'later to generate a package-lock.json file, then try again.'\n        throw new Error(msg)\n      }),\n      removeNodeModules(where),\n    ])\n    await arb.reify(opts)\n\n    const ignoreScripts = this.npm.config.get('ignore-scripts')\n    // run the same set of scripts that `npm install` runs.\n    if (!ignoreScripts) {\n      const scripts = [\n        'preinstall',\n        'install',\n        'postinstall',\n        'prepublish', // XXX should we remove this finally??\n        'preprepare',\n        'prepare',\n        'postprepare',\n      ]\n      const scriptShell = this.npm.config.get('script-shell') || undefined\n      for (const event of scripts) {\n        await runScript({\n          path: where,\n          args: [],\n          scriptShell,\n          stdio: 'inherit',\n          stdioString: true,\n          banner: log.level !== 'silent',\n          event,\n        })\n      }\n    }\n    await reifyFinish(this.npm, arb)\n  }\n}\n\nmodule.exports = CI\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAME,MAAM,GAAGH,IAAI,CAACI,SAAS,CAACH,OAAO,CAAC,QAAQ,CAAC,CAAC;AAChD,MAAMI,WAAW,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AACtD,MAAMK,SAAS,GAAGL,OAAO,CAAC,oBAAoB,CAAC;AAC/C,MAAMM,EAAE,GAAGN,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMO,OAAO,GAAGR,IAAI,CAACI,SAAS,CAACG,EAAE,CAACC,OAAO,CAAC;AAE1C,MAAMC,GAAG,GAAGR,OAAO,CAAC,QAAQ,CAAC;AAE7B,MAAMS,iBAAiB,GAAG,MAAMC,KAAK,IAAI;EACvC,MAAMC,UAAU,GAAG;IAAEC,IAAI,EAAE;EAAM,CAAC;EAClCC,OAAO,CAACC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC;EACjC,MAAMC,IAAI,GAAG,GAAGL,KAAK,eAAe;EACpC;EACA,MAAMM,OAAO,GAAG,MAAMT,OAAO,CAACQ,IAAI,EAAE,IAAI,CAAC,CAACE,KAAK,CAACC,EAAE,IAAI,EAAE,CAAC;EACzD,MAAMC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACK,GAAG,CAACC,CAAC,IAAIpB,MAAM,CAAC,GAAGa,IAAI,IAAIO,CAAC,EAAE,EAAEX,UAAU,CAAC,CAAC,CAAC;EACvEE,OAAO,CAACC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC;AACtC,CAAC;AACD,MAAMS,oBAAoB,GAAGvB,OAAO,CAAC,8BAA8B,CAAC;AAEpE,MAAMwB,EAAE,SAASD,oBAAoB,CAAC;EACpC;EACA,WAAWE,WAAWA,CAAA,EAAI;IACxB,OAAO,sCAAsC;EAC/C;;EAEA;EACA,WAAWC,IAAIA,CAAA,EAAI;IACjB,OAAO,IAAI;EACb;;EAEA;EACA,WAAWC,MAAMA,CAAA,EAAI;IACnB,OAAO,CACL,OAAO,EACP,gBAAgB,EAChB,cAAc,CACf;EACH;EAEAC,IAAIA,CAAEC,IAAI,EAAEC,EAAE,EAAE;IACd,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,MAAMF,EAAE,CAAC,CAAC,CAAC,CAACb,KAAK,CAACa,EAAE,CAAC;EACtC;EAEA,MAAMC,EAAEA,CAAA,EAAI;IACV,IAAI,IAAI,CAACE,GAAG,CAACC,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC,EAAE;MACjC,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,4CAA4C,CAAC;MACnED,GAAG,CAACE,IAAI,GAAG,WAAW;MACtB,MAAMF,GAAG;IACX;IAEA,MAAM1B,KAAK,GAAG,IAAI,CAACuB,GAAG,CAACM,MAAM;IAC7B,MAAMC,IAAI,GAAG;MACX,GAAG,IAAI,CAACP,GAAG,CAACQ,WAAW;MACvB1B,IAAI,EAAEL,KAAK;MACXF,GAAG,EAAE,IAAI,CAACyB,GAAG,CAACzB,GAAG;MACjBkC,IAAI,EAAE,KAAK;MAAE;MACbC,UAAU,EAAE,IAAI,CAACC;IACnB,CAAC;IAED,MAAMC,GAAG,GAAG,IAAI5C,QAAQ,CAACuC,IAAI,CAAC;IAC9B,MAAMrB,OAAO,CAACC,GAAG,CAAC,CAChByB,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC7B,KAAK,CAACC,EAAE,IAAI;MAC5BV,GAAG,CAACuC,OAAO,CAAC,aAAa,EAAE7B,EAAE,CAAC8B,KAAK,CAAC;MACpC,MAAMC,GAAG,GACP,+EAA+E,GAC/E,+EAA+E,GAC/E,6DAA6D;MAC/D,MAAM,IAAIZ,KAAK,CAACY,GAAG,CAAC;IACtB,CAAC,CAAC,EACFxC,iBAAiB,CAACC,KAAK,CAAC,CACzB,CAAC;IACF,MAAMmC,GAAG,CAACK,KAAK,CAACV,IAAI,CAAC;IAErB,MAAMW,aAAa,GAAG,IAAI,CAAClB,GAAG,CAACC,MAAM,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC3D;IACA,IAAI,CAACgB,aAAa,EAAE;MAClB,MAAMC,OAAO,GAAG,CACd,YAAY,EACZ,SAAS,EACT,aAAa,EACb,YAAY;MAAE;MACd,YAAY,EACZ,SAAS,EACT,aAAa,CACd;MACD,MAAMC,WAAW,GAAG,IAAI,CAACpB,GAAG,CAACC,MAAM,CAACC,GAAG,CAAC,cAAc,CAAC,IAAImB,SAAS;MACpE,KAAK,MAAMC,KAAK,IAAIH,OAAO,EAAE;QAC3B,MAAM/C,SAAS,CAAC;UACdU,IAAI,EAAEL,KAAK;UACXmB,IAAI,EAAE,EAAE;UACRwB,WAAW;UACXG,KAAK,EAAE,SAAS;UAChBC,WAAW,EAAE,IAAI;UACjBC,MAAM,EAAElD,GAAG,CAACmD,KAAK,KAAK,QAAQ;UAC9BJ;QACF,CAAC,CAAC;MACJ;IACF;IACA,MAAMnD,WAAW,CAAC,IAAI,CAAC6B,GAAG,EAAEY,GAAG,CAAC;EAClC;AACF;AAEAe,MAAM,CAACC,OAAO,GAAGrC,EAAE","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const {\n  spawn\n} = require('@npmcli/git');\nconst semver = require('semver');\nmodule.exports = async opts => {\n  const tag = (await spawn(['describe', '--tags', '--abbrev=0', '--match=*.*.*'], opts)).stdout.trim();\n  const ver = semver.coerce(tag, {\n    loose: true\n  });\n  if (ver) {\n    return ver.version;\n  }\n  throw new Error(`Tag is not a valid version: ${JSON.stringify(tag)}`);\n};","map":{"version":3,"names":["spawn","require","semver","module","exports","opts","tag","stdout","trim","ver","coerce","loose","version","Error","JSON","stringify"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/libnpmversion/lib/retrieve-tag.js"],"sourcesContent":["const { spawn } = require('@npmcli/git')\nconst semver = require('semver')\n\nmodule.exports = async opts => {\n  const tag = (await spawn(['describe', '--tags', '--abbrev=0', '--match=*.*.*'], opts)).stdout.trim()\n  const ver = semver.coerce(tag, { loose: true })\n  if (ver) {\n    return ver.version\n  }\n  throw new Error(`Tag is not a valid version: ${JSON.stringify(tag)}`)\n}\n"],"mappings":"AAAA,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAEhCE,MAAM,CAACC,OAAO,GAAG,MAAMC,IAAI,IAAI;EAC7B,MAAMC,GAAG,GAAG,CAAC,MAAMN,KAAK,CAAC,CAAC,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,eAAe,CAAC,EAAEK,IAAI,CAAC,EAAEE,MAAM,CAACC,IAAI,CAAC,CAAC;EACpG,MAAMC,GAAG,GAAGP,MAAM,CAACQ,MAAM,CAACJ,GAAG,EAAE;IAAEK,KAAK,EAAE;EAAK,CAAC,CAAC;EAC/C,IAAIF,GAAG,EAAE;IACP,OAAOA,GAAG,CAACG,OAAO;EACpB;EACA,MAAM,IAAIC,KAAK,CAAC,+BAA+BC,IAAI,CAACC,SAAS,CAACT,GAAG,CAAC,EAAE,CAAC;AACvE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
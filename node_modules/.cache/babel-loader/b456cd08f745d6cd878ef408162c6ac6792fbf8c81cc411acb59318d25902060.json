{"ast":null,"code":"const linkBins = require('./lib/link-bins.js');\nconst linkMans = require('./lib/link-mans.js');\nconst binLinks = opts => {\n  const {\n    path,\n    pkg,\n    force,\n    global,\n    top\n  } = opts;\n  // global top pkgs on windows get bins installed in {prefix}, and no mans\n  //\n  // unix global top pkgs get their bins installed in {prefix}/bin,\n  // and mans in {prefix}/share/man\n  //\n  // non-top pkgs get their bins installed in {prefix}/node_modules/.bin,\n  // and do not install mans\n  //\n  // non-global top pkgs don't have any bins or mans linked.  From here on\n  // out, if it's top, we know that it's global, so no need to pass that\n  // option further down the stack.\n  if (top && !global) return Promise.resolve();\n  return Promise.all([\n  // allow clobbering within the local node_modules/.bin folder.\n  // only global bins are protected in this way, or else it is\n  // yet another vector for excessive dependency conflicts.\n  linkBins({\n    path,\n    pkg,\n    top,\n    force: force || !top\n  }), linkMans({\n    path,\n    pkg,\n    top,\n    force\n  })]);\n};\nconst shimBin = require('./lib/shim-bin.js');\nconst linkGently = require('./lib/link-gently.js');\nconst resetSeen = () => {\n  shimBin.resetSeen();\n  linkGently.resetSeen();\n};\nconst checkBins = require('./lib/check-bins.js');\nconst getPaths = require('./lib/get-paths.js');\nmodule.exports = Object.assign(binLinks, {\n  checkBins,\n  resetSeen,\n  getPaths\n});","map":{"version":3,"names":["linkBins","require","linkMans","binLinks","opts","path","pkg","force","global","top","Promise","resolve","all","shimBin","linkGently","resetSeen","checkBins","getPaths","module","exports","Object","assign"],"sources":["C:/Users/Felo/node_modules/npm/node_modules/bin-links/index.js"],"sourcesContent":["const linkBins = require('./lib/link-bins.js')\nconst linkMans = require('./lib/link-mans.js')\n\nconst binLinks = opts => {\n  const { path, pkg, force, global, top } = opts\n  // global top pkgs on windows get bins installed in {prefix}, and no mans\n  //\n  // unix global top pkgs get their bins installed in {prefix}/bin,\n  // and mans in {prefix}/share/man\n  //\n  // non-top pkgs get their bins installed in {prefix}/node_modules/.bin,\n  // and do not install mans\n  //\n  // non-global top pkgs don't have any bins or mans linked.  From here on\n  // out, if it's top, we know that it's global, so no need to pass that\n  // option further down the stack.\n  if (top && !global)\n    return Promise.resolve()\n\n  return Promise.all([\n    // allow clobbering within the local node_modules/.bin folder.\n    // only global bins are protected in this way, or else it is\n    // yet another vector for excessive dependency conflicts.\n    linkBins({path, pkg, top, force: force || !top}),\n    linkMans({path, pkg, top, force}),\n  ])\n}\n\nconst shimBin = require('./lib/shim-bin.js')\nconst linkGently = require('./lib/link-gently.js')\nconst resetSeen = () => {\n  shimBin.resetSeen()\n  linkGently.resetSeen()\n}\n\nconst checkBins = require('./lib/check-bins.js')\nconst getPaths = require('./lib/get-paths.js')\n\nmodule.exports = Object.assign(binLinks, {\n  checkBins,\n  resetSeen,\n  getPaths,\n})\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC9C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAE9C,MAAME,QAAQ,GAAGC,IAAI,IAAI;EACvB,MAAM;IAAEC,IAAI;IAAEC,GAAG;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAI,CAAC,GAAGL,IAAI;EAC9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIK,GAAG,IAAI,CAACD,MAAM,EAChB,OAAOE,OAAO,CAACC,OAAO,CAAC,CAAC;EAE1B,OAAOD,OAAO,CAACE,GAAG,CAAC;EACjB;EACA;EACA;EACAZ,QAAQ,CAAC;IAACK,IAAI;IAAEC,GAAG;IAAEG,GAAG;IAAEF,KAAK,EAAEA,KAAK,IAAI,CAACE;EAAG,CAAC,CAAC,EAChDP,QAAQ,CAAC;IAACG,IAAI;IAAEC,GAAG;IAAEG,GAAG;IAAEF;EAAK,CAAC,CAAC,CAClC,CAAC;AACJ,CAAC;AAED,MAAMM,OAAO,GAAGZ,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAMa,UAAU,GAAGb,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAMc,SAAS,GAAGA,CAAA,KAAM;EACtBF,OAAO,CAACE,SAAS,CAAC,CAAC;EACnBD,UAAU,CAACC,SAAS,CAAC,CAAC;AACxB,CAAC;AAED,MAAMC,SAAS,GAAGf,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAMgB,QAAQ,GAAGhB,OAAO,CAAC,oBAAoB,CAAC;AAE9CiB,MAAM,CAACC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAClB,QAAQ,EAAE;EACvCa,SAAS;EACTD,SAAS;EACTE;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"const fs = require('fs');\nconst path = require('path');\nconst color = require('ansicolors');\nconst {\n  promisify\n} = require('util');\nconst glob = promisify(require('glob'));\nconst readFile = promisify(fs.readFile);\nconst BaseCommand = require('./base-command.js');\nclass HelpSearch extends BaseCommand {\n  static get description() {\n    return 'Search npm help documentation';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name() {\n    return 'help-search';\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage() {\n    return ['<text>'];\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params() {\n    return ['long'];\n  }\n  exec(args, cb) {\n    this.helpSearch(args).then(() => cb()).catch(cb);\n  }\n  async helpSearch(args) {\n    if (!args.length) return this.npm.output(this.usage);\n    const docPath = path.resolve(__dirname, '..', 'docs/content');\n    const files = await glob(`${docPath}/*/*.md`);\n    const data = await this.readFiles(files);\n    const results = await this.searchFiles(args, data, files);\n    const formatted = this.formatResults(args, results);\n    if (!formatted.trim()) this.npm.output(`No matches in help for: ${args.join(' ')}\\n`);else this.npm.output(formatted);\n  }\n  async readFiles(files) {\n    const res = {};\n    await Promise.all(files.map(async file => {\n      res[file] = (await readFile(file, 'utf8')).replace(/^---\\n(.*\\n)*?---\\n/, '').trim();\n    }));\n    return res;\n  }\n  async searchFiles(args, data, files) {\n    const results = [];\n    for (const [file, content] of Object.entries(data)) {\n      const lowerCase = content.toLowerCase();\n      // skip if no matches at all\n      if (!args.some(a => lowerCase.includes(a.toLowerCase()))) continue;\n      const lines = content.split(/\\n+/);\n\n      // if a line has a search term, then skip it and the next line.\n      // if the next line has a search term, then skip all 3\n      // otherwise, set the line to null.  then remove the nulls.\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const nextLine = lines[i + 1];\n        let match = false;\n        if (nextLine) {\n          match = args.some(a => nextLine.toLowerCase().includes(a.toLowerCase()));\n          if (match) {\n            // skip over the next line, and the line after it.\n            i += 2;\n            continue;\n          }\n        }\n        match = args.some(a => line.toLowerCase().includes(a.toLowerCase()));\n        if (match) {\n          // skip over the next line\n          i++;\n          continue;\n        }\n        lines[i] = null;\n      }\n\n      // now squish any string of nulls into a single null\n      const pruned = lines.reduce((l, r) => {\n        if (!(r === null && l[l.length - 1] === null)) l.push(r);\n        return l;\n      }, []);\n      if (pruned[pruned.length - 1] === null) pruned.pop();\n      if (pruned[0] === null) pruned.shift();\n\n      // now count how many args were found\n      const found = {};\n      let totalHits = 0;\n      for (const line of pruned) {\n        for (const arg of args) {\n          const hit = (line || '').toLowerCase().split(arg.toLowerCase()).length - 1;\n          if (hit > 0) {\n            found[arg] = (found[arg] || 0) + hit;\n            totalHits += hit;\n          }\n        }\n      }\n      const cmd = 'npm help ' + path.basename(file, '.md').replace(/^npm-/, '');\n      results.push({\n        file,\n        cmd,\n        lines: pruned,\n        found: Object.keys(found),\n        hits: found,\n        totalHits\n      });\n    }\n\n    // sort results by number of results found, then by number of hits\n    // then by number of matching lines\n\n    // coverage is ignored here because the contents of results are\n    // nondeterministic due to either glob or readFiles or Object.entries\n    return results.sort( /* istanbul ignore next */(a, b) => a.found.length > b.found.length ? -1 : a.found.length < b.found.length ? 1 : a.totalHits > b.totalHits ? -1 : a.totalHits < b.totalHits ? 1 : a.lines.length > b.lines.length ? -1 : a.lines.length < b.lines.length ? 1 : 0).slice(0, 10);\n  }\n  formatResults(args, results) {\n    const cols = Math.min(process.stdout.columns || Infinity, 80) + 1;\n    const out = results.map(res => {\n      const out = [res.cmd];\n      const r = Object.keys(res.hits).map(k => `${k}:${res.hits[k]}`).sort((a, b) => a > b ? 1 : -1).join(' ');\n      out.push(' '.repeat(Math.max(1, cols - out.join(' ').length - r.length - 1)));\n      out.push(r);\n      if (!this.npm.config.get('long')) return out.join('');\n      out.unshift('\\n\\n');\n      out.push('\\n');\n      out.push('-'.repeat(cols - 1) + '\\n');\n      res.lines.forEach((line, i) => {\n        if (line === null || i > 3) return;\n        if (!this.npm.color) {\n          out.push(line + '\\n');\n          return;\n        }\n        const hilitLine = [];\n        for (const arg of args) {\n          const finder = line.toLowerCase().split(arg.toLowerCase());\n          let p = 0;\n          for (const f of finder) {\n            hilitLine.push(line.substr(p, f.length));\n            const word = line.substr(p + f.length, arg.length);\n            const hilit = color.bgBlack(color.red(word));\n            hilitLine.push(hilit);\n            p += f.length + arg.length;\n          }\n        }\n        out.push(hilitLine.join('') + '\\n');\n      });\n      return out.join('');\n    }).join('\\n');\n    const finalOut = results.length && !this.npm.config.get('long') ? 'Top hits for ' + args.map(JSON.stringify).join(' ') + '\\n' + '—'.repeat(cols - 1) + '\\n' + out + '\\n' + '—'.repeat(cols - 1) + '\\n' + '(run with -l or --long to see more context)' : out;\n    return finalOut.trim();\n  }\n}\nmodule.exports = HelpSearch;","map":{"version":3,"names":["fs","require","path","color","promisify","glob","readFile","BaseCommand","HelpSearch","description","name","usage","params","exec","args","cb","helpSearch","then","catch","length","npm","output","docPath","resolve","__dirname","files","data","readFiles","results","searchFiles","formatted","formatResults","trim","join","res","Promise","all","map","file","replace","content","Object","entries","lowerCase","toLowerCase","some","a","includes","lines","split","i","line","nextLine","match","pruned","reduce","l","r","push","pop","shift","found","totalHits","arg","hit","cmd","basename","keys","hits","sort","b","slice","cols","Math","min","process","stdout","columns","Infinity","out","k","repeat","max","config","get","unshift","forEach","hilitLine","finder","p","f","substr","word","hilit","bgBlack","red","finalOut","JSON","stringify","module","exports"],"sources":["C:/Users/Felo/node_modules/npm/lib/help-search.js"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst color = require('ansicolors')\nconst { promisify } = require('util')\nconst glob = promisify(require('glob'))\nconst readFile = promisify(fs.readFile)\nconst BaseCommand = require('./base-command.js')\n\nclass HelpSearch extends BaseCommand {\n  static get description () {\n    return 'Search npm help documentation'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'help-search'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['<text>']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['long']\n  }\n\n  exec (args, cb) {\n    this.helpSearch(args).then(() => cb()).catch(cb)\n  }\n\n  async helpSearch (args) {\n    if (!args.length)\n      return this.npm.output(this.usage)\n\n    const docPath = path.resolve(__dirname, '..', 'docs/content')\n    const files = await glob(`${docPath}/*/*.md`)\n    const data = await this.readFiles(files)\n    const results = await this.searchFiles(args, data, files)\n    const formatted = this.formatResults(args, results)\n    if (!formatted.trim())\n      this.npm.output(`No matches in help for: ${args.join(' ')}\\n`)\n    else\n      this.npm.output(formatted)\n  }\n\n  async readFiles (files) {\n    const res = {}\n    await Promise.all(files.map(async file => {\n      res[file] = (await readFile(file, 'utf8'))\n        .replace(/^---\\n(.*\\n)*?---\\n/, '').trim()\n    }))\n    return res\n  }\n\n  async searchFiles (args, data, files) {\n    const results = []\n    for (const [file, content] of Object.entries(data)) {\n      const lowerCase = content.toLowerCase()\n      // skip if no matches at all\n      if (!args.some(a => lowerCase.includes(a.toLowerCase())))\n        continue\n\n      const lines = content.split(/\\n+/)\n\n      // if a line has a search term, then skip it and the next line.\n      // if the next line has a search term, then skip all 3\n      // otherwise, set the line to null.  then remove the nulls.\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i]\n        const nextLine = lines[i + 1]\n        let match = false\n        if (nextLine) {\n          match = args.some(a =>\n            nextLine.toLowerCase().includes(a.toLowerCase()))\n          if (match) {\n            // skip over the next line, and the line after it.\n            i += 2\n            continue\n          }\n        }\n\n        match = args.some(a => line.toLowerCase().includes(a.toLowerCase()))\n\n        if (match) {\n          // skip over the next line\n          i++\n          continue\n        }\n\n        lines[i] = null\n      }\n\n      // now squish any string of nulls into a single null\n      const pruned = lines.reduce((l, r) => {\n        if (!(r === null && l[l.length - 1] === null))\n          l.push(r)\n\n        return l\n      }, [])\n\n      if (pruned[pruned.length - 1] === null)\n        pruned.pop()\n\n      if (pruned[0] === null)\n        pruned.shift()\n\n      // now count how many args were found\n      const found = {}\n      let totalHits = 0\n      for (const line of pruned) {\n        for (const arg of args) {\n          const hit = (line || '').toLowerCase()\n            .split(arg.toLowerCase()).length - 1\n\n          if (hit > 0) {\n            found[arg] = (found[arg] || 0) + hit\n            totalHits += hit\n          }\n        }\n      }\n\n      const cmd = 'npm help ' +\n        path.basename(file, '.md').replace(/^npm-/, '')\n      results.push({\n        file,\n        cmd,\n        lines: pruned,\n        found: Object.keys(found),\n        hits: found,\n        totalHits,\n      })\n    }\n\n    // sort results by number of results found, then by number of hits\n    // then by number of matching lines\n\n    // coverage is ignored here because the contents of results are\n    // nondeterministic due to either glob or readFiles or Object.entries\n    return results.sort(/* istanbul ignore next */ (a, b) =>\n      a.found.length > b.found.length ? -1\n      : a.found.length < b.found.length ? 1\n      : a.totalHits > b.totalHits ? -1\n      : a.totalHits < b.totalHits ? 1\n      : a.lines.length > b.lines.length ? -1\n      : a.lines.length < b.lines.length ? 1\n      : 0).slice(0, 10)\n  }\n\n  formatResults (args, results) {\n    const cols = Math.min(process.stdout.columns || Infinity, 80) + 1\n\n    const out = results.map(res => {\n      const out = [res.cmd]\n      const r = Object.keys(res.hits)\n        .map(k => `${k}:${res.hits[k]}`)\n        .sort((a, b) => a > b ? 1 : -1)\n        .join(' ')\n\n      out.push(' '.repeat((Math.max(1, cols - out.join(' ').length - r.length - 1))))\n      out.push(r)\n\n      if (!this.npm.config.get('long'))\n        return out.join('')\n\n      out.unshift('\\n\\n')\n      out.push('\\n')\n      out.push('-'.repeat(cols - 1) + '\\n')\n      res.lines.forEach((line, i) => {\n        if (line === null || i > 3)\n          return\n\n        if (!this.npm.color) {\n          out.push(line + '\\n')\n          return\n        }\n        const hilitLine = []\n        for (const arg of args) {\n          const finder = line.toLowerCase().split(arg.toLowerCase())\n          let p = 0\n          for (const f of finder) {\n            hilitLine.push(line.substr(p, f.length))\n            const word = line.substr(p + f.length, arg.length)\n            const hilit = color.bgBlack(color.red(word))\n            hilitLine.push(hilit)\n            p += f.length + arg.length\n          }\n        }\n        out.push(hilitLine.join('') + '\\n')\n      })\n\n      return out.join('')\n    }).join('\\n')\n\n    const finalOut = results.length && !this.npm.config.get('long')\n      ? 'Top hits for ' + (args.map(JSON.stringify).join(' ')) + '\\n' +\n      '—'.repeat(cols - 1) + '\\n' +\n      out + '\\n' +\n      '—'.repeat(cols - 1) + '\\n' +\n      '(run with -l or --long to see more context)'\n      : out\n\n    return finalOut.trim()\n  }\n}\nmodule.exports = HelpSearch\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}